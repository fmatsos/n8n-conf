```yaml
category: Controllers
questions:
  -
    question: 'Which of the following is the recommended naming convention for a Symfony controller class?'
    answers:
      - { value: 'ProductController', correct: true }
      - { value: 'Product_Controller', correct: false }
      - { value: 'productController', correct: false }
      - { value: 'ControllerProduct', correct: false }
    help: |
      Symfony recommends using PascalCase for controller class names, typically ending with "Controller".
      https://symfony.com/doc/current/controller.html#controller-naming-conventions
  -
    question: 'Which method is used in `AbstractController` to render a Twig template and return a `Response` object?'
    answers:
      - { value: '$this->renderView()', correct: false }
      - { value: '$this->render()', correct: true }
      - { value: '$this->display()', correct: false }
      - { value: '$this->showTemplate()', correct: false }
    help: |
      The `render()` method is provided by `AbstractController` to render a Twig template and create a `Response` object.
      https://symfony.com/doc/current/controller.html#rendering-templates
  -
    question: 'How can you access query parameters from the `Request` object in a Symfony controller?'
    answers:
      - { value: '$request->request->get(''param'')', correct: false }
      - { value: '$request->query->get(''param'')', correct: true }
      - { value: '$request->attributes->get(''param'')', correct: false }
      - { value: '$request->get(''param'')', correct: false }
    help: |
      Query parameters are accessed via the `query` property of the `Request` object.
      https://symfony.com/doc/current/controller.html#accessing-the-request
  -
    question: 'What is the purpose of the `Response` object in Symfony?'
    answers:
      - { value: 'To represent an HTTP request received by the application.', correct: false }
      - { value: 'To represent an HTTP response sent back to the client.', correct: true }
      - { value: 'To handle database interactions.', correct: false }
      - { value: 'To manage user sessions.', correct: false }
    help: |
      The `Symfony\Component\HttpFoundation\Response` class encapsulates the HTTP response that will be sent back to the client.
      https://symfony.com/doc/current/controller.html#the-response
  -
    question: 'Which of the following HTTP status codes indicates a successful response?'
    answers:
      - { value: '404 Not Found', correct: false }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '200 OK', correct: true }
      - { value: '302 Found', correct: false }
    help: |
      The 200 OK status code indicates that the request has succeeded.
      https://symfony.com/doc/current/controller.html#the-response
  -
    question: 'How do you set a cookie in a Symfony controller?'
    answers:
      - { value: '$response->headers->setCookie(new Cookie(''name'', ''value''))', correct: true }
      - { value: '$request->cookies->set(''name'', ''value'')', correct: false }
      - { value: '$session->setCookie(''name'', ''value'')', correct: false }
      - { value: '$this->setCookie(''name'', ''value'')', correct: false }
    help: |
      Cookies are set on the `Response` object's headers.
      https://symfony.com/doc/current/components/http_foundation/cookies.html
  -
    question: 'Which service is typically used to manage sessions in Symfony?'
    answers:
      - { value: 'session', correct: true }
      - { value: 'request_stack', correct: false }
      - { value: 'cache', correct: false }
      - { value: 'security.token_storage', correct: false }
    help: |
      The `session` service (an instance of `Symfony\Component\HttpFoundation\Session\SessionInterface`) is used to manage session data.
      https://symfony.com/doc/current/components/http_foundation/sessions.html
  -
    question: 'How do you add a flash message in a Symfony controller extending `AbstractController`?'
    answers:
      - { value: '$this->get(''session'')->getFlashBag()->add(''type'', ''message'')', correct: false }
      - { value: '$this->addFlash(''type'', ''message'')', correct: true }
      - { value: '$this->session->addFlash(''type'', ''message'')', correct: false }
      - { value: '$this->flash(''type'', ''message'')', correct: false }
    help: |
      The `addFlash()` method is a convenient helper provided by `AbstractController`.
      https://symfony.com/doc/current/controller.html#flash-messages
  -
    question: 'Which method is used to redirect to a specific route in Symfony?'
    answers:
      - { value: '$this->redirect(''url'')', correct: false }
      - { value: '$this->redirectToRoute(''route_name'', [...])', correct: true }
      - { value: '$this->forward(''controller_name'')', correct: false }
      - { value: '$this->redirectResponse(''route_name'')', correct: false }
    help: |
      `redirectToRoute()` generates a URL for a given route and returns a `RedirectResponse`.
      https://symfony.com/doc/current/controller.html#redirecting
  -
    question: 'What is the HTTP status code for a permanent redirect?'
    answers:
      - { value: '301 Moved Permanently', correct: true }
      - { value: '302 Found', correct: false }
      - { value: '303 See Other', correct: false }
      - { value: '307 Temporary Redirect', correct: false }
    help: |
      A 301 status code indicates that the requested resource has been permanently moved to a new URL.
      https://symfony.com/doc/current/controller.html#redirecting
  -
    question: 'When would you use an internal redirect (forwarding) in Symfony?'
    answers:
      - { value: 'To send the user to an external website.', correct: false }
      - { value: 'To process a sub-request to another controller internally, without a browser redirect.', correct: true }
      - { value: 'To generate a URL for a route.', correct: false }
      - { value: 'To handle form submissions.', correct: false }
    help: |
      Forwarding allows you to make an internal sub-request to another controller, which returns a `Response` object.
      https://symfony.com/doc/current/controller/forwarding.html
  -
    question: 'Which method is used to forward a request to another controller in `AbstractController`?'
    answers:
      - { value: '$this->redirect()', correct: false }
      - { value: '$this->forward()', correct: true }
      - { value: '$this->render()', correct: false }
      - { value: '$this->handle()', correct: false }
    help: |
      The `forward()` method creates an internal sub-request to another controller.
      https://symfony.com/doc/current/controller/forwarding.html
  -
    question: 'How do you generate a 404 Not Found page in a Symfony controller?'
    answers:
      - { value: 'Return `new Response('', 404)`', correct: false }
      - { value: 'Throw `new NotFoundHttpException()`', correct: true }
      - { value: 'Call `$this->render404()`', correct: false }
      - { value: 'Set `$response->setStatusCode(404)` and return.', correct: false }
    help: |
      Throwing a `NotFoundHttpException` is the standard way to trigger a 404 response. Symfony's exception listener will catch it and render the appropriate error page.
      https://symfony.com/doc/current/controller.html#generating-404-pages
  -
    question: 'Which class should you type-hint in a controller action to receive an uploaded file?'
    answers:
      - { value: '`Symfony\Component\HttpFoundation\File\File`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\File\UploadedFile`', correct: true }
      - { value: '`SplFileInfo`', correct: false }
      - { value: '`File`', correct: false }
    help: |
      Uploaded files are represented by instances of `Symfony\Component\HttpFoundation\File\UploadedFile`.
      https://symfony.com/doc/current/controller.html#uploading-files
  -
    question: 'What is the purpose of the `#[MapUploadedFile]` attribute in a controller action?'
    answers:
      - { value: 'To automatically move the uploaded file to a permanent location.', correct: false }
      - { value: 'To validate the uploaded file against specific constraints.', correct: false }
      - { value: 'To automatically map an uploaded file from the request to an `UploadedFile` object in the controller argument.', correct: true }
      - { value: 'To generate a URL for the uploaded file.', correct: false }
    help: |
      The `#[MapUploadedFile]` attribute simplifies the process of getting an `UploadedFile` object directly in your controller method arguments.
      https://symfony.com/doc/current/controller.html#mapping-uploaded-files-to-controller-arguments
  -
    question: 'Which of the following is a built-in internal controller in Symfony?'
    answers:
      - { value: '`Symfony\Bundle\FrameworkBundle\Controller\RedirectController`', correct: true }
      - { value: '`App\Controller\DefaultController`', correct: false }
      - { value: '`Symfony\Bundle\FrameworkBundle\Controller\FormController`', correct: false }
      - { value: '`Symfony\Bundle\FrameworkBundle\Controller\SecurityController`', correct: false }
    help: |
      Symfony provides several built-in controllers, such as `RedirectController` for simple redirects.
      https://symfony.com/doc/current/controller/controllers_as_services.html (While not explicitly listed as "internal" in a separate section, `RedirectController` is a common example of a framework-provided controller used internally for tasks like redirecting from `/` to `/app`).
  -
    question: 'What is an Argument Value Resolver in Symfony?'
    answers:
      - { value: 'A service that converts controller method arguments into route parameters.', correct: false }
      - { value: 'A mechanism that automatically determines the values for controller method arguments based on the `Request` and other services.', correct: true }
      - { value: 'A tool for validating input data before it reaches the controller.', correct: false }
      - { value: 'A way to define custom routes in YAML files.', correct: false }
    help: |
      Argument Value Resolvers are responsible for populating controller method arguments.
      https://symfony.com/doc/current/controller/value_resolver.html
  -
    question: 'Which interface must a custom argument value resolver implement?'
    answers:
      - { value: '`Symfony\Component\HttpKernel\Controller\ControllerResolverInterface`', correct: false }
      - { value: '`Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface`', correct: false }
      - { value: '`Symfony\Component\HttpKernel\Controller\ValueResolverInterface`', correct: true }
      - { value: '`Symfony\Component\HttpFoundation\RequestMatcherInterface`', correct: false }
    help: |
      Custom argument value resolvers must implement `ValueResolverInterface`.
      https://symfony.com/doc/current/controller/value_resolver.html#creating-a-custom-value-resolver
  -
    question: 'Which of the following is NOT a common way to define a controller in Symfony?'
    answers:
      - { value: 'As a class with a public method.', correct: false }
      - { value: 'As an invokable class (using `__invoke()`).', correct: false }
      - { value: 'As a standalone PHP function.', correct: false }
      - { value: 'As a Twig macro.', correct: true }
    help: |
      Controllers in Symfony are typically PHP callables (class methods, invokable classes, or functions). Twig macros are for template logic.
      https://symfony.com/doc/current/controller.html
  -
    question: 'What is the primary benefit of extending `AbstractController`?'
    answers:
      - { value: 'It makes the controller a service by default.', correct: false }
      - { value: 'It provides convenient helper methods for common tasks like rendering templates, generating URLs, and handling redirects.', correct: true }
      - { value: 'It automatically handles all routing for the controller.', correct: false }
      - { value: 'It enables automatic dependency injection for all controller arguments.', correct: false }
    help: |
      `AbstractController` offers a set of shortcuts and helper methods.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class
  -
    question: 'How can you retrieve a service from the container within a controller that does NOT extend `AbstractController`?'
    answers:
      - { value: 'By using `$this->get(''service_id'')`.', correct: false }
      - { value: 'By type-hinting the service in the controller method arguments.', correct: true }
      - { value: 'By accessing `$this->container->get(''service_id'')`.', correct: false }
      - { value: 'Services can only be accessed by extending `AbstractController`.', correct: false }
    help: |
      Controllers are services by default in Symfony 7, allowing autowiring by type-hinting.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services
  -
    question: 'Which attribute is used to define a route for a controller action in Symfony 7?'
    answers:
      - { value: '`@Route`', correct: false }
      - { value: '`#[Route]`', correct: true }
      - { value: '`@Path`', correct: false }
      - { value: '`#[Path]`', correct: false }
    help: |
      PHP attributes (starting with `#[`) are the modern way to define routes.
      https://symfony.com/doc/current/controller.html#routing
  -
    question: 'What is the purpose of the `#[AsController]` attribute?'
    answers:
      - { value: 'To mark a class as a service that can be used as a controller, enabling autowiring.', correct: true }
      - { value: 'To define a default route for all methods within the controller.', correct: false }
      - { value: 'To indicate that the controller handles asynchronous requests.', correct: false }
      - { value: 'To specify the template to be rendered by the controller.', correct: false }
    help: |
      `#[AsController]` explicitly registers a class as a controller service, allowing for autowiring and service injection.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services
  -
    question: 'When a controller method has an argument type-hinted with `int $id`, where does Symfony''s `ArgumentResolver` primarily look for the value of `$id`?'
    answers:
      - { value: 'In the `$_POST` superglobal.', correct: false }
      - { value: 'In the `Request` object''s attributes (e.g., from route parameters).', correct: true }
      - { value: 'In the `$_GET` superglobal.', correct: false }
      - { value: 'In the session.', correct: false }
    help: |
      The `ArgumentResolver` first checks the `Request` object's attributes, which are populated by the router.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution
  -
    question: 'What is the correct way to get the current `Request` object in a Symfony controller method without extending `AbstractController`?'
    answers:
      - { value: 'Inject it via the constructor.', correct: true }
      - { value: 'Access it globally via `$_REQUEST`.', correct: false }
      - { value: 'Call `Request::createFromGlobals()`.', correct: false }
      - { value: 'It is not possible without `AbstractController`.', correct: false }
    help: |
      You can inject the `Request` object directly into your controller's constructor or action method using type-hinting.
      https://symfony.com/doc/current/controller.html#accessing-the-request
  -
    question: 'Which of the following is a valid way to define an invokable controller in Symfony?'
    answers:
      - { value: 'A class with a method named `execute()`.', correct: false }
      - { value: 'A class with a method named `__invoke()`.', correct: true }
      - { value: 'A class that implements `ControllerInterface`.', correct: false }
      - { value: 'A static method named `handle()`.', correct: false }
    help: |
      Invokable controllers use the `__invoke()` magic method.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers
  -
    question: 'How can you access configuration parameters (e.g., from `services.yaml`) within a Symfony controller extending `AbstractController`?'
    answers:
      - { value: '$this->container->getParameter(''param_name'')', correct: false }
      - { value: '$this->getParameter(''param_name'')', correct: true }
      - { value: '$this->config->get(''param_name'')', correct: false }
      - { value: 'By injecting `ParameterBagInterface` into the controller.', correct: true }
    help: |
      `AbstractController` provides a `getParameter()` shortcut. Alternatively, you can inject `ParameterBagInterface` for more direct access.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters
  -
    question: 'What is the purpose of `RequestStack` in Symfony?'
    answers:
      - { value: 'To manage a stack of `Response` objects.', correct: false }
      - { value: 'To provide access to the current `Request` and master `Request` in a sub-request context.', correct: true }
      - { value: 'To store flash messages.', correct: false }
      - { value: 'To handle HTTP caching.', correct: false }
    help: |
      `RequestStack` allows you to access the current request, especially useful when dealing with sub-requests.
      https://symfony.com/doc/current/components/http_kernel.html#request-stack
  -
    question: 'Which method of the `Response` object is used to set the HTTP status code?'
    answers:
      - { value: '`setStatusCode(int $code)`', correct: true }
      - { value: '`setStatus(int $code)`', correct: false }
      - { value: '`setHttpCode(int $code)`', correct: false }
      - { value: '`code(int $code)`', correct: false }
    help: |
      The `setStatusCode()` method is used to set the HTTP status code.
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'How do you retrieve all flash messages of a specific type (e.g., ''success'') in a Twig template?'
    answers:
      - { value: '`app.session.flashbag.get(''success'')`', correct: true }
      - { value: '`app.flashes(''success'')`', correct: true }
      - { value: '`app.session.getFlashes(''success'')`', correct: false }
      - { value: '`app.flashMessages.get(''success'')`', correct: false }
    help: |
      Both `app.session.flashbag.get('success')` and `app.flashes('success')` are valid ways to retrieve flash messages in Twig. The latter is a shortcut.
      https://symfony.com/doc/current/controller.html#flash-messages
  -
    question: 'What is the default HTTP status code for a redirect generated by `redirectToRoute()`?'
    answers:
      - { value: '200', correct: false }
      - { value: '301', correct: false }
      - { value: '302', correct: true }
      - { value: '404', correct: false }
    help: |
      The default status code for `redirectToRoute()` is 302 Found.
      https://symfony.com/doc/current/controller.html#redirecting
  -
    question: 'Which of the following is true about controller arguments and the `ArgumentResolver`?'
    answers:
      - { value: 'The order of arguments (e.g., `Request $request`, `int $id`) matters for resolution.', correct: false }
      - { value: 'Arguments are resolved by name and type-hint.', correct: true }
      - { value: 'Only services can be injected as controller arguments.', correct: false }
      - { value: 'All arguments must have a default value.', correct: false }
    help: |
      The `ArgumentResolver` matches arguments by name and type-hint, so order doesn't strictly matter.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution
  -
    question: 'When handling a file upload, what is the value of `$_FILES[''my_file''][''error'']` if the upload was successful?'
    answers:
      - { value: '0 (UPLOAD_ERR_OK)', correct: true }
      - { value: '1 (UPLOAD_ERR_INI_SIZE)', correct: false }
      - { value: '2 (UPLOAD_ERR_FORM_SIZE)', correct: false }
      - { value: '4 (UPLOAD_ERR_NO_FILE)', correct: false }
    help: |
      `UPLOAD_ERR_OK` (value 0) indicates a successful file upload.
      https://www.php.net/manual/en/features.file-upload.errors.php
  -
    question: 'Which method of `UploadedFile` can be used to move the uploaded file to a target directory?'
    answers:
      - { value: '`saveAs()`', correct: false }
      - { value: '`moveTo()`', correct: true }
      - { value: '`store()`', correct: false }
      - { value: '`copyTo()`', correct: false }
    help: |
      The `moveTo()` method is used to move the uploaded file to its final destination.
      https://symfony.com/doc/current/components/http_foundation/requests.html#uploaded-files
  -
    question: 'What is the purpose of the `kernel.controller` event?'
    answers:
      - { value: 'It is dispatched after the controller has returned a `Response`.', correct: false }
      - { value: 'It is dispatched before the controller is resolved.', correct: false }
      - { value: 'It is dispatched after the controller callable has been determined but before its execution.', correct: true }
      - { value: 'It is dispatched when a route is not found.', correct: false }
    help: |
      The `kernel.controller` event allows listeners to interact with or even change the controller before it's executed.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-controller-event
  -
    question: 'How can you embed the output of another controller into a Twig template?'
    answers:
      - { value: 'Using `{{ include(''controller_template.html.twig'') }}`', correct: false }
      - { value: 'Using `{{ render(path(''route_name'', {...})) }}`', correct: true }
      - { value: 'Using `{{ render(controller(''App\\\\Controller\\\\MyController::myAction'', {...})) }}`', correct: true }
      - { value: 'Using `{{ embed(''controller_name'') }}`', correct: false }
    help: |
      The `render()` Twig function can be used with `path()` or `controller()` to embed the output of another controller.
      https://symfony.com/doc/current/templates.html#embedding-controllers
  -
    question: 'Which of the following is a valid way to inject a service (e.g., `LoggerInterface`) into a controller action method?'
    answers:
      - { value: '`public function index(LoggerInterface $logger)`', correct: true }
      - { value: '`public function index($logger)` and then `$logger = $this->get(''logger'')`', correct: false }
      - { value: '`public function index(): Response { $logger = new Logger(); ... }`', correct: false }
      - { value: '`public function index(ContainerInterface $container) { $logger = $container->get(''logger''); ... }`', correct: true }
    help: |
      Autowiring by type-hinting is the preferred method. You can also inject the entire container, though it's less recommended for specific services.
      https://symfony.com/doc/current/controller.html#autowiring-action-arguments
  -
    question: 'What is the purpose of `#[MapRequestPayload]` in a controller action?'
    answers:
      - { value: 'To automatically map query parameters to an object.', correct: false }
      - { value: 'To automatically map JSON or form data from the request body to an object.', correct: true }
      - { value: 'To validate the request headers.', correct: false }
      - { value: 'To serialize an object into a JSON response.', correct: false }
    help: |
      `#[MapRequestPayload]` is used to deserialize the request body (JSON, form data) into a PHP object.
      https://symfony.com/doc/current/controller/request_payload.html
  -
    question: 'Which of the following is a key characteristic of a "front controller" pattern in web development?'
    answers:
      - { value: 'Each URL maps directly to a separate PHP file.', correct: false }
      - { value: 'All requests are routed through a single entry point.', correct: true }
      - { value: 'It is primarily used for static file serving.', correct: false }
      - { value: 'It bypasses the need for a routing mechanism.', correct: false }
    help: |
      The front controller pattern centralizes request handling through a single script.
      https://symfony.com/doc/current/create_framework/front_controller.html
  -
    question: 'What is the role of `HttpKernel` in Symfony''s request-response lifecycle?'
    answers:
      - { value: 'It is responsible for rendering Twig templates.', correct: false }
      - { value: 'It handles the entire request-response lifecycle, from receiving the request to sending the response.', correct: true }
      - { value: 'It manages database connections.', correct: false }
      - { value: 'It provides security authentication and authorization.', correct: false }
    help: |
      The `HttpKernel` component is the core of Symfony's request handling.
      https://symfony.com/doc/current/components/http_kernel.html
  -
    question: 'When should you use `redirect()` instead of `redirectToRoute()`?'
    answers:
      - { value: 'When redirecting to an internal route with parameters.', correct: false }
      - { value: 'When redirecting to an arbitrary URL (e.g., an external website or a static file).', correct: true }
      - { value: 'When you need to perform an internal sub-request.', correct: false }
      - { value: 'Never, `redirectToRoute()` is always preferred.', correct: false }
    help: |
      `redirect()` is for arbitrary URLs, while `redirectToRoute()` is for named routes within your application.
      https://symfony.com/doc/current/controller.html#redirecting
  -
    question: 'What does the `Request::isXmlHttpRequest()` method check for?'
    answers:
      - { value: 'If the request method is POST.', correct: false }
      - { value: 'If the request was made via AJAX (i.e., `X-Requested-With` header is `XMLHttpRequest`).', correct: true }
      - { value: 'If the request contains an XML payload.', correct: false }
      - { value: 'If the request is secure (HTTPS).', correct: false }
    help: |
      This method checks the `X-Requested-With` header, which is commonly set by JavaScript frameworks for AJAX requests.
      https://symfony.com/doc/current/components/http_foundation/requests.html#checking-request-methods
  -
    question: 'How can you get the value of a route parameter (e.g., `{id}` in `/products/{id}`) in a controller action?'
    answers:
      - { value: 'By accessing `$request->query->get(''id'')`.', correct: false }
      - { value: 'By type-hinting the parameter directly in the method signature (e.g., `public function show(int $id)`).', correct: true }
      - { value: 'By accessing `$request->request->get(''id'')`.', correct: false }
      - { value: 'By calling `$this->getRouteParameter(''id'')`.', correct: false }
    help: |
      Symfony's `ArgumentResolver` automatically injects route parameters into type-hinted controller arguments.
      https://symfony.com/doc/current/controller.html#getting-information-from-the-request
  -
    question: 'What is the purpose of `SessionInterface` in Symfony?'
    answers:
      - { value: 'To manage database transactions.', correct: false }
      - { value: 'To store and retrieve data across multiple requests for a single user.', correct: true }
      - { value: 'To handle user authentication.', correct: false }
      - { value: 'To log application events.', correct: false }
    help: |
      `SessionInterface` provides methods for interacting with the user's session.
      https://symfony.com/doc/current/components/http_foundation/sessions.html
  -
    question: 'Which method of `Response` is used to send the HTTP headers and content to the client?'
    answers:
      - { value: '`send()`', correct: true }
      - { value: '`flush()`', correct: false }
      - { value: '`output()`', correct: false }
      - { value: '`dispatch()`', correct: false }
    help: |
      The `send()` method sends the HTTP headers and content.
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'What is the primary difference between `forward()` and `redirectToRoute()`?'
    answers:
      - { value: '`forward()` performs an internal sub-request, while `redirectToRoute()` issues an HTTP redirect to the client.', correct: true }
      - { value: '`forward()` is for external URLs, `redirectToRoute()` is for internal routes.', correct: false }
      - { value: '`forward()` returns a `Response`, `redirectToRoute()` returns `void`.', correct: false }
      - { value: '`forward()` is deprecated, `redirectToRoute()` is the modern approach.', correct: false }
    help: |
      `forward()` is an internal server-side operation, while `redirectToRoute()` sends a redirect header to the browser.
      https://symfony.com/doc/current/controller/forwarding.html
  -
    question: 'If you need to access the `RouterInterface` service within a controller that does not extend `AbstractController`, how would you typically do it?'
    answers:
      - { value: 'Call `Router::getInstance()`.', correct: false }
      - { value: 'Type-hint `RouterInterface` in the constructor or action method.', correct: true }
      - { value: 'Access it via `$_SERVER[''router'']`.', correct: false }
      - { value: 'It is not possible to access `RouterInterface` without `AbstractController`.', correct: false }
    help: |
      Dependency injection via type-hinting is the standard way to get services.
      https://symfony.com/doc/current/service_container.html#injecting-services-into-controllers
  -
    question: 'Which of the following is a valid way to create a `JsonResponse` in a Symfony controller?'
    answers:
      - { value: '`new Response(json_encode($data), 200, [''Content-Type'' => ''application/json''])`', correct: true }
      - { value: '`$this->json($data)` (if extending `AbstractController`)', correct: true }
      - { value: '`new JsonResponse($data)`', correct: true }
      - { value: '`$this->response->json($data)`', correct: false }
    help: |
      All three options are valid ways to create a JSON response. `AbstractController::json()` is a convenient shortcut.
      https://symfony.com/doc/current/components/http_foundation/json_response.html
  -
    question: 'What is the purpose of `Request::getContent()`?'
    answers:
      - { value: 'To get the decoded JSON body of the request.', correct: false }
      - { value: 'To get the raw content of the request body.', correct: true }
      - { value: 'To get the uploaded files.', correct: false }
      - { value: 'To get the query string parameters.', correct: false }
    help: |
      `getContent()` returns the raw request body, which can be useful for non-form data like JSON or XML.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data
  -
    question: 'When should you use `Response::setPrivate()` and `Response::setPublic()`?'
    answers:
      - { value: 'To control access to the response based on user roles.', correct: false }
      - { value: 'To indicate whether a response can be cached by shared (public) or private caches.', correct: true }
      - { value: 'To encrypt or decrypt the response content.', correct: false }
      - { value: 'To mark a response as either for internal use or external display.', correct: false }
    help: |
      These methods control the `Cache-Control` header, influencing how proxies and browsers cache the response.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which of the following is true about session management in Symfony?'
    answers:
      - { value: 'Sessions are automatically started on every request.', correct: false }
      - { value: 'Session data is stored in cookies by default.', correct: false }
      - { value: 'You must explicitly call `$session->start()` before using it.', correct: false }
      - { value: 'Session data is typically stored on the server, with a session ID stored in a cookie.', correct: true }
    help: |
      Symfony handles session starting automatically, and data is server-side, identified by a cookie.
      https://symfony.com/doc/current/components/http_foundation/sessions.html
  -
    question: 'What is the purpose of `Response::setCache()`?'
    answers:
      - { value: 'To store the response in a database cache.', correct: false }
      - { value: 'To configure HTTP caching headers for the response.', correct: true }
      - { value: 'To clear the application cache.', correct: false }
      - { value: 'To enable server-side caching mechanisms.', correct: false }
    help: |
      `setCache()` is a convenient method to set various HTTP cache-related headers.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which of the following is a valid way to retrieve a specific header from the `Request` object?'
    answers:
      - { value: '$request->headers->get(''User-Agent'')', correct: true }
      - { value: '$request->getHeaders()[''User-Agent'']', correct: false }
      - { value: '$request->header(''User-Agent'')', correct: false }
      - { value: '$request->server->get(''HTTP_USER_AGENT'')', correct: true }
    help: |
      Both `$request->headers->get()` and `$request->server->get('HTTP_...')` are valid, though `headers->get()` is generally preferred for HTTP headers.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data
  -
    question: 'What is the purpose of `Response::setLastModified()`?'
    answers:
      - { value: 'To set the date when the response was last accessed.', correct: false }
      - { value: 'To set the `Last-Modified` HTTP header, used for caching validation.', correct: true }
      - { value: 'To update the modification date of a file on the server.', correct: false }
      - { value: 'To mark the response as immutable.', correct: false }
    help: |
      The `Last-Modified` header is crucial for conditional GET requests and caching.
      https://symfony.com/doc/current/http_cache.html#http-cache-validation
  -
    question: 'If a controller method is defined as `public function index(string $slug)` and the route is `/posts/{slug}`, what happens if the `{slug}` parameter is missing from the URL?'
    answers:
      - { value: 'Symfony will automatically assign an empty string to `$slug`.', correct: false }
      - { value: 'A `NotFoundHttpException` will be thrown.', correct: false }
      - { value: 'A `Symfony\Component\Routing\Exception\MissingMandatoryParametersException` will be thrown during routing.', correct: true }
      - { value: 'The application will crash with a PHP fatal error.', correct: false }
    help: |
      If a mandatory route parameter is missing, the router will throw an exception.
      https://symfony.com/doc/current/routing.html#route-parameters
  -
    question: 'What is the purpose of `Response::setExpires()`?'
    answers:
      - { value: 'To set the `Expires` HTTP header, indicating when the response should be considered stale.', correct: true }
      - { value: 'To set a cookie expiration date.', correct: false }
      - { value: 'To define the session lifetime.', correct: false }
      - { value: 'To mark the response as expired immediately.', correct: false }
    help: |
      The `Expires` header is another mechanism for controlling cache expiration.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which of the following is true about `flash messages`?'
    answers:
      - { value: 'They persist across multiple requests until explicitly cleared.', correct: false }
      - { value: 'They are stored in the database.', correct: false }
      - { value: 'They are temporary messages that are only available for the "next" request and then cleared.', correct: true }
      - { value: 'They are always displayed on every page until the session ends.', correct: false }
    help: |
      Flash messages are designed for one-time display after a redirect.
      https://symfony.com/doc/current/controller.html#flash-messages
  -
    question: 'How can you prevent a controller method from being directly accessed via a URL, while still allowing it to be forwarded to internally?'
    answers:
      - { value: 'Do not define a `#[Route]` attribute for the method.', correct: true }
      - { value: 'Set the route method to `POST` only.', correct: false }
      - { value: 'Mark the method as `private`.', correct: false }
      - { value: 'Add `#[NoRoute]` attribute.', correct: false }
    help: |
      If a method doesn't have a `#[Route]` attribute, it won't be exposed as a public URL but can still be called via `forward()`.
      https://symfony.com/doc/current/controller/forwarding.html
  -
    question: 'What is the purpose of `Response::setPublic()`?'
    answers:
      - { value: 'To indicate that the response can be cached by shared caches (e.g., proxies).', correct: true }
      - { value: 'To make the response content publicly visible.', correct: false }
      - { value: 'To set the response as accessible without authentication.', correct: false }
      - { value: 'To mark the response as non-sensitive.', correct: false }
    help: |
      `setPublic()` sets the `Cache-Control: public` directive.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which of the following is a valid way to get the base URL of the current request in a controller?'
    answers:
      - { value: '$request->getBaseUrl()', correct: true }
      - { value: '$request->getUri()', correct: false }
      - { value: '$request->getHost()', correct: false }
      - { value: '$request->getPathInfo()', correct: false }
    help: |
      `getBaseUrl()` returns the base URL of the request, without the query string or path info.
      https://symfony.com/doc/current/components/http_foundation/requests.html
  -
    question: 'What happens if a controller method returns `null` instead of a `Response` object?'
    answers:
      - { value: 'Symfony will automatically render a default template.', correct: false }
      - { value: 'An exception will be thrown, as controllers must return a `Response`.', correct: true }
      - { value: 'The request will be forwarded to a 404 page.', correct: false }
      - { value: 'The application will silently fail.', correct: false }
    help: |
      Controllers must always return a `Response` object.
      https://symfony.com/doc/current/controller.html#the-response
  -
    question: 'How can you access the `Session` object directly from the `Request` object?'
    answers:
      - { value: '$request->getSession()', correct: true }
      - { value: '$request->session', correct: false }
      - { value: '$request->get(''session'')', correct: false }
      - { value: 'You cannot, they are separate objects.', correct: false }
    help: |
      The `Request` object provides a `getSession()` method to retrieve the session.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-the-session
  -
    question: 'What is the purpose of `Response::setVary()`?'
    answers:
      - { value: 'To indicate that the response content varies based on specified request headers.', correct: true }
      - { value: 'To set a random value for cache busting.', correct: false }
      - { value: 'To vary the response based on user preferences.', correct: false }
      - { value: 'To create different versions of the response.', correct: false }
    help: |
      The `Vary` header tells caches that the response is dependent on certain request headers.
      https://symfony.com/doc/current/http_cache.html#http-cache-validation
  -
    question: 'Which of the following describes a "stateless" application in the context of HTTP?'
    answers:
      - { value: 'The server maintains a persistent connection with each client.', correct: false }
      - { value: 'Each request from a client contains all the information needed to understand the request, and the server does not store any client-specific data between requests.', correct: true }
      - { value: 'The application uses sessions to store user data.', correct: false }
      - { value: 'The client stores all application state.', correct: false }
    help: |
      HTTP is inherently stateless, meaning each request is independent.
      https://symfony.com/doc/current/components/http_foundation/introduction.html
  -
    question: 'What is the primary use case for `Response::setEtag()`?'
    answers:
      - { value: 'To set a unique identifier for the response content, used for caching validation.', correct: true }
      - { value: 'To encrypt the response body.', correct: false }
      - { value: 'To track user sessions.', correct: false }
      - { value: 'To set a timestamp for the response.', correct: false }
    help: |
      ETags are strong validators for caching, allowing clients to make conditional requests.
      https://symfony.com/doc/current/http_cache.html#http-cache-validation
  -
    question: 'When a controller method is defined as `public function show(Product $product)`, what mechanism allows Symfony to automatically fetch the `Product` entity from the database based on a route parameter?'
    answers:
      - { value: 'The `#[MapEntity]` attribute.', correct: true }
      - { value: 'The `#[ParamConverter]` attribute.', correct: true }
      - { value: 'Manual entity manager lookup.', correct: false }
      - { value: 'The `#[Autowire]` attribute.', correct: false }
    help: |
      Both `#[MapEntity]` (Symfony 6.2+) and `#[ParamConverter]` (from SensioFrameworkExtraBundle, now often replaced by `MapEntity`) are used for automatic entity fetching.
      https://symfony.com/doc/current/controller/attributes.html#mapentity-attribute
  -
    question: 'What is the purpose of `Request::getPreferredLanguage()`?'
    answers:
      - { value: 'To get the default language configured in the application.', correct: false }
      - { value: 'To get the language preferred by the client, based on the `Accept-Language` header.', correct: true }
      - { value: 'To set the language for the current request.', correct: false }
      - { value: 'To retrieve the language from the user''s session.', correct: false }
    help: |
      This method helps in implementing internationalization by determining the client's preferred language.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data
  -
    question: 'Which of the following is a valid way to set a custom HTTP header on a `Response` object?'
    answers:
      - { value: '$response->headers->set(''X-My-Header'', ''value'')', correct: true }
      - { value: '$response->setHeader(''X-My-Header'', ''value'')', correct: false }
      - { value: '$response->addHeader(''X-My-Header'', ''value'')', correct: false }
      - { value: '$response->set(''X-My-Header'', ''value'')', correct: false }
    help: |
      Headers are managed through the `headers` property of the `Response` object.
      https://symfony.com/doc/current/components/http_foundation/responses.html#setting-headers
  -
    question: 'What is the significance of the `public/index.php` file in a Symfony application?'
    answers:
      - { value: 'It contains all the application''s business logic.', correct: false }
      - { value: 'It is the front controller, the single entry point for all web requests.', correct: true }
      - { value: 'It is primarily used for database migrations.', correct: false }
      - { value: 'It defines all the application''s routes.', correct: false }
    help: |
      `public/index.php` is the front controller, bootstrapping the Symfony application.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#the-front-controller
  -
    question: 'When should you use `#[MapQueryParameter]` in a controller action?'
    answers:
      - { value: 'To map a route parameter to an object.', correct: false }
      - { value: 'To map a query string parameter to a controller argument, with optional validation and default values.', correct: true }
      - { value: 'To map a form field value to a controller argument.', correct: false }
      - { value: 'To map an uploaded file to a controller argument.', correct: false }
    help: |
      `#[MapQueryParameter]` simplifies getting and validating query parameters.
      https://symfony.com/doc/current/controller/attributes.html#mapqueryparameter-attribute
  -
    question: 'What is the purpose of `Response::isCacheable()`?'
    answers:
      - { value: 'To check if the current user has permission to cache the response.', correct: false }
      - { value: 'To determine if the response can be stored in a cache, based on its HTTP headers.', correct: true }
      - { value: 'To verify if the cache directory is writable.', correct: false }
      - { value: 'To check if the response has already been cached.', correct: false }
    help: |
      This method inspects the `Cache-Control` and other caching headers to determine cacheability.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which of the following is a common use case for a custom Argument Value Resolver?'
    answers:
      - { value: 'To render a Twig template.', correct: false }
      - { value: 'To convert a route parameter (e.g., an ID) into a complex object (e.g., a `BookingId` value object).', correct: true }
      - { value: 'To handle form submissions.', correct: false }
      - { value: 'To send an email.', correct: false }
    help: |
      Custom resolvers are perfect for transforming simple request values into rich objects.
      https://symfony.com/doc/current/controller/value_resolver.html#creating-a-custom-value-resolver
  -
    question: 'What is the purpose of `Response::setStatusCode()`?'
    answers:
      - { value: 'To set the HTTP status code of the response.', correct: true }
      - { value: 'To set the status of a background process.', correct: false }
      - { value: 'To indicate the success or failure of a database operation.', correct: false }
      - { value: 'To set an internal application status.', correct: false }
    help: |
      This method explicitly sets the HTTP status code (e.g., 200, 404, 500).
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'How can you force a download of a file from a Symfony controller?'
    answers:
      - { value: 'Return a `BinaryFileResponse` with `Content-Disposition` header set to `attachment`.', correct: true }
      - { value: 'Return a `Response` with `Content-Type: application/octet-stream`.', correct: true }
      - { value: 'Use `$this->file()` helper (if extending `AbstractController`).', correct: true }
      - { value: 'Redirect to the file path.', correct: false }
    help: |
      `BinaryFileResponse` and the `file()` helper are designed for file downloads, often with `Content-Disposition: attachment`.
      https://symfony.com/doc/current/components/http_foundation/responses.html#serving-files
  -
    question: 'What is the purpose of `Request::getUri()`?'
    answers:
      - { value: 'To get the path information of the current request.', correct: false }
      - { value: 'To get the full URI (including scheme, host, path, and query string) of the current request.', correct: true }
      - { value: 'To get only the host name.', correct: false }
      - { value: 'To get the route name.', correct: false }
    help: |
      `getUri()` provides the complete URI.
      https://symfony.com/doc/current/components/http_foundation/requests.html
  -
    question: 'Which of the following HTTP methods is typically used for submitting forms that create new resources?'
    answers:
      - { value: 'GET', correct: false }
      - { value: 'PUT', correct: false }
      - { value: 'DELETE', correct: false }
      - { value: 'POST', correct: true }
    help: |
      POST is the standard method for submitting data that results in a change on the server, like creating a new resource.
      https://symfony.com/doc/current/controller.html#request-methods
  -
    question: 'What is the purpose of `Response::prepare()`?'
    answers:
      - { value: 'To prepare the response for sending by ensuring valid headers and content.', correct: true }
      - { value: 'To prepare the response for caching.', correct: false }
      - { value: 'To encode the response content.', correct: false }
      - { value: 'To validate the response against a schema.', correct: false }
    help: |
      `prepare()` ensures the response is well-formed before sending.
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'Which of the following is true about the `Request` object in Symfony?'
    answers:
      - { value: 'It is a global variable that can be accessed anywhere.', correct: false }
      - { value: 'It encapsulates the HTTP request, providing access to parameters, headers, and files.', correct: true }
      - { value: 'It is only available when extending `AbstractController`.', correct: false }
      - { value: 'It is automatically persisted across multiple requests.', correct: false }
    help: |
      The `Request` object is a powerful abstraction for HTTP request data.
      https://symfony.com/doc/current/controller.html#accessing-the-request
  -
    question: 'What is the purpose of `Response::isNotModified()`?'
    answers:
      - { value: 'To check if the response content has been altered since it was generated.', correct: false }
      - { value: 'To determine if the client''s cached version of the resource is still valid, based on `If-Modified-Since` or `If-None-Match` headers.', correct: true }
      - { value: 'To prevent the response from being modified by middleware.', correct: false }
      - { value: 'To check if the response has a 200 OK status code.', correct: false }
    help: |
      This method is used in conjunction with conditional GET requests to return a 304 Not Modified response if the client's cache is still fresh.
      https://symfony.com/doc/current/http_cache.html#http-cache-validation
  -
    question: 'Which of the following is a correct way to get the client''s IP address from the `Request` object?'
    answers:
      - { value: '$request->getClientIp()', correct: true }
      - { value: '$request->getIp()', correct: false }
      - { value: '$request->server->get(''REMOTE_ADDR'')', correct: true }
      - { value: '$request->headers->get(''X-Forwarded-For'')', correct: false }
    help: |
      `getClientIp()` is the preferred method, as it handles proxies. `$_SERVER['REMOTE_ADDR']` is also valid but might not be accurate behind proxies.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data
  -
    question: 'What is the purpose of `Response::setPrivate()`?'
    answers:
      - { value: 'To indicate that the response should only be cached by private caches (e.g., the user''s browser cache).', correct: true }
      - { value: 'To make the response content inaccessible to public.', correct: false }
      - { value: 'To encrypt the response for sensitive data.', correct: false }
      - { value: 'To mark the response as requiring authentication.', correct: false }
    help: |
      `setPrivate()` sets the `Cache-Control: private` directive.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which `Request` property contains the route parameters and other attributes set by the router?'
    answers:
      - { value: '`$request->query`', correct: false }
      - { value: '`$request->request`', correct: false }
      - { value: '`$request->attributes`', correct: true }
      - { value: '`$request->server`', correct: false }
    help: |
      The `attributes` property holds data like route parameters, `_controller`, and `_route`.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data
  -
    question: 'What is the purpose of `Response::setSharedMaxAge()`?'
    answers:
      - { value: 'To set the maximum age for a response in a private cache.', correct: false }
      - { value: 'To set the `s-maxage` directive in the `Cache-Control` header, specifically for shared caches.', correct: true }
      - { value: 'To set the session timeout.', correct: false }
      - { value: 'To define the maximum file upload size.', correct: false }
    help: |
      `s-maxage` is used by shared caches (like reverse proxies) to determine how long they can cache a response.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'How can you get the current route name within a controller action?'
    answers:
      - { value: '$request->attributes->get(''_route'')', correct: true }
      - { value: '$this->get(''router'')->getCurrentRoute()', correct: false }
      - { value: '$request->getRouteName()', correct: false }
      - { value: '$this->getRoute()', correct: false }
    help: |
      The `_route` attribute is set by the router on the `Request` object.
      https://symfony.com/doc/current/routing.html#accessing-route-parameters
  -
    question: 'What is the purpose of `Response::setMaxAge()`?'
    answers:
      - { value: 'To set the `max-age` directive in the `Cache-Control` header, for both private and shared caches.', correct: true }
      - { value: 'To set the maximum time a user can stay logged in.', correct: false }
      - { value: 'To define the maximum execution time for the script.', correct: false }
      - { value: 'To set the expiration date for a cookie.', correct: false }
    help: |
      `max-age` specifies the maximum amount of time a resource is considered fresh.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which of the following is true about `Response::setExpires()` and `Response::setMaxAge()`?'
    answers:
      - { value: '`setExpires()` is preferred over `setMaxAge()` for modern HTTP caching.', correct: false }
      - { value: '`setMaxAge()` takes precedence over `setExpires()` if both are present in `Cache-Control`.', correct: true }
      - { value: 'They are mutually exclusive and cannot be used together.', correct: false }
      - { value: '`setExpires()` is for private caches, `setMaxAge()` is for public caches.', correct: false }
    help: |
      `max-age` in `Cache-Control` is generally preferred and takes precedence over the `Expires` header.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'What is the purpose of `Response::setVary()`?'
    answers:
      - { value: 'To indicate that the response content varies based on specified request headers.', correct: true }
      - { value: 'To set a random value for cache busting.', correct: false }
      - { value: 'To vary the response based on user preferences.', correct: false }
      - { value: 'To create different versions of the response.', correct: false }
    help: |
      The `Vary` header tells caches that the response is dependent on certain request headers.
      https://symfony.com/doc/current/http_cache.html#http-cache-validation
  -
    question: 'How do you retrieve all form parameters (from `$_POST`) from the `Request` object?'
    answers:
      - { value: '$request->query->all()', correct: false }
      - { value: '$request->request->all()', correct: true }
      - { value: '$request->attributes->all()', correct: false }
      - { value: '$request->all()', correct: false }
    help: |
      Form parameters (POST data) are accessed via the `request` property of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data
  -
    question: 'What is the purpose of `Response::isFresh()`?'
    answers:
      - { value: 'To check if the response has been recently generated.', correct: false }
      - { value: 'To determine if the response is still fresh in the cache according to its `Cache-Control` and `Expires` headers.', correct: true }
      - { value: 'To verify if the response content is up-to-date.', correct: false }
      - { value: 'To check if the response has been sent to the client.', correct: false }
    help: |
      `isFresh()` helps determine if a cached response can still be used without revalidating with the origin server.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which of the following is true about `Response::setTtl()`?'
    answers:
      - { value: 'It sets the `max-age` and `s-maxage` directives in the `Cache-Control` header.', correct: true }
      - { value: 'It sets the `Expires` header only.', correct: false }
      - { value: 'It is used for database caching.', correct: false }
      - { value: 'It defines the session timeout.', correct: false }
    help: |
      `setTtl()` is a convenient way to set both `max-age` and `s-maxage` for a given time-to-live.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'What is the purpose of `Response::mustRevalidate()`?'
    answers:
      - { value: 'To force the client to revalidate the response with the origin server before using a cached copy.', correct: true }
      - { value: 'To indicate that the response must be revalidated by the server before sending.', correct: false }
      - { value: 'To revalidate the user''s session.', correct: false }
      - { value: 'To check if the response is valid.', correct: false }
    help: |
      `must-revalidate` in `Cache-Control` ensures that a cached response is not used without revalidation once it becomes stale.
      https://symfony.com/doc/current/http_cache.html#http-cache-expiration
  -
    question: 'Which of the following is a valid way to create a `StreamedResponse` in Symfony?'
    answers:
      - { value: '`new Response(function() { echo ''data''; })`', correct: false }
      - { value: '`new StreamedResponse(function() { echo ''data''; })`', correct: true }
      - { value: '`$this->stream(function() { echo ''data''; })` (if extending `AbstractController`)', correct: false }
      - { value: '`new Response(new Stream())`', correct: false }
    help: |
      `StreamedResponse` allows you to stream content to the client, useful for large files or long-running processes.
      https://symfony.com/doc/current/components/http_foundation/responses.html#streaming-responses
  -
    question: 'What is the purpose of `Response::sendHeaders()`?'
    answers:
      - { value: 'To send the HTTP headers to the client.', correct: true }
      - { value: 'To send the response content to the client.', correct: false }
      - { value: 'To send all headers and content simultaneously.', correct: false }
      - { value: 'To prepare the headers for sending.', correct: false }
    help: |
      `sendHeaders()` is part of the `send()` process, specifically for sending headers.
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'Which of the following is true about `Response::sendContent()`?'
    answers:
      - { value: 'It sends the HTTP headers to the client.', correct: false }
      - { value: 'It sends the response content to the client.', correct: true }
      - { value: 'It is called before `sendHeaders()`.', correct: false }
      - { value: 'It is only used for streamed responses.', correct: false }
    help: |
      `sendContent()` is part of the `send()` process, specifically for sending the body.
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'What is the purpose of `Response::isSuccessful()`?'
    answers:
      - { value: 'To check if the response has a 2xx status code.', correct: true }
      - { value: 'To check if the response was generated without errors.', correct: false }
      - { value: 'To determine if the user is authenticated.', correct: false }
      - { value: 'To verify if the response is cacheable.', correct: false }
    help: |
      `isSuccessful()` checks if the status code is in the 2xx range (e.g., 200 OK, 201 Created).
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'Which of the following is true about `Response::isRedirection()`?'
    answers:
      - { value: 'It checks if the response has a 2xx status code.', correct: false }
      - { value: 'It checks if the response has a 3xx status code (e.g., 301, 302).', correct: true }
      - { value: 'It checks if the response is an internal forward.', correct: false }
      - { value: 'It checks if the response contains a redirect URL.', correct: false }
    help: |
      `isRedirection()` identifies responses that are redirects.
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'What is the purpose of `Response::isClientError()`?'
    answers:
      - { value: 'To check if the response has a 4xx status code (e.g., 400 Bad Request, 404 Not Found).', correct: true }
      - { value: 'To check if the client made an invalid request.', correct: false }
      - { value: 'To determine if there was an error on the client-side application.', correct: false }
      - { value: 'To check if the response is a server error.', correct: false }
    help: |
      `isClientError()` helps identify client-side errors.
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'What is the purpose of `Response::isServerError()`?'
    answers:
      - { value: 'To check if the response has a 5xx status code (e.g., 500 Internal Server Error).', correct: true }
      - { value: 'To check if the server encountered an unexpected condition.', correct: false }
      - { value: 'To determine if there was an error on the server-side application.', correct: false }
      - { value: 'To check if the response is a client error.', correct: false }
    help: |
      `isServerError()` identifies server-side errors.
      https://symfony.com/doc/current/components/http_foundation/responses.html
  -
    question: 'Which of the following is a valid way to retrieve a cookie from the `Request` object?'
    answers:
      - { value: '$request->cookies->get(''cookie_name'')', correct: true }
      - { value: '$request->getCookie(''cookie_name'')', correct: false }
      - { value: '$request->headers->get(''Cookie'')', correct: false }
      - { value: '$request->query->get(''cookie_name'')', correct: false }
    help: |
      Cookies sent by the client are accessed via the `cookies` property of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation/cookies.html
```