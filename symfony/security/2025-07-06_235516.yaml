```yaml
category: Security
questions:
  -
    question: 'In Symfony, what is the significance of the order in which firewalls are defined in `security.yaml`?'
    answers:
      - { value: 'The order determines the priority; the first firewall whose pattern matches the request will handle it.', correct: true }
      - { value: 'The order only affects the logging of firewall activity, not their application.', correct: false }
      - { value: 'Firewalls are processed in reverse order of their definition.', correct: false }
      - { value: 'The order is irrelevant as all matching firewalls process the request simultaneously.', correct: false }
    help: |
      'The order in which firewalls are defined is very important, as the request will be handled by the first firewall whose pattern matches.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_13'
  -
    question: 'Which of the following `firewall` configurations in Symfony effectively disables security for a given URL pattern?'
    answers:
      - { value: '`security: false`', correct: true }
      - { value: '`enabled: false`', correct: false }
      - { value: '`stateless: true`', correct: false }
      - { value: '`anonymous: true`', correct: false }
    help: |
      'Setting `security: false` for a firewall pattern disables security for requests matching that pattern, often used for static assets or development tools.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_13'
  -
    question: 'What does the `lazy: true` option signify when configured for a Symfony firewall?'
    answers:
      - { value: 'The firewall will only be initialized and load the user provider when authentication is explicitly required.', correct: true }
      - { value: 'The firewall will always load the user provider, but authentication is deferred until an access decision is made.', correct: false }
      - { value: 'It means the firewall will not store user sessions.', correct: false }
      - { value: 'It enables lazy loading for all services used within the firewall, regardless of their actual need.', correct: false }
    help: |
      'The `lazy: true` option ensures that the firewall and its associated user provider are only loaded when authentication is actually needed, improving performance.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_13'
  -
    question: 'Consider the following `access_control` configuration in Symfony:
```yaml
access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
```
What is the effect of this configuration?'
    answers:
      - { value: 'Only users with `ROLE_ADMIN` can access any URL starting with `/admin`.', correct: true }
      - { value: 'Users without `ROLE_ADMIN` are redirected to the login page.', correct: true }
      - { value: 'All users can access `/admin` paths, but `ROLE_ADMIN` is automatically granted.', correct: false }
      - { value: 'This configuration only applies to GET requests to `/admin`.', correct: false }
    help: |
      'This configuration requires users accessing paths starting with `/admin` to have the `ROLE_ADMIN` role. If they don''t, they will typically be redirected to the login page or receive an access denied error.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_60'
  -
    question: 'Which of the following `access_control` configurations correctly uses a regular expression to secure API endpoints for posts and comments?'
    answers:
      - { value: '`- { path: ^/api/(post|comment)/\\d+$, roles: ROLE_USER }`', correct: true }
      - { value: '`- { path: /api/post|comment/*, roles: ROLE_USER }`', correct: false }
      - { value: '`- { path: ^/api/[post|comment]/[0-9]+$, roles: ROLE_USER }`', correct: false }
      - { value: '`- { path: /api/(post|comment)/{id}, roles: ROLE_USER }`', correct: false }
    help: |
      'The `path` value can be any valid regular expression. The example `^/api/(post|comment)/\\d+$` matches URLs like `/api/post/7298` and `/api/comment/528491`.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_61'
  -
    question: 'To ensure that a specific path, like `/cart/checkout`, is always accessed over HTTPS, which `access_control` option should be used?'
    answers:
      - { value: '`requires_channel: https`', correct: true }
      - { value: '`secure: true`', correct: false }
      - { value: '`protocol: https`', correct: false }
      - { value: '`force_ssl: true`', correct: false }
    help: |
      'The `requires_channel: https` option in `access_control` forces redirection to HTTPS if the request comes over HTTP.
      https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#_snippet_6'
  -
    question: 'How can you restrict access to a specific URL path in Symfony to only allow requests coming from a particular port, e.g., `8080`?'
    answers:
      - { value: 'By adding `port: 8080` to the `access_control` rule.', correct: true }
      - { value: 'By configuring the web server to only serve that path on port 8080.', correct: false }
      - { value: 'By using a custom request matcher service to check the port.', correct: true }
      - { value: 'By setting `channel: 8080` in the firewall configuration.', correct: false }
    help: |
      'The `port` option can be added to an `access_control` entry to restrict access based on the request port.
      https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#_snippet_4'
  -
    question: 'Which of the following options can be used in Symfony\'s `access_control` to restrict access based on the client\'s IP address?'
    answers:
      - { value: '`ip: 192.168.1.1`', correct: true }
      - { value: '`ips: [127.0.0.1, ::1, 192.168.0.1/24]`', correct: true }
      - { value: '`client_ip: 10.0.0.1`', correct: false }
      - { value: '`network: 172.16.0.0/16`', correct: false }
    help: |
      'The `ips` option supports IP addresses and subnet masks for restricting access. The `ip` option can be used for a single IP.
      https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#_snippet_2'
  -
    question: 'What is the purpose of the `allow_if` option in Symfony\'s `access_control` configuration?'
    answers:
      - { value: 'It allows defining more complex access logic using a security expression language, which evaluates to true.', correct: true }
      - { value: 'It works in an OR fashion with the `roles` option, granting access if either the expression is true or the user has the required roles.', correct: true }
      - { value: 'It is a deprecated option replaced by custom voters.', correct: false }
      - { value: 'It only allows access if all specified roles AND the expression are true.', correct: false }
    help: |
      'The `allow_if` option allows for complex access logic using expressions. It acts as an OR condition with the `roles` option.
      https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#_snippet_3'
  -
    question: 'Given the following `access_control` rules, which role will be required for a user trying to access `/admin/users/edit`?'
    answers:
      - { value: '`ROLE_SUPER_ADMIN`', correct: true }
      - { value: '`ROLE_ADMIN`', correct: false }
      - { value: 'Both `ROLE_SUPER_ADMIN` and `ROLE_ADMIN`', correct: false }
      - { value: 'Neither, as the path is too specific.', correct: false }
    help: |
      'Symfony processes access control rules sequentially, applying the first matching rule. More specific rules should be defined before more general ones.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_62'
  -
    question: 'How do you configure a password hasher for a specific user class, `App\\Entity\\User`, in Symfony 7 to use the `auto` algorithm with a custom `cost` of `15`?'
    answers:
      - { value: '
```yaml
security:
    password_hashers:
        App\\Entity\\User:
            algorithm: auto
            cost: 15
```', correct: true }
      - { value: '
```yaml
security:
    hashers:
        App\\Entity\\User: { type: auto, cost: 15 }
```', correct: false }
      - { value: '
```yaml
security:
    encoders:
        App\\Entity\\User: { algorithm: bcrypt, cost: 15 }
```', correct: false }
      - { value: '
```yaml
security:
    password_hashers:
        App\\Entity\\User: auto(cost=15)
```', correct: false }
    help: |
      'Password hashers are configured under the `password_hashers` key, specifying the user class and hashing options.
      https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#_snippet_1'
  -
    question: 'Which interface must a user class implement in Symfony to allow the security component to automatically hash and verify passwords?'
    answers:
      - { value: '`Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface`', correct: true }
      - { value: '`Symfony\\Component\\Security\\Core\\User\\UserInterface`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\User\\AdvancedUserInterface`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\User\\LegacyPasswordAuthenticatedUserInterface`', correct: false }
    help: |
      'The `PasswordAuthenticatedUserInterface` provides the `getPassword()` method for retrieving the hashed password.
      https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#_snippet_12'
  -
    question: 'What is the purpose of the `needsRehash()` method on `Symfony\\Component\\PasswordHasher\\PasswordHasherInterface`?'
    answers:
      - { value: 'It determines if a given hashed password needs to be rehashed, for example, if the algorithm or its parameters are outdated.', correct: true }
      - { value: 'It checks if the plaintext password matches the hashed password.', correct: false }
      - { value: 'It generates a new hash for a given plaintext password.', correct: false }
      - { value: 'It verifies if the user has changed their password recently.', correct: false }
    help: |
      'The `needsRehash()` method is used to check if a password needs to be rehashed, for instance, due to algorithm changes or increased cost recommendations.
      https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#_snippet_12'
  -
    question: 'Which of the following are valid user provider types in Symfony security configuration?'
    answers:
      - { value: '`memory`', correct: true }
      - { value: '`entity`', correct: true }
      - { value: '`ldap`', correct: true }
      - { value: '`api`', correct: false }
      - { value: '`database`', correct: false }
    help: |
      'Symfony supports various user provider types, including in-memory, entity (Doctrine), and LDAP.
      https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#_snippet_7'
  -
    question: 'How can you combine multiple user providers to allow authentication from different sources in Symfony?'
    answers:
      - { value: 'By configuring a `chain` provider and listing the individual providers within it.', correct: true }
      - { value: 'By defining multiple `firewall` entries, each with a different provider.', correct: false }
      - { value: 'By implementing a custom `UserProviderInterface` that manually queries all sources.', correct: false }
      - { value: 'Symfony automatically chains all defined user providers.', correct: false }
    help: |
      'The `chain` provider allows combining multiple user providers, which are then queried in order until a user is found.
      https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#_snippet_7'
  -
    question: 'To enable form-based login for a firewall named `main`, what are the essential configuration options under `form_login`?'
    answers:
      - { value: '`login_path` and `check_path`', correct: true }
      - { value: '`success_path` and `failure_path`', correct: false }
      - { value: '`username_parameter` and `password_parameter`', correct: false }
      - { value: '`enable_csrf: true`', correct: false }
    help: |
      'The `form_login` authenticator requires `login_path` (the route to display the login form) and `check_path` (the route to which the form is submitted for authentication).
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_20'
  -
    question: 'You are building an API and want to handle authentication via JSON POST requests. Which authenticator should you configure in your Symfony firewall?'
    answers:
      - { value: '`json_login`', correct: true }
      - { value: '`api_key`', correct: false }
      - { value: '`http_basic`', correct: false }
      - { value: '`jwt`', correct: false }
    help: |
      'The `json_login` authenticator is designed for handling authentication via JSON POST requests, typically used in API contexts.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_25'
  -
    question: 'When configuring `remote_user` authentication in Symfony, what does the `user` option specify?'
    answers:
      - { value: 'The name of the `$_SERVER` parameter holding the user identifier.', correct: true }
      - { value: 'The name of the database column storing the username.', correct: false }
      - { value: 'The default username to use if `REMOTE_USER` is not set.', correct: false }
      - { value: 'The service ID of the user provider.', correct: false }
    help: |
      'The `user` option for `remote_user` authentication specifies which `$_SERVER` variable contains the user identifier.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_34'
  -
    question: 'Which authenticator in Symfony allows authentication based on client certificates provided by the web server?'
    answers:
      - { value: '`x509`', correct: true }
      - { value: '`certificate`', correct: false }
      - { value: '`ssl_client`', correct: false }
      - { value: '`tls_auth`', correct: false }
    help: |
      'The `x509` authenticator is used for authentication via client X.509 certificates.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_37'
  -
    question: 'To configure a logout link in Symfony, which option is used within the `logout` section of a firewall to specify the URL or route that triggers the logout process?'
    answers:
      - { value: '`path`', correct: true }
      - { value: '`route`', correct: false }
      - { value: '`url`', correct: false }
      - { value: '`logout_url`', correct: false }
    help: |
      'The `path` option defines the URL or route that triggers the logout process.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_19'
  -
    question: 'By default, when a user logs out from one firewall in Symfony, what happens to their session across other firewalls?'
    answers:
      - { value: 'Their session is invalidated across all firewalls.', correct: true }
      - { value: 'Their session remains active on other firewalls unless explicitly logged out from each.', correct: false }
      - { value: 'Only the session associated with the current firewall is invalidated.', correct: false }
      - { value: 'The user is redirected to the login page for all other firewalls.', correct: false }
    help: |
      'The `invalidate_session` option, which defaults to `true`, ensures that logging out from one firewall invalidates the session across all firewalls.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_18'
  -
    question: 'Which `logout` option in Symfony allows you to specify the URL or route to redirect the user to after a successful logout?'
    answers:
      - { value: '`target`', correct: true }
      - { value: '`redirect_to`', correct: false }
      - { value: '`on_success`', correct: false }
      - { value: '`logout_redirect`', correct: false }
    help: |
      'The `target` option specifies the URL or route for redirection after a successful logout.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_20'
  -
    question: 'What is the purpose of the `clear_site_data` option in Symfony\'s logout configuration?'
    answers:
      - { value: 'It sends a `Clear-Site-Data` HTTP header to the client, allowing control over client-side data like cookies, storage, and cache.', correct: true }
      - { value: 'It clears server-side session data only.', correct: false }
      - { value: 'It removes all user-related data from the database upon logout.', correct: false }
      - { value: 'It is used to clear the Symfony cache after a user logs out.', correct: false }
    help: |
      'The `clear_site_data` option controls the `Clear-Site-Data` HTTP header, which can instruct the browser to clear various types of client-side data.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_17'
  -
    question: 'Which of the following options are related to CSRF protection for the logout process in Symfony?'
    answers:
      - { value: '`csrf_parameter`', correct: true }
      - { value: '`csrf_token_id`', correct: true }
      - { value: '`csrf_protection: true`', correct: false }
      - { value: '`csrf_field_name`', correct: false }
    help: |
      'The `csrf_parameter` defines the name of the parameter storing the CSRF token, and `csrf_token_id` is an arbitrary string to identify the token.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_22
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_24'
  -
    question: 'To enable login throttling in Symfony, which component must be installed first?'
    answers:
      - { value: '`symfony/rate-limiter`', correct: true }
      - { value: '`symfony/security-bundle`', correct: false }
      - { value: '`symfony/security-csrf`', correct: false }
      - { value: '`symfony/validator`', correct: false }
    help: |
      'The `symfony/rate-limiter` component is a prerequisite for enabling login throttling.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_40'
  -
    question: 'How can you configure login throttling for a Symfony firewall to allow a maximum of 3 login attempts per minute?'
    answers:
      - { value: '
```yaml
firewalls:
    main:
        login_throttling:
            max_attempts: 3
```', correct: true }
      - { value: '
```yaml
firewalls:
    main:
        throttle_login: { max: 3, interval: 1m }
```', correct: false }
      - { value: '
```yaml
firewalls:
    main:
        login_attempts: 3
```', correct: false }
      - { value: '
```yaml
firewalls:
    main:
        rate_limit: { login: { limit: 3, period: 60 } }
```', correct: false }
    help: |
      'Login throttling can be configured under `login_throttling` with `max_attempts` and an optional `interval`.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_41'
  -
    question: 'What is the purpose of the `IS_AUTHENTICATED_FULLY` role in Symfony security?'
    answers:
      - { value: 'It indicates that the user has been authenticated during the current request, not via a "remember me" cookie.', correct: true }
      - { value: 'It signifies that the user has all possible roles assigned to them.', correct: false }
      - { value: 'It means the user has successfully completed a multi-factor authentication process.', correct: false }
      - { value: 'It is a placeholder role that should be replaced by custom roles.', correct: false }
    help: |
      'The `IS_AUTHENTICATED_FULLY` role is granted when a user is authenticated during the current request, distinguishing it from users authenticated via "remember me".
      https://github.com/symfony.com/doc/current/security.html#built-in-roles'
  -
    question: 'How can you check if the currently authenticated user has a specific role (e.g., `ROLE_ADMIN`) within a Symfony controller?'
    answers:
      - { value: '`$this->isGranted(''ROLE_ADMIN'')`', correct: true }
      - { value: '`$this->getUser()->hasRole(''ROLE_ADMIN'')`', correct: false }
      - { value: '`$this->get(''security.authorization_checker'')`->isGranted(''ROLE_ADMIN'')', correct: true }
      - { value: '`$this->denyAccessUnlessGranted(''ROLE_ADMIN'')`', correct: false }
    help: |
      'The `isGranted()` method on the controller (or the `security.authorization_checker` service) is used to check user roles and permissions.
      https://symfony.com/doc/current/security.html#checking-if-a-user-has-a-specific-role'
  -
    question: 'To secure all actions within a Symfony controller, requiring `ROLE_ADMIN`, which attribute can be applied at the class level?'
    answers:
      - { value: '`#[IsGranted(''ROLE_ADMIN'')]`', correct: true }
      - { value: '`#[Security(''is_granted(''''ROLE_ADMIN'''')'')]`', correct: false }
      - { value: '`#[AccessControl(''ROLE_ADMIN'')]`', correct: false }
      - { value: '`#[RequireRole(''ROLE_ADMIN'')]`', correct: false }
    help: |
      'The `#[IsGranted]` attribute can be applied at the class level to secure all actions within a controller.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_64'
  -
    question: 'If a controller class has `#[IsGranted(''ROLE_ADMIN'')]` applied, but one specific method needs `ROLE_SUPER_ADMIN`, how can this be achieved?'
    answers:
      - { value: 'By applying `#[IsGranted(''ROLE_SUPER_ADMIN'')]` directly to the method, which overrides the class-level attribute.', correct: true }
      - { value: 'The class-level attribute cannot be overridden by method-level attributes.', correct: false }
      - { value: 'By using `#[DenyAccessUnlessGranted(''ROLE_SUPER_ADMIN'')]` on the method.', correct: false }
      - { value: 'By configuring a more specific `access_control` rule for that method''s route.', correct: true }
    help: |
      'Method-level `#[IsGranted]` attributes override class-level ones for that specific method. Access control rules can also provide fine-grained control.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_64'
  -
    question: 'When performing authorization checks within a custom Symfony service, which service should you inject to use the `isGranted()` method?'
    answers:
      - { value: '`Symfony\\Bundle\\SecurityBundle\\Security`', correct: true }
      - { value: '`Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface`', correct: true }
      - { value: '`Symfony\\Component\\Security\\Core\\SecurityContext`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface`', correct: false }
    help: |
      'The `Security` helper service or the `AuthorizationCheckerInterface` can be injected into services to perform authorization checks using `isGranted()`.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_69'
  -
    question: 'Which event is dispatched in Symfony Security after an authenticator successfully creates the security passport, and before actual authentication checks (like password validation) are performed?'
    answers:
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent`', correct: true }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\AuthenticationSuccessEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\Event\\AuthenticationTokenCreatedEvent`', correct: false }
    help: |
      'The `CheckPassportEvent` is dispatched after the authenticator creates the passport, allowing listeners to perform authentication checks.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'Which event is dispatched in Symfony Security after an `AuthenticationException` is thrown during the authentication process, allowing listeners to modify the error response?'
    answers:
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent`', correct: true }
      - { value: '`Symfony\\Component\\Security\\Core\\Event\\AuthenticationFailureEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\AuthenticationExceptionEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\ErrorEvent`', correct: false }
    help: |
      'The `LoginFailureEvent` is dispatched when an `AuthenticationException` occurs during authentication, providing an opportunity to customize the error response.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'Which event is dispatched in Symfony Security just before a user logs out of the application?'
    answers:
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\LogoutEvent`', correct: true }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\UserLogoutEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\Event\\SecurityLogoutEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\SessionDestroyEvent`', correct: false }
    help: |
      'The `LogoutEvent` is dispatched right before the user is logged out, allowing for custom logic during the logout process.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'When is the `Symfony\\Component\\Security\\Core\\Event\\AuthenticationTokenCreatedEvent` dispatched?'
    answers:
      - { value: 'After the passport was validated and the authenticator created the security token (and user).', correct: true }
      - { value: 'Before the authenticator creates the security passport.', correct: false }
      - { value: 'When a user attempts to log in but fails.', correct: false }
      - { value: 'After the user is fully authenticated and the response is sent.', correct: false }
    help: |
      'The `AuthenticationTokenCreatedEvent` is dispatched after the passport is validated and the security token is created, useful for advanced token modifications.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'What is the purpose of `Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent`?'
    answers:
      - { value: 'It is dispatched after successful authentication, but only when the authenticator implements `InteractiveAuthenticatorInterface`, indicating explicit user action (e.g., a login form).', correct: true }
      - { value: 'It is dispatched for all successful logins, regardless of the authenticator type.', correct: false }
      - { value: 'It is used to handle social logins and third-party authentication providers.', correct: false }
      - { value: 'It is dispatched when a user interacts with a secured resource for the first time.', correct: false }
    help: |
      'The `InteractiveLoginEvent` is specific to authenticators that require explicit user interaction, such as form logins.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'Which method of the `Symfony\\Bundle\\SecurityBundle\\Security` helper class allows you to programmatically log in a user on a specific firewall?'
    answers:
      - { value: '`login(user: UserInterface, authenticator_name: string = null, firewall_name: string = null, badges: array = [], attributes: array = []): Response|null`', correct: true }
      - { value: '`authenticate(user: UserInterface, firewall: string): void`', correct: false }
      - { value: '`setUser(user: UserInterface, firewall: string): void`', correct: false }
      - { value: '`forceLogin(user: UserInterface, firewall: string): Response`', correct: false }
    help: |
      'The `login()` method on the `Security` helper class provides programmatic login capabilities.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_47'
  -
    question: 'When injecting the `Security` service into a custom service, why is it generally not recommended to call `getFirewallConfig()` in the constructor?'
    answers:
      - { value: 'Because authentication might not be complete yet, leading to incorrect firewall information.', correct: true }
      - { value: 'Because `getFirewallConfig()` is a performance-intensive operation that should be avoided during service instantiation.', correct: false }
      - { value: 'Because the `Security` service itself might not be fully initialized in the constructor phase.', correct: false }
      - { value: 'Because `getFirewallConfig()` can only be called within a controller context.', correct: false }
    help: |
      'Calling `getFirewallConfig()` in the constructor of a service can lead to issues because authentication might not have completed yet. It''s better to call it within a method where the request context is fully established.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_16'
  -
    question: 'What is the purpose of the `session_fixation_strategy` option in Symfony\'s security configuration?'
    answers:
      - { value: 'To mitigate session fixation attacks by controlling how session IDs are handled after authentication.', correct: true }
      - { value: 'To prevent brute-force attacks on session IDs.', correct: false }
      - { value: 'To encrypt session data stored on the server.', correct: false }
      - { value: 'To ensure that session IDs are always regenerated on every request.', correct: false }
    help: |
      'The `session_fixation_strategy` option helps prevent session fixation attacks by defining how the session ID changes upon authentication.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_6'
  -
    question: 'Which method of `Symfony\\Component\\Security\\Core\\User\\EquatableInterface` is called when comparing two user objects for equality in Symfony\'s security component?'
    answers:
      - { value: '`isEqualTo(user: Symfony\\Component\\Security\\Core\\User\\UserInterface): bool`', correct: true }
      - { value: '`equals(user: UserInterface): bool`', correct: false }
      - { value: '`compare(user: UserInterface): bool`', correct: false }
      - { value: '`isSameUser(user: UserInterface): bool`', correct: false }
    help: |
      'Implementing `EquatableInterface` allows customizing user comparison logic via the `isEqualTo()` method.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_75'
  -
    question: 'Which Symfony CLI command is used to check project dependencies for known security vulnerabilities?'
    answers:
      - { value: '`symfony check:security`', correct: true }
      - { value: '`composer audit`', correct: false }
      - { value: '`php bin/console security:check`', correct: false }
      - { value: '`symfony security:vulnerabilities`', correct: false }
    help: |
      'The `symfony check:security` command scans project dependencies against the public PHP security advisories database.
      https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#_snippet_9'
  -
    question: 'What does the `php bin/console make:security:form-login` command do in Symfony?'
    answers:
      - { value: 'It automatically generates a controller, Twig template, and updates the security configuration for a form-based login system.', correct: true }
      - { value: 'It creates a new user entity and its associated login form.', correct: false }
      - { value: 'It configures a JSON login authenticator for API authentication.', correct: false }
      - { value: 'It only generates the login form Twig template.', correct: false }
    help: |
      'The `make:security:form-login` command streamlines the setup of form-based authentication.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_17'
  -
    question: 'Which Symfony CLI command is used to perform a security audit of your application''s Importmap dependencies?'
    answers:
      - { value: '`php bin/console importmap:audit`', correct: true }
      - { value: '`php bin/console asset:audit`', correct: false }
      - { value: '`php bin/console security:importmap`', correct: false }
      - { value: '`php bin/console check:frontend-security`', correct: false }
    help: |
      'The `importmap:audit` command checks for security vulnerabilities in Importmap dependencies.
      https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#_snippet_60'
  -
    question: 'How can you use a custom request matcher service within Symfony''s `access_control` configuration?'
    answers:
      - { value: 'By specifying the service ID under the `request_matcher` option.', correct: true }
      - { value: 'By defining a service that implements `RequestMatcherInterface` and referencing it by its class name.', correct: false }
      - { value: 'Custom request matchers are only supported via voters, not `access_control`.', correct: false }
      - { value: 'By extending the `AccessControl` class and overriding the matching logic.', correct: false }
    help: |
      'The `request_matcher` option in `access_control` allows using a custom service for matching requests.
      https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#_snippet_0'
  -
    question: 'To apply an `access_control` rule to a specific Symfony route named `admin`, which of the following configurations is correct?'
    answers:
      - { value: '`- { route: admin, roles: ROLE_ADMIN }`', correct: true }
      - { value: '`- { attributes: {''_route'': ''admin''}, roles: ROLE_ADMIN }`', correct: true }
      - { value: '`- { path: @admin, roles: ROLE_ADMIN }`', correct: false }
      - { value: '`- { name: admin, roles: ROLE_ADMIN }`', correct: false }
    help: |
      'Access control rules can be applied to specific routes using either the `route` shortcut or by checking the `_route` attribute.
      https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#_snippet_0'
  -
    question: 'What is the primary purpose of configuring a `context` for Symfony firewalls?'
    answers:
      - { value: 'To allow multiple firewalls to share the same authentication state, so a user authenticated in one is recognized in another.', correct: true }
      - { value: 'To define a unique identifier for each firewall for logging purposes.', correct: false }
      - { value: 'To specify the environment (e.g., dev, prod) in which a firewall is active.', correct: false }
      - { value: 'To group related firewalls together for easier management.', correct: false }
    help: |
      'The `context` option enables sharing authentication state between multiple firewalls.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_36'
  -
    question: 'When configuring a `chain` user provider, what is the significance of the order in which individual providers are listed?'
    answers:
      - { value: 'The providers are queried in the order they are listed, and the first one that finds the user is used.', correct: true }
      - { value: 'The order determines the priority for password hashing, with the first provider''s hasher being preferred.', correct: false }
      - { value: 'The order is irrelevant; all providers are queried simultaneously.', correct: false }
      - { value: 'The last provider in the list takes precedence for user loading.', correct: false }
    help: |
      'In a chained provider, the individual providers are checked sequentially until a user is successfully loaded.
      https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#_snippet_7'
  -
    question: 'Which of the following events is dispatched after the passport has been validated and the authenticator has created the security token (and user), allowing for advanced modifications to the created token?'
    answers:
      - { value: '`Symfony\\Component\\Security\\Core\\Event\\AuthenticationTokenCreatedEvent`', correct: true }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent`', correct: false }
    help: |
      'The `AuthenticationTokenCreatedEvent` is dispatched after the token is created, allowing for modifications, especially useful for multi-factor authentication.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'What is the primary purpose of the `Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent`?'
    answers:
      - { value: 'It is dispatched when authentication is nearing success, and it is the last event that can make an authentication fail by throwing an `AuthenticationException`.', correct: true }
      - { value: 'It is dispatched after authentication was fully successful and allows modifying the response.', correct: false }
      - { value: 'It is dispatched before any authentication attempt is made.', correct: false }
      - { value: 'It is used to log successful authentication attempts.', correct: false }
    help: |
      'The `AuthenticationSuccessEvent` is a critical point to intervene before authentication is finalized, allowing for last-minute failure conditions.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'Which event is dispatched when a user is deauthenticated, for instance, because their password was changed?'
    answers:
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\TokenDeauthenticatedEvent`', correct: true }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\UserChangedPasswordEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\Event\\UserDeauthenticatedEvent`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Http\\Event\\SecurityInvalidateTokenEvent`', correct: false }
    help: |
      'The `TokenDeauthenticatedEvent` is dispatched when a user''s token is deauthenticated, often due to password changes.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'When is the `Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent` dispatched?'
    answers:
      - { value: 'After impersonation is completed, allowing you to react to a user switching their identity.', correct: true }
      - { value: 'When a user changes their role within the application.', correct: false }
      - { value: 'When a user logs in using a different authentication method.', correct: false }
      - { value: 'When a user switches between different firewalls.', correct: false }
    help: |
      'The `SwitchUserEvent` is dispatched after a user has been impersonated, providing a hook for related logic.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'What is the default `target` path for redirection after a successful logout in Symfony, if not explicitly configured?'
    answers:
      - { value: '`/`', correct: true }
      - { value: '`/login`', correct: false }
      - { value: '`/homepage`', correct: false }
      - { value: 'The previous URL before logout.', correct: false }
    help: |
      'The `target` option for logout defaults to `/`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_20'
  -
    question: 'Which of the following `security` configuration options defines the core security settings for a Symfony application, including password hashers, user providers, firewalls, and access control rules?'
    answers:
      - { value: '`security:` (the root key in `config/packages/security.yaml`)', correct: true }
      - { value: '`framework:`', correct: false }
      - { value: '`services:`', correct: false }
      - { value: '`parameters:`', correct: false }
    help: |
      'The `security` root key in `security.yaml` is where all core security configurations are defined.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_1'
  -
    question: 'What is the default value for the `username_parameter` in a Symfony form login configuration?'
    answers:
      - { value: '`_username`', correct: true }
      - { value: '`username`', correct: false }
      - { value: '`email`', correct: false }
      - { value: '`user_id`', correct: false }
    help: |
      'The `username_parameter` defaults to `_username`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'What is the default value for the `password_parameter` in a Symfony form login configuration?'
    answers:
      - { value: '`_password`', correct: true }
      - { value: '`password`', correct: false }
      - { value: '`pass`', correct: false }
      - { value: '`user_password`', correct: false }
    help: |
      'The `password_parameter` defaults to `_password`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'By default, must a login form in Symfony be submitted as a POST request to the `check_path` URL?'
    answers:
      - { value: 'Yes, `post_only` is `true` by default.', correct: true }
      - { value: 'No, GET requests are allowed by default.', correct: false }
      - { value: 'It depends on the `login_path` configuration.', correct: false }
      - { value: 'Only if CSRF protection is enabled.', correct: false }
    help: |
      'The `post_only` option for form login defaults to `true`, requiring POST requests.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'If `always_use_default_target_path` is set to `true` in a Symfony form login configuration, what will happen after a successful login?'
    answers:
      - { value: 'Users will always be redirected to the `default_target_path`, regardless of the previous URL stored in the session.', correct: true }
      - { value: 'Users will always be redirected to the URL they tried to access before logging in.', correct: false }
      - { value: 'The system will attempt to redirect to the `HTTP_REFERER` header value.', correct: false }
      - { value: 'The user will remain on the login page.', correct: false }
    help: |
      'When `always_use_default_target_path` is true, the user is always redirected to the `default_target_path`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'What is the default value for `default_target_path` in Symfony form login configuration?'
    answers:
      - { value: '`/`', correct: true }
      - { value: '`/dashboard`', correct: false }
      - { value: '`/home`', correct: false }
      - { value: '`/profile`', correct: false }
    help: |
      'The `default_target_path` defaults to `/`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'What does the `use_referer` option do in Symfony form login configuration?'
    answers:
      - { value: 'If true, it redirects the user to the `HTTP_REFERER` header value when no previous URL is in the session, but redirects to `default_target_path` if the referrer is the `login_path` to avoid loops.', correct: true }
      - { value: 'It forces the browser to send the `Referer` header with every request.', correct: false }
      - { value: 'It uses the `Referer` header to determine the user''s preferred language.', correct: false }
      - { value: 'It is a deprecated option for security reasons.', correct: false }
    help: |
      'The `use_referer` option controls redirection based on the `HTTP_REFERER` header.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'When configuring a custom login rate limiter in Symfony, what are the two types of rate limiters typically defined for `DefaultLoginRateLimiter`?'
    answers:
      - { value: 'A global limiter for IP and a local limiter for username + IP.', correct: true }
      - { value: 'A limiter for successful logins and a limiter for failed logins.', correct: false }
      - { value: 'A limiter for API logins and a limiter for form logins.', correct: false }
      - { value: 'A limiter for web requests and a limiter for console commands.', correct: false }
    help: |
      'The `DefaultLoginRateLimiter` typically uses a global rate limiter (e.g., for IP) and a local rate limiter (e.g., for username + IP).
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_43'
  -
    question: 'Which of the following policies are available for defining rate limiters in Symfony''s `framework.rate_limiter` configuration?'
    answers:
      - { value: '`token_bucket`', correct: true }
      - { value: '`sliding_window`', correct: true }
      - { value: '`fixed_window`', correct: false }
      - { value: '`leaky_bucket`', correct: false }
    help: |
      'Symfony''s Rate Limiter component supports `token_bucket` and `sliding_window` policies.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_43'
  -
    question: 'What is the purpose of the `Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent`?'
    answers:
      - { value: 'Dispatched after authentication was fully successful, allowing listeners to modify the response sent back to the user.', correct: true }
      - { value: 'Dispatched before the user is redirected after a successful login.', correct: false }
      - { value: 'Dispatched when the user''s credentials are valid but before the token is created.', correct: false }
      - { value: 'Dispatched only for interactive (form-based) logins.', correct: false }
    help: |
      'The `LoginSuccessEvent` is dispatched after successful authentication, providing a hook to modify the response.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_77'
  -
    question: 'In Twig, how can you check if a user is fully authenticated and then display their email address?'
    answers:
      - { value: '
```twig
{% if is_granted(''IS_AUTHENTICATED_FULLY'') %}
    <p>Email: {{ app.user.email }}</p>
{% endif %}
```', correct: true }
      - { value: '
```twig
{% if app.user.isAuthenticated() %}
    <p>Email: {{ app.user.email }}</p>
{% endif %}
```', correct: false }
      - { value: '
```twig
{% if app.security.isLoggedIn() %}
    <p>Email: {{ app.user.getEmail() }}</p>
{% endif %}
```', correct: false }
      - { value: '
```twig
{% if is_logged_in() %}
    <p>Email: {{ app.user.email }}</p>
{% endif %}
```', correct: false }
    help: |
      'The `is_granted()` Twig function is used to check roles and attributes, and `app.user` provides access to the authenticated user object.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_56'
  -
    question: 'Which of the following variables are available within Symfony''s security expression language?'
    answers:
      - { value: '`user`', correct: true }
      - { value: '`role_names`', correct: true }
      - { value: '`object`', correct: true }
      - { value: '`request`', correct: true }
      - { value: '`session`', correct: false }
    help: |
      'The security expression language provides access to `user`, `role_names`, `object` (or `subject`), `token`, and `trust_resolver`. The `request` variable is also available when the expression is evaluated in a request context.
      https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#_snippet_1'
  -
    question: 'What is the difference between `is_authenticated()` and `is_fully_authenticated()` functions in Symfony''s security expression language?'
    answers:
      - { value: '`is_authenticated()` returns true if the user is authenticated via "remember-me" or "fully", while `is_fully_authenticated()` is equivalent to checking for the `IS_AUTHENTICATED_FULLY` role.', correct: true }
      - { value: '`is_authenticated()` checks if any form of authentication has occurred, while `is_fully_authenticated()` only checks for session-based authentication.', correct: false }
      - { value: '`is_fully_authenticated()` includes users authenticated via "remember-me", whereas `is_authenticated()` does not.', correct: false }
      - { value: 'There is no functional difference; they are aliases for each other.', correct: false }
    help: |
      '`is_authenticated()` checks for any login (including remember-me), while `is_fully_authenticated()` specifically checks for full authentication (not remember-me).
      https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#_snippet_1'
  -
    question: 'When should you avoid using `Security::isGranted()` inside a Symfony voter, and what is the recommended alternative?'
    answers:
      - { value: 'Avoid using it due to potential token mismatches; instead, use the `AccessDecisionManager` directly.', correct: true }
      - { value: 'It is always safe to use `Security::isGranted()` inside a voter.', correct: false }
      - { value: 'Only avoid it if the voter deals with multiple firewalls; otherwise, it''s fine.', correct: false }
      - { value: 'The `isGranted()` method is deprecated for use in voters.', correct: false }
    help: |
      'Using `Security::isGranted()` inside a voter is not recommended due to potential token inconsistencies. The `AccessDecisionManager` should be used instead.
      https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#_snippet_13'
  -
    question: 'Which of the following options can be used to configure a firewall in Symfony?'
    answers:
      - { value: '`pattern`', correct: true }
      - { value: '`provider`', correct: true }
      - { value: '`lazy`', correct: true }
      - { value: '`security`', correct: true }
      - { value: '`authentication_method`', correct: false }
    help: |
      'Key firewall configuration options include `pattern`, `provider`, `lazy`, and `security`.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_13'
  -
    question: 'What is the purpose of the `firewalls` section in `security.yaml`?'
    answers:
      - { value: 'It defines the security firewalls for different parts of the application, acting as the most important security configuration.', correct: true }
      - { value: 'It lists all available authentication methods in the application.', correct: false }
      - { value: 'It configures the network firewall rules for the server.', correct: false }
      - { value: 'It defines the order in which security events are processed.', correct: false }
    help: |
      'The `firewalls` option is the most important setting, defining how different parts of the application are secured.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_8'
  -
    question: 'Which of the following are valid ways to define password hashers in `security.yaml` for a Symfony application?'
    answers:
      - { value: '`Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface: ''auto''`', correct: true }
      - { value: '`App\\Entity\\User: { algorithm: bcrypt, cost: 12 }`', correct: true }
      - { value: '`App\\Entity\\Admin: { algorithm: argon2i }`', correct: true }
      - { value: '`default: sha512`', correct: false }
    help: |
      'Password hashers are configured by specifying the user class (or interface) and the hashing algorithm with optional parameters.
      https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#_snippet_1'
  -
    question: 'What is the significance of the `AuthenticationSuccessHandlerInterface` in Symfony Security?'
    answers:
      - { value: 'It allows customizing the behavior after a successful authentication, such as redirection or setting cookies.', correct: true }
      - { value: 'It handles the encryption of user credentials during login.', correct: false }
      - { value: 'It is responsible for validating the user''s password.', correct: false }
      - { value: 'It defines how a user is loaded from a data source after successful authentication.', correct: false }
    help: |
      'The `AuthenticationSuccessHandlerInterface` provides a way to customize the response and behavior upon successful authentication.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_47'
  -
    question: 'What is the significance of the `AuthenticationFailureHandlerInterface` in Symfony Security?'
    answers:
      - { value: 'It allows customizing the behavior after a failed authentication attempt, such as displaying an error message or redirecting.', correct: true }
      - { value: 'It logs all failed login attempts to a database.', correct: false }
      - { value: 'It is responsible for preventing brute-force attacks.', correct: false }
      - { value: 'It defines the error messages displayed to the user during authentication.', correct: false }
    help: |
      'The `AuthenticationFailureHandlerInterface` allows for custom handling of failed authentication attempts.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_47'
  -
    question: 'When configuring `access_control` rules, what is the effect of placing a more general path rule (e.g., `^/admin`) after a more specific path rule (e.g., `^/admin/users`)?'
    answers:
      - { value: 'The more specific rule will be applied first, and if it matches, the general rule will be ignored for that request.', correct: true }
      - { value: 'Both rules will be evaluated, and access will be granted if either rule allows it.', correct: false }
      - { value: 'The general rule will override the specific rule, potentially leading to unintended access.', correct: false }
      - { value: 'Symfony will throw an error due to conflicting access control rules.', correct: false }
    help: |
      'Symfony processes `access_control` rules in order, applying the first one that matches. More specific rules should precede general ones.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_62'
  -
    question: 'Which of the following HTTP methods can be used in an `access_control` rule to restrict access based on the request method?'
    answers:
      - { value: '`GET`', correct: true }
      - { value: '`POST`', correct: true }
      - { value: '`PUT`', correct: true }
      - { value: '`DELETE`', correct: true }
      - { value: '`HEAD`', correct: true }
    help: |
      'The `methods` option in `access_control` allows specifying an array of HTTP methods for which the rule applies.
      https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#_snippet_0'
  -
    question: 'What is the purpose of the `provider` option within a Symfony firewall configuration?'
    answers:
      - { value: 'It specifies the user provider service that the firewall should use to load user data.', correct: true }
      - { value: 'It defines the authentication provider responsible for validating credentials.', correct: false }
      - { value: 'It indicates whether the firewall is enabled or disabled.', correct: false }
      - { value: 'It sets the default role for unauthenticated users within that firewall.', correct: false }
    help: |
      'The `provider` option links a firewall to a specific user provider, determining where user information is fetched from.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_13'
  -
    question: 'When using `#[IsGranted]` attribute on a controller method, what is the purpose of the `message` option?'
    answers:
      - { value: 'It provides a custom message that will be displayed to the user if access is denied.', correct: true }
      - { value: 'It is a logging message for debugging purposes.', correct: false }
      - { value: 'It specifies the translation key for the access denied message.', correct: false }
      - { value: 'It is used to pass additional data to the voter.', correct: false }
    help: |
      'The `message` option in `#[IsGranted]` allows you to define a user-friendly message for access denied errors.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_64'
  -
    question: 'Which of the following is a key interface in Symfony Security related to password handling that allows you to upgrade a user''s password hash?'
    answers:
      - { value: '`Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface`', correct: true }
      - { value: '`Symfony\\Component\\PasswordHasher\\Hasher\\PasswordHasherInterface`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\User\\UserPasswordEncoderInterface`', correct: false }
      - { value: '`Symfony\\Component\\Security\\Core\\User\\PasswordUpdaterInterface`', correct: false }
    help: |
      'The `PasswordUpgraderInterface` defines the `upgradePassword()` method, which is used to rehash and update a user''s password.
      https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#_snippet_12'
  -
    question: 'What is the purpose of the `Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface`?'
    answers:
      - { value: 'It provides the `getPassword()` method to retrieve the user''s hashed password.', correct: true }
      - { value: 'It defines methods for authenticating a user with a plaintext password.', correct: false }
      - { value: 'It is used to store unhashed passwords in the user entity.', correct: false }
      - { value: 'It allows a user to change their own password.', correct: false }
    help: |
      'The `PasswordAuthenticatedUserInterface` is crucial for the security component to access the user''s hashed password.
      https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#_snippet_12'
  -
    question: 'Which of the following options can be configured for a `form_login` authenticator in Symfony?'
    answers:
      - { value: '`login_path`', correct: true }
      - { value: '`check_path`', correct: true }
      - { value: '`username_parameter`', correct: true }
      - { value: '`password_parameter`', correct: true }
      - { value: '`success_handler`', correct: true }
    help: |
      'The `form_login` authenticator has various configurable options, including paths, parameter names, and custom success/failure handlers.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'What is the default value for the `csrf_token_id` option in Symfony''s logout configuration?'
    answers:
      - { value: '`logout`', correct: true }
      - { value: '`_logout_csrf`', correct: false }
      - { value: '`csrf_token`', correct: false }
      - { value: '`security_logout`', correct: false }
    help: |
      'The `csrf_token_id` for logout defaults to `logout`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_24'
  -
    question: 'Which of the following is a valid policy for a rate limiter defined under `framework.rate_limiter` in Symfony?'
    answers:
      - { value: '`token_bucket`', correct: true }
      - { value: '`sliding_window`', correct: true }
      - { value: '`fixed_window_log`', correct: false }
      - { value: '`concurrency_limit`', correct: false }
    help: |
      'Symfony''s Rate Limiter component supports `token_bucket` and `sliding_window` policies.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_43'
  -
    question: 'What is the primary role of an Authenticator in Symfony Security?'
    answers:
      - { value: 'To extract credentials from a request, create a `Passport`, and authenticate the user.', correct: true }
      - { value: 'To manage user roles and permissions.', correct: false }
      - { value: 'To hash user passwords before storing them.', correct: false }
      - { value: 'To store and retrieve user sessions.', correct: false }
    help: |
      'Authenticators are responsible for initiating the authentication process, extracting credentials, and creating a `Passport`.
      https://symfony.com/doc/current/security/authenticator_manager.html'
  -
    question: 'What is a `Passport` in Symfony Security?'
    answers:
      - { value: 'An object that holds the user''s credentials and any `Badge` objects collected during authentication.', correct: true }
      - { value: 'A unique identifier for a user session.', correct: false }
      - { value: 'A cryptographic token used for API authentication.', correct: false }
      - { value: 'A collection of all roles assigned to a user.', correct: false }
    help: |
      'The `Passport` object encapsulates the user''s credentials and any associated badges throughout the authentication process.
      https://symfony.com/doc/current/security/authenticator_manager.html#passports-and-badges'
  -
    question: 'What is a `Badge` in Symfony Security?'
    answers:
      - { value: 'A small, immutable object added to a `Passport` to indicate a specific authentication state or requirement (e.g., remember me, CSRF token).', correct: true }
      - { value: 'A visual indicator of a user''s role on the website.', correct: false }
      - { value: 'A persistent token stored in the database for user authentication.', correct: false }
      - { value: 'A mechanism for multi-factor authentication.', correct: false }
    help: |
      'Badges are small objects attached to a `Passport` to convey information about the authentication process or requirements.
      https://symfony.com/doc/current/security/authenticator_manager.html#passports-and-badges'
  -
    question: 'What is the purpose of a Voter in Symfony Security?'
    answers:
      - { value: 'To encapsulate complex authorization logic for specific objects or attributes, returning `ACCESS_GRANTED`, `ACCESS_DENIED`, or `ACCESS_ABSTAIN`.', correct: true }
      - { value: 'To authenticate users based on their credentials.', correct: false }
      - { value: 'To manage user roles and their hierarchy.', correct: false }
      - { value: 'To define access control rules based on URL patterns.', correct: false }
    help: |
      'Voters are used to implement custom authorization logic, deciding whether access is granted or denied for a given subject and attribute.
      https://symfony.com/doc/current/security/voters.html'
  -
    question: 'Which of the following are valid voting strategies for the `AccessDecisionManager` in Symfony?'
    answers:
      - { value: '`affirmative`', correct: true }
      - { value: '`consensus`', correct: true }
      - { value: '`unanimous`', correct: true }
      - { value: '`majority`', correct: false }
    help: |
      'Symfony''s `AccessDecisionManager` supports `affirmative`, `consensus`, and `unanimous` voting strategies.
      https://symfony.com/doc/current/security/voters.html#voting-strategies'
  -
    question: 'What does the `affirmative` voting strategy mean for the `AccessDecisionManager`?'
    answers:
      - { value: 'If at least one voter grants access, access is granted, even if other voters deny or abstain.', correct: true }
      - { value: 'All voters must grant access for access to be granted.', correct: false }
      - { value: 'A majority of voters must grant access for access to be granted.', correct: false }
      - { value: 'Access is granted only if all voters abstain.', correct: false }
    help: |
      'The `affirmative` strategy grants access if any voter grants access.
      https://symfony.com/doc/current/security/voters.html#affirmative-strategy'
  -
    question: 'What does the `unanimous` voting strategy mean for the `AccessDecisionManager`?'
    answers:
      - { value: 'All voters that do not abstain must grant access for access to be granted. If any voter denies, access is denied.', correct: true }
      - { value: 'If at least one voter grants access, access is granted.', correct: false }
      - { value: 'A simple majority of voters must grant access.', correct: false }
      - { value: 'Access is always denied unless explicitly granted by all voters.', correct: false }
    help: |
      'The `unanimous` strategy requires all non-abstaining voters to grant access.
      https://symfony.com/doc/current/security/voters.html#unanimous-strategy'
  -
    question: 'What does the `consensus` voting strategy mean for the `AccessDecisionManager`?'
    answers:
      - { value: 'Access is granted if there are more voters granting access than denying it. If there''s a tie, the `allow_if_equal_granted_denied` option determines the outcome.', correct: true }
      - { value: 'All voters must agree on the decision (either all grant or all deny).', correct: false }
      - { value: 'The decision is based on the first voter that returns a non-abstain result.', correct: false }
      - { value: 'Access is denied if any voter denies access.', correct: false }
    help: |
      'The `consensus` strategy bases the decision on the majority of votes, with a tie-breaking option.
      https://symfony.com/doc/current/security/voters.html#consensus-strategy'
  -
    question: 'Which of the following are built-in roles provided by Symfony Security?'
    answers:
      - { value: '`IS_AUTHENTICATED_FULLY`', correct: true }
      - { value: '`IS_AUTHENTICATED_REMEMBERED`', correct: true }
      - { value: '`IS_AUTHENTICATED_ANONYMOUSLY`', correct: true }
      - { value: '`ROLE_GUEST`', correct: false }
    help: |
      'Symfony provides several built-in roles to represent different authentication states.
      https://symfony.com/doc/current/security.html#built-in-roles'
  -
    question: 'What is the purpose of the `IS_AUTHENTICATED_REMEMBERED` role?'
    answers:
      - { value: 'It indicates that the user has been authenticated via a "remember me" cookie, but not necessarily during the current request.', correct: true }
      - { value: 'It means the user has explicitly chosen to remain logged in permanently.', correct: false }
      - { value: 'It is a role assigned to users who have forgotten their password.', correct: false }
      - { value: 'It signifies that the user''s session is remembered across browser closures.', correct: false }
    help: |
      'The `IS_AUTHENTICATED_REMEMBERED` role is for users authenticated via a "remember me" cookie.
      https://symfony.com/doc/current/security.html#built-in-roles'
  -
    question: 'What does the `IS_AUTHENTICATED_ANONYMOUSLY` role signify?'
    answers:
      - { value: 'It means the user is not authenticated, but the firewall is active and allows anonymous access.', correct: true }
      - { value: 'It indicates that the user has logged in without providing any credentials.', correct: false }
      - { value: 'It is a role for users who have been temporarily blocked.', correct: false }
      - { value: 'It means the user is authenticated but has no specific roles assigned.', correct: false }
    help: |
      'The `IS_AUTHENTICATED_ANONYMOUSLY` role is present when a firewall is active but the user is not authenticated.
      https://symfony.com/doc/current/security.html#built-in-roles'
  -
    question: 'Which of the following is the correct way to inject the `Security` service into a controller in Symfony 7?'
    answers:
      - { value: 'By type-hinting `Security $security` in the constructor or method arguments.', correct: true }
      - { value: 'By using `$this->get(''security'')` in the controller.', correct: false }
      - { value: 'By extending `Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller` and using `$this->getSecurity()`.', correct: false }
      - { value: 'By using the `@security` service directly in a YAML configuration.', correct: false }
    help: |
      'In modern Symfony, services are typically injected via constructor or method argument type-hinting.
      https://symfony.com/doc/current/security.html#accessing-the-security-context'
  -
    question: 'What is the purpose of the `pattern` option in a Symfony firewall configuration?'
    answers:
      - { value: 'It is a regular expression matched against the incoming request URL to determine if the firewall should be triggered.', correct: true }
      - { value: 'It defines the encryption pattern for user passwords.', correct: false }
      - { value: 'It specifies the design pattern used for the firewall implementation.', correct: false }
      - { value: 'It sets the default route for the firewall.', correct: false }
    help: |
      'The `pattern` option uses a regular expression to match against the request URL, activating the firewall if there''s a match.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_9'
  -
    question: 'When configuring `access_control` rules, what is the effect of using `PUBLIC_ACCESS` as a role?'
    answers:
      - { value: 'It grants access to all users, including anonymous ones, without requiring any specific authentication or role.', correct: true }
      - { value: 'It denies access to all users, including authenticated ones.', correct: false }
      - { value: 'It requires users to be authenticated but without any specific role.', correct: false }
      - { value: 'It is a deprecated role and should not be used.', correct: false }
    help: |
      '`PUBLIC_ACCESS` is a special role that grants access to everyone, including unauthenticated users.
      https://symfony.com/doc/current/security.html#allowing-anonymous-access'
  -
    question: 'Which of the following is a key responsibility of an `AuthenticationSuccessHandlerInterface` implementation?'
    answers:
      - { value: 'Generating a `Response` object after successful authentication, such as a redirect or JSON response.', correct: true }
      - { value: 'Storing the user''s credentials in the session.', correct: false }
      - { value: 'Hashing the user''s password before comparison.', correct: false }
      - { value: 'Loading the user from the user provider.', correct: false }
    help: |
      'The `AuthenticationSuccessHandlerInterface` is responsible for creating the response after a successful authentication.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_47'
  -
    question: 'Which of the following is a key responsibility of an `AuthenticationFailureHandlerInterface` implementation?'
    answers:
      - { value: 'Generating a `Response` object after authentication failure, such as a redirect to the login page with an error.', correct: true }
      - { value: 'Logging the authentication failure to a file.', correct: false }
      - { value: 'Incrementing a counter for failed login attempts.', correct: false }
      - { value: 'Displaying a generic error message to the user.', correct: false }
    help: |
      'The `AuthenticationFailureHandlerInterface` is responsible for creating the response after a failed authentication attempt.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_47'
  -
    question: 'What is the purpose of the `_target_path` parameter in a Symfony login form?'
    answers:
      - { value: 'It is an HTML element name used to set the target path for redirection after a successful login.', correct: true }
      - { value: 'It is a hidden field that stores the user''s previous URL before accessing the login page.', correct: false }
      - { value: 'It specifies the default URL to redirect to if no other target path is available.', correct: false }
      - { value: 'It is used to prevent redirection loops after login.', correct: false }
    help: |
      'The `_target_path` parameter is used to explicitly define where the user should be redirected after successful login.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'What is the purpose of the `_failure_path` parameter in a Symfony login form?'
    answers:
      - { value: 'It is an HTML element name used to set the path for redirection after a failed login attempt.', correct: true }
      - { value: 'It specifies the default error page to display on login failure.', correct: false }
      - { value: 'It is used to log the reason for a failed login.', correct: false }
      - { value: 'It defines the route to which failed login attempts are forwarded.', correct: false }
    help: |
      'The `_failure_path` parameter allows specifying a custom redirection path after a failed login.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#_snippet_13'
  -
    question: 'Which of the following is a valid configuration for a firewall named `api` that uses `json_login` and is stateless?'
    answers:
      - { value: '
```yaml
firewalls:
    api:
        stateless: true
        json_login:
            check_path: api_login
```', correct: true }
      - { value: '
```yaml
firewalls:
    api:
        stateless: false
        json_login:
            check_path: api_login
```', correct: false }
      - { value: '
```yaml
firewalls:
    api:
        json_login:
            check_path: api_login
        session: false
```', correct: false }
      - { value: '
```yaml
firewalls:
    api:
        type: json_login
        stateless: true
```', correct: false }
    help: |
      'A stateless firewall means no session is used, which is common for API authentication. `json_login` is the authenticator for JSON-based login.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_25'
  -
    question: 'What is the default `interval` for login throttling if only `max_attempts` is specified?'
    answers:
      - { value: '`1 minute`', correct: true }
      - { value: '`5 minutes`', correct: false }
      - { value: '`15 minutes`', correct: false }
      - { value: '`30 seconds`', correct: false }
    help: |
      'By default, login throttling allows 5 login attempts per minute if no interval is specified.
      https://github.com/symfony/symfony-docs/blob/7.3/security.rst#_snippet_41'
  -
    question: 'When using `#[IsGranted]` attribute, what happens if the user does not have the required role or permission?'
    answers:
      - { value: 'An `AccessDeniedException` is thrown, leading to a 403 Forbidden response.', correct: true }
      - { value: 'The user is automatically redirected to the login page.', correct: false }
      - { value: 'The application proceeds, but the user''s action is logged as unauthorized.', correct: false }
      - { value: 'A warning is logged, but the action is still allowed.', correct: false }
    help: |
      'If the `#[IsGranted]` attribute check fails, Symfony throws an `AccessDeniedException`.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates'
  -
    question: 'What is the purpose of the `AuthenticationTrustResolverInterface` in Symfony Security?'
    answers:
      - { value: 'It helps determine the "trust level" of an authenticated user, distinguishing between fully authenticated, remembered, or anonymous users.', correct: true }
      - { value: 'It is used to verify the authenticity of an authentication token.', correct: false }
      - { value: 'It resolves conflicts when multiple authenticators are used.', correct: false }
      - { value: 'It manages the trust relationships between different security providers.', correct: false }
    help: |
      'The `AuthenticationTrustResolverInterface` provides methods to check the authentication trust level (e.g., `is_authenticated()`, `is_remember_me()`, `is_fully_authenticated()`).
      https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#_snippet_1'
```