```yaml
category: Templating with Twig
questions:
  - question: 'Which of the following delimiters is used in Twig for executing statements like loops or conditional logic?'
    answers:
      - { value: '{{ ... }}', correct: false }
      - { value: '{% ... %}', correct: true }
      - { value: '{# ... #}', correct: false }
      - { value: '<!-- ... -->', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'What is the correct Twig syntax to output the value of a variable named `productName`?'
    answers:
      - { value: '{% productName %}', correct: false }
      - { value: '{{ productName }}', correct: true }
      - { value: '<% productName %>', correct: false }
      - { value: '<?php echo $productName; ?>', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'How do you add a single-line comment in a Twig template that will not be rendered in the final HTML output?'
    answers:
      - { value: '<!-- This is a comment -->', correct: false }
      - { value: '{{ This is a comment }}', correct: false }
      - { value: '{# This is a comment #}', correct: true }
      - { value: '// This is a comment', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'Which of the following is a valid way to define a string literal in Twig?'
    answers:
      - { value: '''Hello World!''', correct: true }
      - { value: '"Hello World!"', correct: true }
      - { value: 'Hello World!', correct: false }
      - { value: '`Hello World!`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'In Twig, what is the purpose of the `verbatim` tag?'
    answers:
      - { value: 'To include external HTML content without parsing.', correct: false }
      - { value: 'To prevent the enclosed content from being parsed by the Twig engine.', correct: true }
      - { value: 'To define a block that cannot be overridden by child templates.', correct: false }
      - { value: 'To display debugging information about variables.', correct: false }
    help: |
      'https://twig.symfony.com/doc/2.x/tags/verbatim'

  - question: 'Which Twig operator is used for string concatenation?'
    answers:
      - { value: '+', correct: false }
      - { value: '.', correct: false }
      - { value: '~', correct: true }
      - { value: '&', correct: false }
    help: |
      'https://twig.symfony.com/doc/1.x/templates'

  - question: 'What is the recommended variable naming convention in Twig templates?'
    answers:
      - { value: 'camelCase', correct: false }
      - { value: 'PascalCase', correct: false }
      - { value: 'snake_case (lowercased and underscored)', correct: true }
      - { value: 'kebab-case', correct: false }
    help: |
      'https://twig.symfony.com/doc/2.x/coding_standards'

  - question: 'By default, how does Twig handle output escaping to prevent XSS attacks?'
    answers:
      - { value: 'It automatically escapes all output unless explicitly told not to.', correct: true }
      - { value: 'It does not escape output by default; you must use the `escape` filter.', correct: false }
      - { value: 'It only escapes variables that are explicitly marked as unsafe.', correct: false }
      - { value: 'It uses a whitelist of safe HTML tags and attributes.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'You have a variable `userDescription` that contains HTML. How do you display it in Twig without Twig escaping the HTML tags?'
    answers:
      - { value: '{{ userDescription|escape(false) }}', correct: false }
      - { value: '{{ userDescription|raw }}', correct: true }
      - { value: '{{ userDescription|unescape }}', correct: false }
      - { value: '{{ userDescription|html_decode }}', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which Twig tag allows you to explicitly enable or disable auto-escaping for a block of template code?'
    answers:
      - { value: '{% escape %}', correct: false }
      - { value: '{% autoescape %}', correct: true }
      - { value: '{% raw %}', correct: false }
      - { value: '{% safe %}', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/autoescape'

  - question: 'What is the primary purpose of template inheritance in Twig?'
    answers:
      - { value: 'To include external JavaScript files.', correct: false }
      - { value: 'To reuse common layout elements across multiple templates.', correct: true }
      - { value: 'To define global variables for all templates.', correct: false }
      - { value: 'To create reusable macros for complex logic.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'In template inheritance, which tag is used in a child template to specify its parent template?'
    answers:
      - { value: '{% include "base.html.twig" %}', correct: false }
      - { value: '{% import "base.html.twig" %}', correct: false }
      - { value: '{% extends "base.html.twig" %}', correct: true }
      - { value: '{% use "base.html.twig" %}', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'Consider a `base.html.twig` with a `{% block content %}`. How do you override this block in a child template `page.html.twig`?'
    answers:
      - { value: '{% block content %}... new content ...{% endblock %}', correct: true }
      - { value: '{{ content }} = "... new content ..."', correct: false }
      - { value: '{% override content %}... new content ...{% endoverride %}', correct: false }
      - { value: 'You cannot override blocks; you must include the full content.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'In a child template, how can you render the content of a block from its parent template while also adding new content?'
    answers:
      - { value: '{{ parent() }}', correct: true }
      - { value: '{{ super() }}', correct: false }
      - { value: '{{ self.block() }}', correct: false }
      - { value: 'You must copy the parent content manually.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/block'

  - question: 'What happens if you place content outside of a `block` tag in a Twig template that uses `{% extends ... %}`?'
    answers:
      - { value: 'The content will be rendered before the parent template.', correct: false }
      - { value: 'The content will be ignored and not rendered.', correct: false }
      - { value: 'Twig will throw a `SyntaxError`.', correct: true }
      - { value: 'The content will be appended to the `body` block by default.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which global variable in Twig provides access to the current request, user, session, and other application-level data?'
    answers:
      - { value: '`env`', correct: false }
      - { value: '`app`', correct: true }
      - { value: '`symfony`', correct: false }
      - { value: '`global`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How can you access the current user object in a Twig template, assuming it is available via the security component?'
    answers:
      - { value: '`{{ user.current }}`', correct: false }
      - { value: '`{{ app.user }}`', correct: true }
      - { value: '`{{ security.user }}`', correct: false }
      - { value: '`{{ session.user }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which global variable is available inside a `for` loop in Twig and provides information about the current iteration?'
    answers:
      - { value: '`iterator`', correct: false }
      - { value: '`loop`', correct: true }
      - { value: '`index`', correct: false }
      - { value: '`current`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/for'

  - question: 'You want to add a custom global variable `my_config` to all your Twig templates. How would you typically configure this in Symfony?'
    answers:
      - { value: 'By adding it to `parameters.yaml` and accessing via `{{ parameter(''my_config'') }}`.', correct: false }
      - { value: 'By defining it in `services.yaml` as a Twig service.', correct: false }
      - { value: 'By configuring it under the `twig.globals` section in `config/packages/twig.yaml`.', correct: true }
      - { value: 'By using `Twig_Environment::addGlobal()` in a service definition.', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/advanced'

  - question: 'What is the correct way to apply the `lower` filter to a variable `productName` in Twig?'
    answers:
      - { value: '{{ lower(productName) }}', correct: false }
      - { value: '{{ productName.lower }}', correct: false }
      - { value: '{{ productName|lower }}', correct: true }
      - { value: '{{ filter(productName, "lower") }}', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which filter would you use to format a date object `post.publishedAt` to "DD/MM/YYYY" in Twig?'
    answers:
      - { value: '`{{ post.publishedAt|format_date("DD/MM/YYYY") }}`', correct: false }
      - { value: '`{{ post.publishedAt|date("d/m/Y") }}`', correct: true }
      - { value: '`{{ post.publishedAt|datetime("DD/MM/YYYY") }}`', correct: false }
      - { value: '`{{ date(post.publishedAt, "d/m/Y") }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/2.x/advanced'

  - question: 'How do you get the number of items in an array or string `items` using a Twig filter?'
    answers:
      - { value: '`{{ items|count }}`', correct: false }
      - { value: '`{{ items|size }}`', correct: false }
      - { value: '`{{ items|length }}`', correct: true }
      - { value: '`{{ items.length }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which Twig filter converts a string like "dateOfBirth" or "date_of_birth" into "Date of birth"?'
    answers:
      - { value: '`humanize`', correct: true }
      - { value: '`capitalize`', correct: false }
      - { value: '`title`', correct: false }
      - { value: '`format_name`', correct: false }
    help: |
      'https://twig.symfony.com/doc/1.x/filters/format_file'

  - question: 'You need to display a price `product.price` as "$1,234.56". Which filter and arguments would you use?'
    answers:
      - { value: '`{{ product.price|number_format(2, '.', ',') }}`', correct: true }
      - { value: '`{{ product.price|currency(2, "$") }}`', correct: false }
      - { value: '`{{ product.price|format_currency("USD") }}`', correct: false }
      - { value: '`{{ product.price|price(2, ",", ".") }}` (assuming a custom filter)', correct: true }
    help: |
      'https://twig.symfony.com/doc/2.x/filters/number_format', 'https://symfony.com/doc/current/templates'

  - question: 'What is the purpose of the `emojify` filter in Twig?'
    answers:
      - { value: 'To convert text into a random emoji.', correct: false }
      - { value: 'To transform textual representations of emojis (e.g., `:wave:`) into actual emoji characters.', correct: true }
      - { value: 'To remove all emojis from a string.', correct: false }
      - { value: 'To detect if a string contains emojis.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/importmap'

  - question: 'How do you include another Twig template file named `_header.html.twig` into your current template?'
    answers:
      - { value: '{% import "_header.html.twig" %}', correct: false }
      - { value: '{{ include("_header.html.twig") }}', correct: true }
      - { value: '{% use "_header.html.twig" %}', correct: false }
      - { value: '{% embed "_header.html.twig" %}', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'When including a template, how can you pass specific variables to it, for example, passing `user` as `profile_user`?'
    answers:
      - { value: '`{{ include("profile.html.twig", {profile_user: user}) }}`', correct: true }
      - { value: '`{{ include("profile.html.twig") with {profile_user: user} }}`', correct: false }
      - { value: '`{% include "profile.html.twig" set profile_user = user %}`', correct: false }
      - { value: '`{{ include("profile.html.twig", user as profile_user) }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'You want to include a template `optional_content.html.twig` but ensure that no error is thrown if the file does not exist. Which option should you use?'
    answers:
      - { value: '`{{ include("optional_content.html.twig", ignore_errors=true) }}`', correct: false }
      - { value: '`{{ include("optional_content.html.twig") if_exists }}`', correct: false }
      - { value: '`{{ include("optional_content.html.twig", ignore missing = true) }}`', correct: true }
      - { value: '`{% try_include "optional_content.html.twig" %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/include'

  - question: 'When using `include` with the `only` keyword, what happens to the variables from the parent template?'
    answers:
      - { value: 'Only the variables explicitly passed to `include` are available in the included template.', correct: true }
      - { value: 'All variables from the parent template are still available.', correct: false }
      - { value: 'No variables are available in the included template.', correct: false }
      - { value: 'It throws an error if no variables are explicitly passed.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/include'

  - question: 'What is the correct Twig syntax for an `if` statement to check if a variable `isLoggedIn` is true?'
    answers:
      - { value: '{% if isLoggedIn == true %}', correct: true }
      - { value: '{% if isLoggedIn %}', correct: true }
      - { value: '{% if isLoggedIn is true %}', correct: false }
      - { value: '{% if (isLoggedIn) %}', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/if'

  - question: 'How do you implement an `if-elseif-else` structure in Twig?'
    answers:
      - { value: |
          ```twig
          {% if condition1 %}
              ...
          {% else if condition2 %}
              ...
          {% else %}
              ...
          {% endif %}
          ```
        , correct: false }
      - { value: |
          ```twig
          {% if condition1 %}
              ...
          {% elseif condition2 %}
              ...
          {% else %}
              ...
          {% endif %}
          ```
        , correct: true }
      - { value: |
          ```twig
          {% if condition1 %}
              ...
          {% elif condition2 %}
              ...
          {% else %}
              ...
          {% end if %}
          ```
        , correct: false }
      - { value: |
          ```twig
          {% switch condition %}
              {% case 1 %} ...
              {% case 2 %} ...
              {% default %} ...
          {% endswitch %}
          ```
        , correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/if'

  - question: 'You want to iterate over a list of `products`. What is the correct Twig `for` loop syntax?'
    answers:
      - { value: '{% for product in products %}', correct: true }
      - { value: '{% foreach product in products %}', correct: false }
      - { value: '{% loop product from products %}', correct: false }
      - { value: '{% products.each(product) %}', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/for'

  - question: 'Inside a Twig `for` loop, how can you check if the current iteration is the first item?'
    answers:
      - { value: '`{% if loop.first %}`', correct: true }
      - { value: '`{% if loop.index == 0 %}`', correct: false }
      - { value: '`{% if loop.is_first %}`', correct: false }
      - { value: '`{% if loop.start %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/for'

  - question: 'What is the purpose of the `else` clause in a Twig `for` loop?'
    answers:
      - { value: 'To execute code if the loop is interrupted by a `break` statement.', correct: false }
      - { value: 'To execute code if the iterated sequence is empty.', correct: true }
      - { value: 'To execute code after the loop has finished iterating.', correct: false }
      - { value: 'To define an alternative iteration strategy.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/for'

  - question: 'How do you generate a URL for a Symfony route named `app_product_show` with a `slug` parameter in Twig?'
    answers:
      - { value: '`{{ url("app_product_show", {slug: product.slug}) }}`', correct: true }
      - { value: '`{{ path("app_product_show", {slug: product.slug}) }}`', correct: true }
      - { value: '`{{ route("app_product_show", {slug: product.slug}) }}`', correct: false }
      - { value: '`{{ link("app_product_show", {slug: product.slug}) }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is the difference between `path()` and `url()` functions in Twig for URL generation?'
    answers:
      - { value: '`path()` generates an absolute URL, while `url()` generates a relative path.', correct: false }
      - { value: '`path()` generates a relative path, while `url()` generates an absolute URL.', correct: true }
      - { value: '`path()` is for internal routes, `url()` is for external URLs.', correct: false }
      - { value: 'There is no functional difference; they are aliases.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How do you generate a URL for a static asset located at `public/images/logo.png` in Twig?'
    answers:
      - { value: '`{{ static("images/logo.png") }}`', correct: false }
      - { value: '`{{ asset("images/logo.png") }}`', correct: true }
      - { value: '`{{ public("images/logo.png") }}`', correct: false }
      - { value: '`{{ url("images/logo.png") }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'In a Symfony controller extending `AbstractController`, which method is used to render a Twig template and return a `Response` object?'
    answers:
      - { value: '`$this->renderView()`', correct: false }
      - { value: '`$this->render()`', correct: true }
      - { value: '`$this->display()`', correct: false }
      - { value: '`$this->showTemplate()`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'If you only need the HTML content of a Twig template as a string, without wrapping it in a `Response` object, which method should you use in a controller extending `AbstractController`?'
    answers:
      - { value: '`$this->renderView()`', correct: true }
      - { value: '`$this->render()`', correct: false }
      - { value: '`$this->getTemplateContent()`', correct: false }
      - { value: '`$this->fetch()`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is the purpose of the `#[Template]` attribute in a Symfony controller method (Symfony 7.2+)?'
    answers:
      - { value: 'To define the route for the controller action.', correct: false }
      - { value: 'To automatically render a Twig template based on the method name or a specified path, returning an array of parameters.', correct: true }
      - { value: 'To inject the Twig environment into the controller.', correct: false }
      - { value: 'To mark the controller method as a Twig function.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How can you render a specific block from a Twig template directly from a Symfony controller, returning it as a `Response`?'
    answers:
      - { value: '`$this->renderBlock("template.html.twig", "block_name", [...]);`', correct: true }
      - { value: '`$this->render("template.html.twig", {block: "block_name"});`', correct: false }
      - { value: '`$this->renderView("template.html.twig").block("block_name");`', correct: false }
      - { value: '`#[Template("template.html.twig", block: "block_name")]` (Symfony 7.2+)', correct: true }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which Twig function is used to create a translatable object that can be processed by the `trans` filter, supporting parameters and a translation domain?'
    answers:
      - { value: '`translate()`', correct: false }
      - { value: '`t()`', correct: true }
      - { value: '`translatable()`', correct: false }
      - { value: '`i18n()`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/t'

  - question: 'How do you translate a message "Hello %name%!" with a placeholder in Twig, assuming `name` is a variable?'
    answers:
      - { value: '`{{ "Hello %name%!"|trans({''%name%'': name}) }}`', correct: true }
      - { value: '`{{ trans("Hello %name%!", {name: name}) }}`', correct: false }
      - { value: '`{% trans %}Hello {{ name }}!{% endtrans %}`', correct: false }
      - { value: '`{{ t(message = "Hello %name%!", parameters = {"%name%": name})|trans }}`', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/t', 'https://twig.symfony.com/doc/3.x/functions/relative_path'

  - question: 'What is the purpose of the `trans_default_domain` tag in Twig?'
    answers:
      - { value: 'To define a new translation domain.', correct: false }
      - { value: 'To set the default translation domain for the current Twig template.', correct: true }
      - { value: 'To force all translations to use the `messages` domain.', correct: false }
      - { value: 'To import translations from a specific domain.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/trans_default_domain'

  - question: 'Which of the following is the correct way to use string interpolation in Twig?'
    answers:
      - { value: '`{{ "My name is {name}" }}`', correct: false }
      - { value: '`{{ "My name is %name%" }}`', correct: false }
      - { value: '`{{ "My name is #{name}" }}`', correct: true }
      - { value: '`{{ "My name is ${name}" }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'Given a variable `user_name` with value "John", what will `{{ "Hello #{user_name}!" }}` output?'
    answers:
      - { value: 'Hello #{user_name}!', correct: false }
      - { value: 'Hello John!', correct: true }
      - { value: 'Hello %user_name%!', correct: false }
      - { value: 'Syntax Error', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'How do you include a JavaScript file `app.js` located in `public/js/` using the `asset()` function?'
    answers:
      - { value: '`<script src="{{ asset(''/js/app.js'') }}"></script>`', correct: true }
      - { value: '`<script src="{{ path(''/js/app.js'') }}"></script>`', correct: false }
      - { value: '`<script src="/js/app.js"></script>`', correct: false }
      - { value: '`<script src="{{ url(''/js/app.js'') }}"></script>`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is the primary benefit of using the `asset()` function for static assets in Twig?'
    answers:
      - { value: 'It automatically minifies and concatenates assets.', correct: false }
      - { value: 'It ensures correct paths regardless of the application''s subdirectory or asset versioning.', correct: true }
      - { value: 'It serves assets directly from a CDN.', correct: false }
      - { value: 'It adds a unique hash to asset filenames for cache busting.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which Twig function or tag is used to dump the contents of a variable for debugging purposes, often visible in the Web Debug Toolbar?'
    answers:
      - { value: '`{{ debug(variable) }}`', correct: false }
      - { value: '`{{ var_dump(variable) }}`', correct: false }
      - { value: '`{{ dump(variable) }}`', correct: true }
      - { value: '`{% print variable %}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How can you dump the contents of multiple variables (`articles` and `user`) with labels in Twig, visible directly in the page content?'
    answers:
      - { value: '`{{ dump(articles, user) }}`', correct: true }
      - { value: '`{{ dump(blog_posts: articles, user: app.user) }}`', correct: true }
      - { value: '`{% dump articles, user %}`', correct: true }
      - { value: '`{{ dump({articles: articles, user: user}) }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is the purpose of the `{% dump %}` tag without arguments in Twig?'
    answers:
      - { value: 'It dumps all currently available variables to the Web Debug Toolbar.', correct: true }
      - { value: 'It dumps all currently available variables directly into the page content.', correct: false }
      - { value: 'It causes a syntax error.', correct: false }
      - { value: 'It clears the debugging output.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which of the following Twig filters would you use to convert a string to uppercase?'
    answers:
      - { value: '`upper`', correct: true }
      - { value: '`ucfirst`', correct: false }
      - { value: '`capitalize`', correct: false }
      - { value: '`to_upper`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How do you check if a variable `items` is empty in Twig?'
    answers:
      - { value: '`{% if items is empty %}`', correct: true }
      - { value: '`{% if items|length == 0 %}`', correct: true }
      - { value: '`{% if not items %}`', correct: true }
      - { value: '`{% if items.isEmpty() %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/if'

  - question: 'Which Twig test checks if a number is even?'
    answers:
      - { value: '`is even`', correct: true }
      - { value: '`is_even`', correct: false }
      - { value: '`is divisible by 2`', correct: false }
      - { value: '`is_divisible_by(2)`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/even'

  - question: 'How do you define a custom Twig filter in PHP using the `#[AsTwigFilter]` attribute?'
    answers:
      - { value: |
          ```php
          #[AsTwigFilter('my_filter')]
          public function myFilter(string $value): string { /* ... */ }
          ```
        , correct: true }
      - { value: |
          ```php
          public function getFilters(): array {
              return [new TwigFilter('my_filter', [...])];
          }
          ```
        , correct: false }
      - { value: |
          ```php
          #[TwigFilter('my_filter')]
          public static function myFilter(string $value): string { /* ... */ }
          ```
        , correct: false }
      - { value: 'By implementing `Twig_Extension_FilterInterface`.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is the purpose of the `controller()` function in Twig when used with `render()`?'
    answers:
      - { value: 'To execute a PHP function directly from Twig.', correct: false }
      - { value: 'To embed the output of a Symfony controller action into the current template.', correct: true }
      - { value: 'To define a new controller route within Twig.', correct: false }
      - { value: 'To redirect to another controller action.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which of the following is a valid way to embed the output of a controller action `App\\Controller\\BlogController::recentArticles` with a `max` parameter of 3 into a Twig template?'
    answers:
      - { value: '`{{ render(controller(''App\\\\Controller\\\\BlogController::recentArticles'', {max: 3})) }}`', correct: true }
      - { value: '`{{ include(controller(''App\\\\Controller\\\\BlogController::recentArticles'', {max: 3})) }}`', correct: false }
      - { value: '`{{ embed_controller(''App\\\\Controller\\\\BlogController::recentArticles'', {max: 3}) }}`', correct: false }
      - { value: '`{% controller ''App\\\\Controller\\\\BlogController::recentArticles'' with {max: 3} %}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is `hinclude.js` used for in conjunction with `render_hinclude()` in Twig?'
    answers:
      - { value: 'To include external CSS files asynchronously.', correct: false }
      - { value: 'To load parts of a page asynchronously via AJAX, improving perceived performance.', correct: true }
      - { value: 'To lazy-load images and videos.', correct: false }
      - { value: 'To prevent content from being indexed by search engines.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How can you provide a default string content for `render_hinclude()` if the asynchronous content fails to load or JavaScript is disabled?'
    answers:
      - { value: '`{{ render_hinclude(controller(''...''), {fallback: ''Loading...''}) }}`', correct: false }
      - { value: '`{{ render_hinclude(controller(''...''), {default: ''Loading...''}) }}`', correct: true }
      - { value: '`{{ render_hinclude(controller(''...''), {error_message: ''Loading...''}) }}`', correct: false }
      - { value: '`{% hinclude_default ''Loading...'' %}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which command line tool can you use to check your Twig templates for syntax errors and deprecated features?'
    answers:
      - { value: '`php bin/console twig:lint`', correct: false }
      - { value: '`php bin/console lint:twig`', correct: true }
      - { value: '`php bin/console template:validate`', correct: false }
      - { value: '`php bin/console debug:twig`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How can you configure additional directories for Twig to search for templates, besides the default `templates/` directory, without assigning a namespace?'
    answers:
      - { value: 'By adding paths to `twig.paths` in `config/packages/twig.yaml` with `~` as namespace.', correct: true }
      - { value: 'By using `Twig_Environment::addPath()` in a service.', correct: false }
      - { value: 'By modifying the `default_path` option in `twig.yaml`.', correct: false }
      - { value: 'By creating symlinks to the `templates/` directory.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is the correct way to define a Twig namespace `email` for templates located in `email/default/templates`?'
    answers:
      - { value: |
          ```yaml
          twig:
              paths:
                  'email/default/templates': 'email'
          ```
        , correct: true }
      - { value: |
          ```yaml
          twig:
              namespaces:
                  email: 'email/default/templates'
          ```
        , correct: false }
      - { value: |
          ```yaml
          twig:
              email_path: 'email/default/templates'
          ```
        , correct: false }
      - { value: 'By using `{% namespace "email" "email/default/templates" %}` in Twig.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How do you reference a template located in a custom namespace, e.g., `email/welcome.html.twig` in the `email` namespace?'
    answers:
      - { value: '`{{ include("email/welcome.html.twig") }}`', correct: false }
      - { value: '`{{ include("@email/welcome.html.twig") }}`', correct: true }
      - { value: '`{{ include("namespace:email:welcome.html.twig") }}`', correct: false }
      - { value: '`{{ include("email::welcome.html.twig") }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'When overriding a template from a Symfony bundle (e.g., `AcmeUserBundle/registration/confirmed.html.twig`), what special prefix should be used with `extends` to avoid infinite loops?'
    answers:
      - { value: '`@!AcmeUser/registration/confirmed.html.twig`', correct: true }
      - { value: '`@AcmeUser/registration/confirmed.html.twig`', correct: false }
      - { value: '`!AcmeUserBundle/registration/confirmed.html.twig`', correct: false }
      - { value: '`_AcmeUser/registration/confirmed.html.twig`', correct: false }
    help: |
      'https://symfony.com/doc/current/bundles/override'

  - question: 'Which of the following is the correct way to define a Twig function in PHP using the `#[AsTwigFunction]` attribute?'
    answers:
      - { value: |
          ```php
          #[AsTwigFunction('my_function')]
          public function myFunction(string $arg): string { /* ... */ }
          ```
        , correct: true }
      - { value: |
          ```php
          public function getFunctions(): array {
              return [new TwigFunction('my_function', [...])];
          }
          ```
        , correct: false }
      - { value: |
          ```php
          #[TwigFunction('my_function')]
          public static function myFunction(string $arg): string { /* ... */ }
          ```
        , correct: false }
      - { value: 'By implementing `Twig_Extension_FunctionInterface`.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is the purpose of the `Twig_Environment` class in PHP?'
    answers:
      - { value: 'It represents a single Twig template file.', correct: false }
      - { value: 'It is the central object in Twig, used to store configuration, extensions, and load templates.', correct: true }
      - { value: 'It is responsible for compiling Twig templates into PHP code.', correct: false }
      - { value: 'It provides methods for rendering HTML directly.', correct: false }
    help: |
      'https://twig.symfony.com/doc/1.x/api'

  - question: 'How do you check if a Twig template `theme/layout_responsive.html.twig` exists using the Twig loader in PHP?'
    answers:
      - { value: '`$twig->getLoader()->exists(''theme/layout_responsive.html.twig'');`', correct: true }
      - { value: '`$twig->templateExists(''theme/layout_responsive.html.twig'');`', correct: false }
      - { value: '`$twig->load(''theme/layout_responsive.html.twig'');` (and catch exception)', correct: false }
      - { value: '`$twig->hasTemplate(''theme/layout_responsive.html.twig'');`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'Which of the following is a valid Twig number literal?'
    answers:
      - { value: '`42`', correct: true }
      - { value: '`42.23`', correct: true }
      - { value: '`-3_141.592_65`', correct: true }
      - { value: '`0xAF`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'What is the correct way to assign a value "bar" to a variable `foo` in Twig?'
    answers:
      - { value: '`{{ foo = "bar" }}`', correct: false }
      - { value: '`{% set foo = "bar" %}`', correct: true }
      - { value: '`{% var foo = "bar" %}`', correct: false }
      - { value: '`{% assign foo = "bar" %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/2.x/tags/set'

  - question: 'Which Twig operator is used for the null coalescing operation (e.g., `variable ?? 'default'`)?'
    answers:
      - { value: '`?:`', correct: false }
      - { value: '`??`', correct: true }
      - { value: '`||`', correct: false }
      - { value: '`??=`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'What is the output of `{{ "42" ~ 1 + 41 }}` in Twig 3.x (before precedence change)?'
    answers:
      - { value: '`42141`', correct: false }
      - { value: '`421 + 41`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141` (concatenation first, then addition)', correct: false }
      - { value: '`421 + 41` (concatenation first, then addition)', correct: false }
      - { value: '`421 + 41` (concatenation first, then addition)', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
      - { value: '`42141`', correct: false }
            - { value: '`42141`', correct: true }
      - { value: '`83`', correct: false }
      - { value: '`4242`', correct: false }
      - { value: '`Syntax Error`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/deprecated'

  - question: 'What is the output of `{{ not 1 * 2 }}` in Twig 3.x (before precedence change)?'
    answers:
      - { value: '`false`', correct: true }
      - { value: '`0`', correct: false }
      - { value: '`true`', correct: false }
      - { value: '`Syntax Error`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/deprecated'

  - question: 'What is the output of `{{ -1|abs }}` in Twig 3.x (before precedence change)?'
    answers:
      - { value: '`1`', correct: false }
      - { value: '`-1`', correct: true }
      - { value: '`Syntax Error`', correct: false }
      - { value: '`0`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/deprecated'

  - question: 'Which of the following is the correct way to output a literal `{{` (double curly braces) in Twig?'
    answers:
      - { value: '`{{ ''{{'' }}`', correct: true }
      - { value: '`{% raw %}{{ {% endraw %}`', correct: false }
      - { value: '`{{ "{{" }}`', correct: false }
      - { value: '`{{ ''{{''|raw }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'What is the purpose of the `apply` tag in Twig?'
    answers:
      - { value: 'To apply a filter to a block of template code.', correct: true }
      - { value: 'To include a template and apply a filter to its content.', correct: false }
      - { value: 'To define a new custom filter.', correct: false }
      - { value: 'To apply a function to a variable.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/apply'

  - question: 'How can you convert Markdown content within a Twig template to HTML?'
    answers:
      - { value: '`{{ markdown_content|markdown_to_html }}`', correct: true }
      - { value: '`{% markdown_to_html %}...{% endmarkdown_to_html %}`', correct: false }
      - { value: '`{{ markdown_content|convert_markdown }}`', correct: false }
      - { value: '`{{ markdown_to_html(markdown_content) }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/2.x/filters/markdown_to_html'

  - question: 'When defining a custom Twig extension in PHP, which interface should your extension class implement to be recognized by Twig?'
    answers:
      - { value: '`Twig\\Extension\\ExtensionInterface`', correct: true }
      - { value: '`Twig\\Extension\\CustomExtensionInterface`', correct: false }
      - { value: '`Symfony\\Bridge\\Twig\\Extension\\ExtensionInterface`', correct: false }
      - { value: '`Twig\\Extension\\AbstractExtension`', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/advanced'

  - question: 'Which of the following Twig tests checks if a variable is defined and not null?'
    answers:
      - { value: '`is defined`', correct: true }
      - { value: '`is not null`', correct: false }
      - { value: '`is exists`', correct: false }
      - { value: '`is set`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/defined'

  - question: 'How do you check if a variable `user` is an instance of a specific class `App\\Entity\\User` in Twig?'
    answers:
      - { value: '`{% if user is instanceof(''App\\\\Entity\\\\User'') %}`', correct: true }
      - { value: '`{% if user is type of ''App\\\\Entity\\\\User'' %}`', correct: false }
      - { value: '`{% if user.instanceof(''App\\\\Entity\\\\User'') %}`', correct: false }
      - { value: '`{% if user is a ''App\\\\Entity\\\\User'' %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/instanceof'

  - question: 'What is the purpose of the `do` tag in Twig?'
    answers:
      - { value: 'To execute a PHP function directly.', correct: false }
      - { value: 'To execute one or more statements and discard the result (e.g., for setting variables or calling functions with side effects).', correct: true }
      - { value: 'To define a loop that executes at least once.', correct: false }
      - { value: 'To include a template without rendering its output.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/do'

  - question: 'Which Twig filter is used to convert a PHP array or object into a YAML string?'
    answers:
      - { value: '`yaml_encode`', correct: true }
      - { value: '`to_yaml`', correct: false }
      - { value: '`serialize`', correct: false }
      - { value: '`json_encode`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/yaml_encode'

  - question: 'What is the correct way to iterate over a range of numbers from 1 to 5 in Twig?'
    answers:
      - { value: '`{% for i in 1..5 %}`', correct: true }
      - { value: '`{% for i from 1 to 5 %}`', correct: false }
      - { value: '`{% for i in range(1, 5) %}`', correct: false }
      - { value: '`{% for i in [1, 2, 3, 4, 5] %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/for'

  - question: 'How can you access the current loop index (starting from 0) inside a `for` loop in Twig?'
    answers:
      - { value: '`{{ loop.index0 }}`', correct: true }
      - { value: '`{{ loop.index }}`', correct: false }
      - { value: '`{{ loop.key }}`', correct: false }
      - { value: '`{{ loop.position }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/for'

  - question: 'Which Twig function allows you to get the absolute URL of a given path?'
    answers:
      - { value: '`absolute_url()`', correct: true }
      - { value: '`url()`', correct: false }
      - { value: '`full_url()`', correct: false }
      - { value: '`asset_url()`', correct: false }
    help: |
      'https://twig.symfony.com/doc/2.x/functions/absolute_url'

  - question: 'What is the purpose of the `source()` function in Twig?'
    answers:
      - { value: 'To include the raw content of a template file without parsing it.', correct: true }
      - { value: 'To get the source code of the current template.', correct: false }
      - { value: 'To display the original source of a variable.', correct: false }
      - { value: 'To load a template from a remote URL.', correct: false }
    help: |
      'https://twig.symfony.com/doc/1/functions/source'

  - question: 'How do you define a macro named `input` that takes `name` and `value` as arguments in Twig?'
    answers:
      - { value: |
          ```twig
          {% macro input(name, value) %}
              <input type="text" name="{{ name }}" value="{{ value }}">
          {% endmacro %}
          ```
        , correct: true }
      - { value: |
          ```twig
          {% function input(name, value) %}
              <input type="text" name="{{ name }}" value="{{ value }}">
          {% endfunction %}
          ```
        , correct: false }
      - { value: |
          ```twig
          {% def macro input(name, value) %}
              <input type="text" name="{{ name }}" value="{{ value }}">
          {% enddef %}
          ```
        , correct: false }
      - { value: '`{{ macro input(name, value) ... }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/macro'

  - question: 'How do you import macros from a template file `forms.html.twig` into your current template?'
    answers:
      - { value: '`{% include "forms.html.twig" as forms %}`', correct: false }
      - { value: '`{% from "forms.html.twig" import * as forms %}`', correct: false }
      - { value: '`{% import "forms.html.twig" as forms %}`', correct: true }
      - { value: '`{% use "forms.html.twig" with forms %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/import'

  - question: 'What is the purpose of the `with` tag in Twig?'
    answers:
      - { value: 'To include a template with a specific context.', correct: true }
      - { value: 'To define a new variable in a specific scope.', correct: false }
      - { value: 'To extend a template with additional blocks.', correct: false }
      - { value: 'To apply a filter to a variable.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/with'

  - question: 'Which Twig filter is used to convert a string to its URL-friendly slug representation?'
    answers:
      - { value: '`slug`', correct: true }
      - { value: '`url_encode`', correct: false }
      - { value: '`transliterate`', correct: false }
      - { value: '`urlize`', correct: false }
    help: |
      'https://symfony.com/doc/current/string'

  - question: 'How do you access an environment variable `APP_ENV` in a Twig template?'
    answers:
      - { value: '`{{ env.APP_ENV }}`', correct: false }
      - { value: '`{{ app.environment }}`', correct: true }
      - { value: '`{{ constant(''APP_ENV'') }}`', correct: false }
      - { value: '`{{ getenv(''APP_ENV'') }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'What is the correct way to check if a variable `user` is an object and not an array or scalar?'
    answers:
      - { value: '`{% if user is object %}`', correct: true }
      - { value: '`{% if user is_object %}`', correct: false }
      - { value: '`{% if user.isObject %}`', correct: false }
      - { value: '`{% if typeof(user) == ''object'' %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/object'

  - question: 'How do you get the first element of an array `items` in Twig?'
    answers:
      - { value: '`{{ items[0] }}`', correct: true }
      - { value: '`{{ items.first }}`', correct: false }
      - { value: '`{{ items|first }}`', correct: true }
      - { value: '`{{ items.at(0) }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/first'

  - question: 'Which Twig filter is used to remove HTML tags from a string?'
    answers:
      - { value: '`strip_tags`', correct: true }
      - { value: '`remove_html`', correct: false }
      - { value: '`plain_text`', correct: false }
      - { value: '`html_to_text`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/striptags'

  - question: 'How do you display a random number between 1 and 100 in Twig?'
    answers:
      - { value: '`{{ random(1, 100) }}`', correct: false }
      - { value: '`{{ random(1..100) }}`', correct: true }
      - { value: '`{{ rand(1, 100) }}`', correct: false }
      - { value: '`{{ number_random(1, 100) }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/random'

  - question: 'What is the purpose of the `cache` tag in Twig?'
    answers:
      - { value: 'To store variables in the session cache.', correct: false }
      - { value: 'To cache fragments of a template for improved performance.', correct: true }
      - { value: 'To clear the Twig cache.', correct: false }
      - { value: 'To enable client-side caching of the rendered page.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/cache'

  - question: 'Which Twig filter is used to truncate a string to a specified length, adding an ellipsis if truncated?'
    answers:
      - { value: '`truncate`', correct: true }
      - { value: '`slice`', correct: false }
      - { value: '`limit`', correct: false }
      - { value: '`shorten`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/truncate'

  - question: 'How do you check if a variable `name` is an empty string in Twig?'
    answers:
      - { value: '`{% if name is empty %}`', correct: true }
      - { value: '`{% if name == '''' %}`', correct: true }
      - { value: '`{% if name|length == 0 %}`', correct: true }
      - { value: '`{% if name is null %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/if'

  - question: 'What is the purpose of the `spaceless` tag in Twig?'
    answers:
      - { value: 'To remove all whitespace between HTML tags in the enclosed content.', correct: true }
      - { value: 'To add spaces between words in a string.', correct: false }
      - { value: 'To prevent Twig from adding extra whitespace during rendering.', correct: false }
      - { value: 'To compress the final HTML output.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/spaceless'

  - question: 'How do you set multiple variables at once using the `set` tag in Twig?'
    answers:
      - { value: '`{% set foo = "bar", baz = "qux" %}`', correct: true }
      - { value: '`{% set {foo: "bar", baz: "qux"} %}`', correct: false }
      - { value: '`{% set foo = "bar"; set baz = "qux" %}`', correct: false }
      - { value: '`{% set (foo, baz) = ("bar", "qux") %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/set'

  - question: 'Which of the following is a valid way to define a hash (associative array) in Twig?'
    answers:
      - { value: '`{''key'': ''value'', ''another'': 123}`', correct: true }
      - { value: '`["key" => "value", "another" => 123]`', correct: false }
      - { value: '`(''key'': ''value'', ''another'': 123)`', correct: false }
      - { value: '`map(''key'': ''value'', ''another'': 123)`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/templates'

  - question: 'How do you check if a variable `user` is an array in Twig?'
    answers:
      - { value: '`{% if user is array %}`', correct: true }
      - { value: '`{% if user is_array %}`', correct: false }
      - { value: '`{% if user.isArray %}`', correct: false }
      - { value: '`{% if typeof(user) == ''array'' %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/array'

  - question: 'Which Twig filter is used to reverse a string or an array?'
    answers:
      - { value: '`reverse`', correct: true }
      - { value: '`flip`', correct: false }
      - { value: '`invert`', correct: false }
      - { value: '`backward`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/reverse'

  - question: 'What is the purpose of the `default` filter in Twig?'
    answers:
      - { value: 'To set a default value for a variable if it is undefined or null.', correct: true }
      - { value: 'To define a default translation domain.', correct: false }
      - { value: 'To provide a default template to include.', correct: false }
      - { value: 'To set default arguments for a function.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/default'

  - question: 'How do you convert a string `my_string` to title case (first letter of each word capitalized) in Twig?'
    answers:
      - { value: '`{{ my_string|title }}`', correct: true }
      - { value: '`{{ my_string|capitalize_words }}`', correct: false }
      - { value: '`{{ my_string|ucwords }}`', correct: false }
      - { value: '`{{ my_string|to_title_case }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/title'

  - question: 'Which Twig filter is used to sort an array?'
    answers:
      - { value: '`sort`', correct: true }
      - { value: '`order`', correct: false }
      - { value: '`arrange`', correct: false }
      - { value: '`asort`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/sort'

  - question: 'How do you remove duplicate values from an array `tags` in Twig?'
    answers:
      - { value: '`{{ tags|unique }}`', correct: true }
      - { value: '`{{ tags|distinct }}`', correct: false }
      - { value: '`{{ tags|array_unique }}`', correct: false }
      - { value: '`{{ tags|deduplicate }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/unique'

  - question: 'What is the correct way to get the current date and time in Twig?'
    answers:
      - { value: '`{{ "now"|date }}`', correct: true }
      - { value: '`{{ current_datetime() }}`', correct: false }
      - { value: '`{{ date() }}`', correct: false }
      - { value: '`{{ new Date() }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/date'

  - question: 'Which Twig filter is used to convert a string to JSON format?'
    answers:
      - { value: '`json_encode`', correct: true }
      - { value: '`to_json`', correct: false }
      - { value: '`serialize`', correct: false }
      - { value: '`json`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/json_encode'

  - question: 'How do you check if a variable `value` is an integer in Twig?'
    answers:
      - { value: '`{% if value is integer %}`', correct: true }
      - { value: '`{% if value is int %}`', correct: false }
      - { value: '`{% if value is_numeric %}`', correct: false }
      - { value: '`{% if typeof(value) == ''integer'' %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/integer'

  - question: 'What is the purpose of the `cycle` function in Twig?'
    answers:
      - { value: 'To loop through a list of values and return the current one on each iteration.', correct: true }
      - { value: 'To create an infinite loop.', correct: false }
      - { value: 'To repeat a string a specified number of times.', correct: false }
      - { value: 'To rotate an array.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/cycle'

  - question: 'How do you get the last element of an array `items` in Twig?'
    answers:
      - { value: '`{{ items[-1] }}`', correct: false }
      - { value: '`{{ items|last }}`', correct: true }
      - { value: '`{{ items.last }}`', correct: false }
      - { value: '`{{ items[items|length - 1] }}`', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/last'

  - question: 'Which Twig filter is used to format a number with a specific number of decimal places, decimal point, and thousands separator?'
    answers:
      - { value: '`number_format`', correct: true }
      - { value: '`format_number`', correct: false }
      - { value: '`money_format`', correct: false }
      - { value: '`decimal_format`', correct: false }
    help: |
      'https://twig.symfony.com/doc/2.x/filters/number_format'

  - question: 'What is the purpose of the `attribute()` function in Twig?'
    answers:
      - { value: 'To access an attribute of an HTML element.', correct: false }
      - { value: 'To dynamically access an attribute (property or method) of an object or an item of an array/hash.', correct: true }
      - { value: 'To set an attribute on a variable.', correct: false }
      - { value: 'To check if an attribute exists.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/attribute'

  - question: 'How do you get the maximum value from a list of numbers `prices` in Twig?'
    answers:
      - { value: '`{{ max(prices) }}`', correct: true }
      - { value: '`{{ prices|max }}`', correct: false }
      - { value: '`{{ prices.max() }}`', correct: false }
      - { value: '`{{ array_max(prices) }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/max'

  - question: 'Which Twig filter is used to convert all characters in a string to lowercase?'
    answers:
      - { value: '`lower`', correct: true }
      - { value: '`lcfirst`', correct: false }
      - { value: '`to_lower`', correct: false }
      - { value: '`lowercase`', correct: false }
    help: |
      'https://twig.symfony.com/doc/2.x/advanced'

  - question: 'What is the purpose of the `random` function in Twig?'
    answers:
      - { value: 'To generate a random string.', correct: false }
      - { value: 'To return a random item from a sequence or a random number.', correct: true }
      - { value: 'To shuffle an array randomly.', correct: false }
      - { value: 'To generate a cryptographically secure random number.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/random'

  - question: 'How do you check if a variable `user` is null in Twig?'
    answers:
      - { value: '`{% if user is null %}`', correct: true }
      - { value: '`{% if user == null %}`', correct: true }
      - { value: '`{% if user is_null %}`', correct: false }
      - { value: '`{% if not user %}` (only if user is falsy)', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/null'

  - question: 'Which Twig filter is used to replace occurrences of a substring within a string?'
    answers:
      - { value: '`replace`', correct: true }
      - { value: '`str_replace`', correct: false }
      - { value: '`substitute`', correct: false }
      - { value: '`regex_replace`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/replace'

  - question: 'How do you get the current year in Twig?'
    answers:
      - { value: '`{{ "now"|date("Y") }}`', correct: true }
      - { value: '`{{ date().year }}`', correct: false }
      - { value: '`{{ "now"|format("Y") }}`', correct: false }
      - { value: '`{{ current_year }}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/date'

  - question: 'What is the purpose of the `batch` filter in Twig?'
    answers:
      - { value: 'To group items in an array into smaller arrays (batches).', correct: true }
      - { value: 'To process a large dataset in chunks.', correct: false }
      - { value: 'To execute a series of operations in a single step.', correct: false }
      - { value: 'To combine multiple arrays into one.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/batch'

  - question: 'How do you check if a variable `email` is a valid email address in Twig (assuming a custom filter or test is available)?'
    answers:
      - { value: '`{% if email is email %}`', correct: true }
      - { value: '`{% if email|validate_email %}`', correct: false }
      - { value: '`{% if email.isValidEmail %}`', correct: false }
      - { value: '`{% if email matches "/^.+@.+\\..+$/" %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/email'

  - question: 'Which Twig filter is used to convert a string to a URL-safe string, typically used for filenames or slugs?'
    answers:
      - { value: '`url_encode`', correct: false }
      - { value: '`url_friendly`', correct: false }
      - { value: '`url_filter`', correct: false }
      - { value: '`url_encode` or `slug` (depending on context)', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/url_encode', 'https://symfony.com/doc/current/string'

  - question: 'How do you get the current locale in a Twig template?'
    answers:
      - { value: '`{{ app.request.locale }}`', correct: true }
      - { value: '`{{ app.locale }}`', correct: true }
      - { value: '`{{ current_locale }}`', correct: false }
      - { value: '`{{ session.locale }}`', correct: false }
    help: |
      'https://symfony.com/doc/current/translation'

  - question: 'What is the purpose of the `trans` tag in Twig?'
    answers:
      - { value: 'To translate a block of text, supporting variables, domain, and locale.', correct: true }
      - { value: 'To define a new translation key.', correct: false }
      - { value: 'To include a translation file.', correct: false }
      - { value: 'To pluralize a string.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/trans'

  - question: 'How do you pluralize a message "There is %count% apple" in Twig for different counts?'
    answers:
      - { value: '`{% trans with {''%count%'': count} count count %}There is %count% apple{% plural %}There are %count% apples{% endtrans %}`', correct: true }
      - { value: '`{{ "There is %count% apple"|transchoice(count, {''%count%'': count}) }}`', correct: true }
      - { value: '`{{ "There is %count% apple"|pluralize(count, {''%count%'': count}) }}`', correct: false }
      - { value: '`{% pluralize count %}...{% endpluralize %}`', correct: false }
    help: |
      'https://symfony.com/doc/current/translation'

  - question: 'What is the purpose of the `date_modify` filter in Twig?'
    answers:
      - { value: 'To format a date object.', correct: false }
      - { value: 'To modify a date object by adding or subtracting time intervals.', correct: true }
      - { value: 'To compare two date objects.', correct: false }
      - { value: 'To convert a string to a date object.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/date_modify'

  - question: 'How do you check if a variable `user` is an instance of a given interface `App\\Security\\UserInterface` in Twig?'
    answers:
      - { value: '`{% if user is implements(''App\\\\Security\\\\UserInterface'') %}`', correct: false }
      - { value: '`{% if user is instanceof(''App\\\\Security\\\\UserInterface'') %}`', correct: true }
      - { value: '`{% if user is interface_of(''App\\\\Security\\\\UserInterface'') %}`', correct: false }
      - { value: '`{% if user implements ''App\\\\Security\\\\UserInterface'' %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/instanceof'

  - question: 'Which Twig filter is used to convert a string to a valid HTML ID or class name?'
    answers:
      - { value: '`slugify`', correct: false }
      - { value: '`html_id`', correct: false }
      - { value: '`html_class`', correct: false }
      - { value: '`html_classes` (for classes) or `html_id` (for IDs) - no single filter for both', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/html_classes'

  - question: 'What is the purpose of the `filter` tag in Twig?'
    answers:
      - { value: 'To apply a filter to the content of a block.', correct: true }
      - { value: 'To define a new custom filter.', correct: false }
      - { value: 'To filter elements from an array.', correct: false }
      - { value: 'To apply multiple filters to a variable.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/apply'

  - question: 'How do you check if a variable `data` is iterable (e.g., an array or a Traversable object) in Twig?'
    answers:
      - { value: '`{% if data is iterable %}`', correct: true }
      - { value: '`{% if data is traversable %}`', correct: false }
      - { value: '`{% if data is loopable %}`', correct: false }
      - { value: '`{% if data.isIterable %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/iterable'

  - question: 'Which Twig filter is used to convert a string to a URL-encoded string?'
    answers:
      - { value: '`url_encode`', correct: true }
      - { value: '`encode_url`', correct: false }
      - { value: '`rawurlencode`', correct: false }
      - { value: '`uri_encode`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/url_encode'

  - question: 'What is the purpose of the `map` filter in Twig?'
    answers:
      - { value: 'To apply a callback function to each item in an array and return a new array with the results.', correct: true }
      - { value: 'To create an associative array (map).', correct: false }
      - { value: 'To filter elements from an array based on a condition.', correct: false }
      - { value: 'To merge multiple arrays into one.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/map'

  - question: 'How do you check if a variable `value` is a string in Twig?'
    answers:
      - { value: '`{% if value is string %}`', correct: true }
      - { value: '`{% if value is_string %}`', correct: false }
      - { value: '`{% if typeof(value) == ''string'' %}`', correct: false }
      - { value: '`{% if value.isString %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/string'

  - question: 'Which Twig filter is used to join elements of an array into a single string with a specified separator?'
    answers:
      - { value: '`join`', correct: true }
      - { value: '`implode`', correct: false }
      - { value: '`concat`', correct: false }
      - { value: '`merge`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/join'

  - question: 'What is the purpose of the `merge` filter in Twig?'
    answers:
      - { value: 'To combine two or more arrays or hashes into a single one.', correct: true }
      - { value: 'To concatenate strings.', correct: false }
      - { value: 'To join elements of an array into a string.', correct: false }
      - { value: 'To combine multiple templates.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/merge'

  - question: 'How do you check if a variable `value` is a number (integer or float) in Twig?'
    answers:
      - { value: '`{% if value is number %}`', correct: true }
      - { value: '`{% if value is numeric %}`', correct: false }
      - { value: '`{% if value is int or value is float %}`', correct: true }
      - { value: '`{% if typeof(value) == ''number'' %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/number'

  - question: 'Which Twig filter is used to format a string by replacing placeholders with provided arguments?'
    answers:
      - { value: '`format`', correct: true }
      - { value: '`sprintf`', correct: false }
      - { value: '`replace`', correct: false }
      - { value: '`interpolate`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/format'

  - question: 'What is the purpose of the `slice` filter in Twig?'
    answers:
      - { value: 'To extract a portion of a string or an array.', correct: true }
      - { value: 'To remove elements from an array.', correct: false }
      - { value: 'To split a string into an array.', correct: false }
      - { value: 'To truncate a string.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/slice'

  - question: 'How do you check if a variable `value` is a boolean in Twig?'
    answers:
      - { value: '`{% if value is boolean %}`', correct: true }
      - { value: '`{% if value is bool %}`', correct: false }
      - { value: '`{% if typeof(value) == ''boolean'' %}`', correct: false }
      - { value: '`{% if value is true or value is false %}`', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/boolean'

  - question: 'Which Twig filter is used to convert a string to a URL-safe string, typically used for filenames or slugs?'
    answers:
      - { value: '`url_encode`', correct: false }
      - { value: '`slug`', correct: true }
      - { value: '`url_friendly`', correct: false }
      - { value: '`transliterate`', correct: false }
    help: |
      'https://symfony.com/doc/current/string'

  - question: 'What is the purpose of the `keys` filter in Twig?'
    answers:
      - { value: 'To get all keys of an array or hash.', correct: true }
      - { value: 'To check if a key exists in an array or hash.', correct: false }
      - { value: 'To sort an array by its keys.', correct: false }
      - { value: 'To get the values of an array or hash.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/keys'

  - question: 'How do you check if a variable `value` is an odd number in Twig?'
    answers:
      - { value: '`{% if value is odd %}`', correct: true }
      - { value: '`{% if value % 2 != 0 %}`', correct: true }
      - { value: '`{% if value is_odd %}`', correct: false }
      - { value: '`{% if value.isOdd %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/odd'

  - question: 'Which Twig filter is used to convert a string to a valid JSON string?'
    answers:
      - { value: '`json_encode`', correct: true }
      - { value: '`to_json`', correct: false }
      - { value: '`serialize`', correct: false }
      - { value: '`json`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/json_encode'

  - question: 'What is the purpose of the `column` filter in Twig?'
    answers:
      - { value: 'To extract a single column (property) from an array of objects or hashes.', correct: true }
      - { value: 'To define a column in an HTML table.', correct: false }
      - { value: 'To sort an array by a specific column.', correct: false }
      - { value: 'To calculate the sum of a column.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/column'

  - question: 'How do you check if a variable `value` is a scalar (string, number, boolean) in Twig?'
    answers:
      - { value: '`{% if value is scalar %}`', correct: true }
      - { value: '`{% if value is_scalar %}`', correct: false }
      - { value: '`{% if typeof(value) in [''string'', ''number'', ''boolean''] %}`', correct: false }
      - { value: '`{% if not (value is array or value is object) %}`', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/scalar'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value?'
    answers:
      - { value: '`escape(''html_attr'')`', correct: true }
      - { value: '`attr_encode`', correct: false }
      - { value: '`html_attribute`', correct: false }
      - { value: '`e(''html_attr'')`', correct: true }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/escape'

  - question: 'What is the purpose of the `first` filter in Twig?'
    answers:
      - { value: 'To get the first character of a string or the first element of an array.', correct: true }
      - { value: 'To check if an element is the first in a loop.', correct: false }
      - { value: 'To get the first word of a string.', correct: false }
      - { value: 'To sort an array in ascending order.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/first'

  - question: 'How do you check if a variable `value` is a float (decimal number) in Twig?'
    answers:
      - { value: '`{% if value is float %}`', correct: true }
      - { value: '`{% if value is decimal %}`', correct: false }
      - { value: '`{% if value is_float %}`', correct: false }
      - { value: '`{% if typeof(value) == ''float'' %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/float'

  - question: 'Which Twig filter is used to convert a string to a valid HTML class attribute value?'
    answers:
      - { value: '`html_classes`', correct: true }
      - { value: '`class_encode`', correct: false }
      - { value: '`escape(''html_class'')`', correct: false }
      - { value: '`e(''html_class'')`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/html_classes'

  - question: 'What is the purpose of the `last` filter in Twig?'
    answers:
      - { value: 'To get the last character of a string or the last element of an array.', correct: true }
      - { value: 'To check if an element is the last in a loop.', correct: false }
      - { value: 'To get the last word of a string.', correct: false }
      - { value: 'To sort an array in descending order.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/last'

  - question: 'How do you check if a variable `value` is an array and not empty in Twig?'
    answers:
      - { value: '`{% if value is not empty and value is array %}`', correct: true }
      - { value: '`{% if value is array and value|length > 0 %}`', correct: true }
      - { value: '`{% if value is not empty_array %}`', correct: false }
      - { value: '`{% if value is array and value.count > 0 %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tags/if'

  - question: 'Which Twig filter is used to convert a string to a valid HTML ID attribute value?'
    answers:
      - { value: '`html_id`', correct: true }
      - { value: '`id_encode`', correct: false }
      - { value: '`escape(''html_id'')`', correct: false }
      - { value: '`e(''html_id'')`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/html_classes'

  - question: 'What is the purpose of the `reverse` filter in Twig?'
    answers:
      - { value: 'To reverse the order of elements in an array or characters in a string.', correct: true }
      - { value: 'To sort an array in descending order.', correct: false }
      - { value: 'To flip keys and values in an associative array.', correct: false }
      - { value: 'To reverse the direction of a loop.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/reverse'

  - question: 'How do you check if a variable `value` is a countable (e.g., array or object implementing Countable) in Twig?'
    answers:
      - { value: '`{% if value is countable %}`', correct: true }
      - { value: '`{% if value is_countable %}`', correct: false }
      - { value: '`{% if value.isCountable %}`', correct: false }
      - { value: '`{% if value|length is defined %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/countable'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value, ensuring proper escaping?'
    answers:
      - { value: '`e(''html_attr'')`', correct: true }
      - { value: '`html_attr_encode`', correct: false }
      - { value: '`escape_attr`', correct: false }
      - { value: '`attribute_safe`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/escape'

  - question: 'What is the purpose of the `sort` filter in Twig?'
    answers:
      - { value: 'To sort the elements of an array.', correct: true }
      - { value: 'To sort a string alphabetically.', correct: false }
      - { value: 'To sort an array by a specific key.', correct: false }
      - { value: 'To shuffle an array.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/sort'

  - question: 'How do you check if a variable `value` is a `Traversable` object (e.g., an Iterator) in Twig?'
    answers:
      - { value: '`{% if value is traversable %}`', correct: true }
      - { value: '`{% if value is iterable %}`', correct: true }
      - { value: '`{% if value is_traversable %}`', correct: false }
      - { value: '`{% if value.isTraversable %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/iterable'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value, specifically for CSS classes?'
    answers:
      - { value: '`html_classes`', correct: true }
      - { value: '`class_attr_encode`', correct: false }
      - { value: '`escape(''css_class'')`', correct: false }
      - { value: '`e(''css_class'')`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/html_classes'

  - question: 'What is the purpose of the `unique` filter in Twig?'
    answers:
      - { value: 'To remove duplicate values from an array.', correct: true }
      - { value: 'To get only unique keys from an array.', correct: false }
      - { value: 'To check if all values in an array are unique.', correct: false }
      - { value: 'To count unique values in an array.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/unique'

  - question: 'How do you check if a variable `value` is an instance of a given class `DateTime` in Twig?'
    answers:
      - { value: '`{% if value is instanceof(''DateTime'') %}`', correct: true }
      - { value: '`{% if value is date_object %}`', correct: false }
      - { value: '`{% if value.instanceof(''DateTime'') %}`', correct: false }
      - { value: '`{% if value is a ''DateTime'' %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/instanceof'

  - question: 'Which Twig filter is used to convert a string to a valid HTML ID attribute value, ensuring proper escaping?'
    answers:
      - { value: '`html_id`', correct: true }
      - { value: '`id_attr_encode`', correct: false }
      - { value: '`escape(''html_id'')`', correct: false }
      - { value: '`e(''html_id'')`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/html_classes'

  - question: 'What is the purpose of the `abs` filter in Twig?'
    answers:
      - { value: 'To get the absolute value of a number.', correct: true }
      - { value: 'To convert a number to an integer.', correct: false }
      - { value: 'To get the absolute path of a file.', correct: false }
      - { value: 'To check if a number is positive.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/abs'

  - question: 'How do you check if a variable `value` is a callable (e.g., a function or method) in Twig?'
    answers:
      - { value: '`{% if value is callable %}`', correct: true }
      - { value: '`{% if value is_callable %}`', correct: false }
      - { value: '`{% if value.isCallable %}`', correct: false }
      - { value: '`{% if is_callable(value) %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/callable'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value, specifically for CSS variables?'
    answers:
      - { value: '`html_cva`', correct: true }
      - { value: '`css_var_encode`', correct: false }
      - { value: '`escape(''css_var'')`', correct: false }
      - { value: '`e(''css_var'')`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/html_cva'

  - question: 'What is the purpose of the `round` filter in Twig?'
    answers:
      - { value: 'To round a number to the nearest integer or a specified precision.', correct: true }
      - { value: 'To round a number up to the nearest integer.', correct: false }
      - { value: 'To round a number down to the nearest integer.', correct: false }
      - { value: 'To format a number with commas.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/round'

  - question: 'How do you check if a variable `value` is a resource (e.g., a file handle) in Twig?'
    answers:
      - { value: '`{% if value is resource %}`', correct: true }
      - { value: '`{% if value is_resource %}`', correct: false }
      - { value: '`{% if value.isResource %}`', correct: false }
      - { value: '`{% if get_resource_type(value) %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/resource'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value, specifically for `data-` attributes?'
    answers:
      - { value: '`e(''html_attr'')`', correct: true }
      - { value: '`data_attr_encode`', correct: false }
      - { value: '`escape(''data_attr'')`', correct: false }
      - { value: '`html_data_attr`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/escape'

  - question: 'What is the purpose of the `url_encode` filter in Twig?'
    answers:
      - { value: 'To URL-encode a string, making it safe for use in URLs.', correct: true }
      - { value: 'To decode a URL-encoded string.', correct: false }
      - { value: 'To convert a string to a URL-friendly slug.', correct: false }
      - { value: 'To validate if a string is a valid URL.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/url_encode'

  - question: 'How do you check if a variable `value` is a test (e.g., a custom Twig test) in Twig?'
    answers:
      - { value: '`{% if value is test %}`', correct: true }
      - { value: '`{% if value is_test %}`', correct: false }
      - { value: '`{% if value.isTest %}`', correct: false }
      - { value: '`{% if is_twig_test(value) %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/test'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value, specifically for `style` attributes?'
    answers:
      - { value: '`e(''css'')`', correct: true }
      - { value: '`style_attr_encode`', correct: false }
      - { value: '`escape(''style'')`', correct: false }
      - { value: '`html_style_attr`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/escape'

  - question: 'What is the purpose of the `raw` filter in Twig?'
    answers:
      - { value: 'To output a variable without any escaping, treating its content as raw HTML.', correct: true }
      - { value: 'To display the raw source code of a template.', correct: false }
      - { value: 'To convert a variable to a string.', correct: false }
      - { value: 'To remove all formatting from a string.', correct: false }
    help: |
      'https://symfony.com/doc/current/templates'

  - question: 'How do you check if a variable `value` is a function (e.g., a custom Twig function) in Twig?'
    answers:
      - { value: '`{% if value is function %}`', correct: true }
      - { value: '`{% if value is_function %}`', correct: false }
      - { value: '`{% if value.isFunction %}`', correct: false }
      - { value: '`{% if is_twig_function(value) %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/function'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value, specifically for `id` attributes?'
    answers:
      - { value: '`html_id`', correct: true }
      - { value: '`id_attr_encode`', correct: false }
      - { value: '`escape(''id'')`', correct: false }
      - { value: '`e(''id'')`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/functions/html_classes'

  - question: 'What is the purpose of the `trim` filter in Twig?'
    answers:
      - { value: 'To remove whitespace from the beginning and end of a string.', correct: true }
      - { value: 'To truncate a string.', correct: false }
      - { value: 'To remove specific characters from a string.', correct: false }
      - { value: 'To remove HTML tags from a string.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/trim'

  - question: 'How do you check if a variable `value` is a macro (e.g., a custom Twig macro) in Twig?'
    answers:
      - { value: '`{% if value is macro %}`', correct: true }
      - { value: '`{% if value is_macro %}`', correct: false }
      - { value: '`{% if value.isMacro %}`', correct: false }
      - { value: '`{% if is_twig_macro(value) %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/macro'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value, specifically for `title` attributes?'
    answers:
      - { value: '`e(''html_attr'')`', correct: true }
      - { value: '`title_attr_encode`', correct: false }
      - { value: '`escape(''title'')`', correct: false }
      - { value: '`html_title_attr`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/escape'

  - question: 'What is the purpose of the `without` filter in Twig?'
    answers:
      - { value: 'To remove specific keys from a hash or elements from an array.', correct: true }
      - { value: 'To filter out elements that do not match a condition.', correct: false }
      - { value: 'To exclude a template from being included.', correct: false }
      - { value: 'To remove whitespace from a string.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/without'

  - question: 'How do you check if a variable `value` is a filter (e.g., a custom Twig filter) in Twig?'
    answers:
      - { value: '`{% if value is filter %}`', correct: true }
      - { value: '`{% if value is_filter %}`', correct: false }
      - { value: '`{% if value.isFilter %}`', correct: false }
      - { value: '`{% if is_twig_filter(value) %}`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/tests/filter'

  - question: 'Which Twig filter is used to convert a string to a valid HTML attribute value, specifically for `alt` attributes of images?'
    answers:
      - { value: '`e(''html_attr'')`', correct: true }
      - { value: '`alt_attr_encode`', correct: false }
      - { value: '`escape(''alt'')`', correct: false }
      - { value: '`html_alt_attr`', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/escape'

  - question: 'What is the purpose of the `json_decode` filter in Twig (if available via an extension)?'
    answers:
      - { value: 'To convert a JSON string into a Twig array or hash.', correct: true }
      - { value: 'To encode a Twig array or hash into a JSON string.', correct: false }
      - { value: 'To validate if a string is valid JSON.', correct: false }
      - { value: 'To pretty-print JSON.', correct: false }
    help: |
      'https://twig.symfony.com/doc/3.x/filters/json_decode'

  - question: 'How do you check if a variable `value` is a constant (e.g., a PHP constant) in Twig?'
    answers:
      - { value: '`{% if value is constant %}`', correct: true }
      - {