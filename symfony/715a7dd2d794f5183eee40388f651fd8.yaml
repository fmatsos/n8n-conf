```yaml
category: Controllers
questions:
  - question: 'Which of the following is the recommended base class for Symfony controllers to gain access to helper methods like `render()` and `redirectToRoute()`?'
    answers:
      - { value: 'Symfony\Component\HttpFoundation\Controller', correct: false }
      - { value: 'Symfony\Bundle\FrameworkBundle\Controller\AbstractController', correct: true }
      - { value: 'Symfony\Component\HttpKernel\Controller\Controller', correct: false }
      - { value: 'Psr\Container\ContainerAwareInterface', correct: false }
    help: |
      'https://symfony.com/doc/current/book/page_creation'
  - question: 'How do you define a route directly on a controller method using PHP attributes in Symfony 7?'
    answers:
      - { value: '```php
#[Route("/blog/{slug}", name: "blog_show")]
public function show(string $slug): Response {}
```', correct: true }
      - { value: '```php
/**
 * @Route("/blog/{slug}", name="blog_show")
 */
public function show(string $slug): Response {}
```', correct: false }
      - { value: '```php
#[Path("/blog/{slug}", name: "blog_show")]
public function show(string $slug): Response {}
```', correct: false }
      - { value: '```php
#[Route(path: "/blog/{slug}", name: "blog_show")]
public function show(string $slug): Response {}
```', correct: true }
    help: |
      'https://symfony.com/doc/current/controller/service'
  - question: 'What is the correct way to make a Symfony controller "invokable" so that the class itself can be used as the controller definition in routing?'
    answers:
      - { value: 'By implementing the `__call()` magic method.', correct: false }
      - { value: 'By extending `Symfony\Component\HttpKernel\Controller\InvokableControllerInterface`.', correct: false }
      - { value: 'By defining the `__invoke()` magic method.', correct: true }
      - { value: 'By adding the `#[Invokable]` attribute to the class.', correct: false }
    help: |
      'https://symfony.com/doc/current/controller/service'
  - question: 'In a Symfony controller, how can you access the `Request` object to retrieve a query parameter named `page` with a default value of `1`?'
    answers:
      - { value: '```php
public function index(): Response
{
    $page = $this->get("request")->query->get("page", 1);
    // ...
}
```', correct: false }
      - { value: '```php
use Symfony\Component\HttpFoundation\Request;

public function index(Request $request): Response
{
    $page = $request->query->get("page", 1);
    // ...
}
```', correct: true }
      - { value: '```php
public function index(int $page = 1): Response
{
    // ...
}
```', correct: false }
      - { value: '```php
use Symfony\Component\HttpFoundation\RequestStack;

public function index(RequestStack $requestStack): Response
{
    $page = $requestStack->getCurrentRequest()->query->get("page", 1);
    // ...
}
```', correct: true }
    help: |
      'https://symfony.com/doc/current/book/controller'
  - question: 'Which method should you use in an `AbstractController` to internally forward a request to another controller action, passing additional arguments?'
    answers:
      - { value: '`$this->redirect()`', correct: false }
      - { value: '`$this->forward()`', correct: true }
      - { value: '`$this->redirectToRoute()`', correct: false }
      - { value: '`$this->render()`', correct: false }
    help: |
      'https://symfony.com/doc/current/controller/forwarding'
  - question: 'How do you correctly generate a 404 Not Found HTTP response from a Symfony controller when a resource is not found?'
    answers:
      - { value: '`return new Response("Not Found", 404);`', correct: false }
      - { value: '`throw new \Exception("Resource not found", 404);`', correct: false }
      - { value: '`throw $this->createNotFoundException("The product does not exist");`', correct: true }
      - { value: '`throw new Symfony\Component\HttpKernel\Exception\NotFoundHttpException("The product does not exist");`', correct: true }
    help: |
      'https://symfony.com/doc/current/book/controller'
  - question: 'To add a flash message named "success" with the content "Item saved successfully!" from a controller extending `AbstractController`, which method should be used?'
    answers:
      - { value: '`$this->get("session")->getFlashBag()->add("success", "Item saved successfully!");`', correct: false }
      - { value: '`$this->addFlash("success", "Item saved successfully!");`', correct: true }
      - { value: '`$this->session->flash("success", "Item saved successfully!");`', correct: false }
      - { value: '`$this->getFlashBag()->add("success", "Item saved successfully!");`', correct: false }
    help: |
      'https://symfony.com/doc/current/book/service_container'
  - question: 'What is the primary purpose of the `#[MapQueryParameter]` attribute in a Symfony controller method argument?'
    answers:
      - { value: 'To automatically validate the query parameter against a set of constraints.', correct: false }
      - { value: 'To automatically map an individual HTTP query parameter to the method argument, including type conversion.', correct: true }
      - { value: 'To define a default value for the query parameter if it is not present in the URL.', correct: false }
      - { value: 'To mark the parameter as optional, allowing the route to match even if it''s missing.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/controller'
  - question: 'How can you automatically inject an uploaded file as a `Symfony\Component\HttpFoundation\File\UploadedFile` object into a controller method argument in Symfony 7?'
    answers:
      - { value: '```php
use Symfony\Component\HttpFoundation\File\UploadedFile;
public function upload(UploadedFile $file): Response {}
```', correct: false }
      - { value: '```php
use Symfony\Component\HttpKernel\Attribute\MapUploadedFile;
use Symfony\Component\HttpFoundation\File\UploadedFile;
public function upload(#[MapUploadedFile] UploadedFile $file): Response {}
```', correct: true }
      - { value: '```php
public function upload(Request $request): Response {
    $file = $request->files->get("file");
}
```', correct: false }
      - { value: '```php
use Symfony\Component\HttpFoundation\File\UploadedFile;
public function upload(#[FileArgument] UploadedFile $file): Response {}
```', correct: false }
    help: |
      'https://symfony.com/doc/current/controller'
  - question: 'What is the default and recommended way to configure Symfony controllers as services, enabling autowiring and autoconfiguration?'
    answers:
      - { value: 'Manually defining each controller as a service in `services.yaml` with explicit arguments.', correct: false }
      - { value: 'Using the `#[AsController]` attribute on the controller class.', correct: true }
      - { value: 'Configuring the `App\Controller\` namespace in `services.yaml` with `resource: ''../src/Controller/''` and `tags: [''controller.service_arguments'']`.', correct: true }
      - { value: 'Extending `Symfony\Component\DependencyInjection\ContainerAwareController`.', correct: false }
    help: |
      'https://symfony.com/doc/current/controller/service'
```