category: Data Validation
questions:
  -
    question: 'Which Composer command is used to install the Symfony Validator component?'
    answers:
      - { value: 'composer install symfony/validator', correct: false }
      - { value: 'composer require symfony/validator', correct: true }
      - { value: 'symfony install validator', correct: false }
      - { value: 'composer add validator', correct: false }
    help: |
      To install the Symfony Validator component, you use the `composer require` command.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_0
  -
    question: 'How do you obtain a basic instance of the Symfony Validator in a standalone PHP script (outside of a Symfony application context)?'
    answers:
      - { value: '$validator = new Validator();', correct: false }
      - { value: '$validator = ValidatorFactory::create();', correct: false }
      - { value: 'use Symfony\\Component\\Validator\\Validation; $validator = Validation::createValidator();', correct: true }
      - { value: '$validator = $container->get(''validator'');', correct: false }
    help: |
      The `Validation::createValidator()` method is used to get a basic validator instance.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator.rst#_snippet_3
  -
    question: 'Which of the following methods can be used to define validation constraints for a Symfony entity?'
    answers:
      - { value: 'PHP attributes (#[Assert\\Constraint])', correct: true }
      - { value: 'YAML configuration files', correct: true }
      - { value: 'XML configuration files', correct: true }
      - { value: 'A static `loadValidatorMetadata` method in the entity class', correct: true }
      - { value: 'Directly in the entity constructor', correct: false }
    help: |
      Symfony supports multiple ways to define validation constraints, including PHP attributes, YAML, XML, and programmatic definition via `loadValidatorMetadata`.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_2
  -
    question: 'Consider the following PHP attribute definition for a property:
```php
class Author
{
    #[Assert\\NotBlank]
    #[Assert\\Length(min: 3)]
    private string $firstName;
}
```
What does this configuration ensure for the `$firstName` property?'
    answers:
      - { value: 'The `$firstName` property must not be null.', correct: false }
      - { value: 'The `$firstName` property must not be an empty string.', correct: true }
      - { value: 'The `$firstName` property must have a length of exactly 3 characters.', correct: false }
      - { value: 'The `$firstName` property must have a length of at least 3 characters.', correct: true }
    help: |
      `NotBlank` ensures the value is not blank (null, empty string, or whitespace only). `Length(min: 3)` ensures the string has at least 3 characters.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_12
  -
    question: 'When validating an object using `ValidatorInterface::validate($value)`, which validation groups are applied by default if no groups are explicitly specified?'
    answers:
      - { value: 'All defined groups', correct: false }
      - { value: 'Only the `Default` group', correct: true }
      - { value: 'No groups are applied, only global constraints', correct: false }
      - { value: 'The `Default` group and any groups defined via `GroupSequenceProviderInterface`', correct: false }
    help: |
      If no groups are provided to the `validate()` method, only constraints belonging to the `Default` group are applied.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_2
  -
    question: 'Which of the following code snippets correctly validates an `$author` object using only the `registration` validation group?'
    answers:
      - { value: '$errors = $validator->validate($author, ''registration'');', correct: false }
      - { value: '$errors = $validator->validate($author, null, ''registration'');', correct: false }
      - { value: '$errors = $validator->validate($author, null, [''registration'']);', correct: true }
      - { value: '$errors = $validator->validate($author, groups: [''registration'']);', correct: true }
    help: |
      The third argument to `validate()` is for groups and accepts an array or a string. For a single group, an array is preferred or a string.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_1
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_2
  -
    question: 'What is the purpose of the `#[Assert\\Valid]` attribute in Symfony validation?'
    answers:
      - { value: 'It marks a property as required, similar to `#[Assert\\NotBlank]`.', correct: false }
      - { value: 'It ensures that the value of the property is a valid PHP object.', correct: false }
      - { value: 'It recursively validates the properties of a nested object or elements of a collection.', correct: true }
      - { value: 'It validates that the property value adheres to a specific data type.', correct: false }
    help: |
      The `Valid` constraint is used to trigger validation on nested objects or collections.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_5
  -
    question: 'Consider an `Author` entity with an `Address` property:
```php
// src/Entity/Author.php
namespace App\\Entity;

use Symfony\\Component\\Validator\\Constraints as Assert;

class Author
{
    #[Assert\\Valid]
    protected Address $address;
}
```
If the `Address` object has validation constraints, when will they be checked?'
    answers:
      - { value: 'Only if the `Author` object itself has no validation errors.', correct: false }
      - { value: 'Only if the `Address` property is explicitly validated in the controller.', correct: false }
      - { value: 'When the `Author` object is validated, the `Address` object will also be validated recursively.', correct: true }
      - { value: 'The `#[Assert\\Valid]` attribute is ignored for nested objects.', correct: false }
    help: |
      The `Valid` constraint ensures that when the parent object is validated, any nested objects marked with `Valid` are also validated.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_5
  -
    question: 'Which method of `ConstraintValidator` should be implemented to contain the core logic for a custom validation constraint?'
    answers:
      - { value: '`isValid()`', correct: false }
      - { value: '`validate()`', correct: true }
      - { value: '`check()`', correct: false }
      - { value: '`apply()`', correct: false }
    help: |
      The `validate()` method is where the custom validation logic resides within a `ConstraintValidator`.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_4
  -
    question: 'Inside a custom constraint validator''s `validate()` method, how do you add a validation violation?'
    answers:
      - { value: '$this->addError(''message'');', correct: false }
      - { value: '$this->context->addViolation(''message'');', correct: false }
      - { value: '$this->context->buildViolation($constraint->message)->addViolation();', correct: true }
      - { value: '$this->violationBuilder->add(''message'');', correct: false }
    help: |
      The `context` property of the validator provides the `buildViolation()` method, which is used to create and add a violation.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'What is the purpose of `GroupSequenceProviderInterface` in Symfony validation?'
    answers:
      - { value: 'To define a fixed order of validation groups for an object.', correct: false }
      - { value: 'To dynamically determine the validation groups to apply based on the object''s state.', correct: true }
      - { value: 'To allow multiple validation groups to be applied simultaneously without order.', correct: false }
      - { value: 'To provide a list of all available validation groups in the application.', correct: false }
    help: |
      `GroupSequenceProviderInterface` allows an object to define its own validation group sequence dynamically.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_4
  -
    question: 'Consider the following `GroupSequence` definition:
```php
#[Assert\\GroupSequence(['User', 'Strict'])]
class User implements UserInterface
{
    // ...
}
```
If a violation occurs in the `User` group, what happens to the `Strict` group validation?'
    answers:
      - { value: 'The `Strict` group will still be validated.', correct: false }
      - { value: 'The validation process will stop, and the `Strict` group will not be validated.', correct: true }
      - { value: 'The `Strict` group will be validated, but its violations will be ignored.', correct: false }
      - { value: 'The `User` group will be re-validated after the `Strict` group.', correct: false }
    help: |
      In a `GroupSequence`, validation proceeds sequentially. If a violation occurs in an earlier group, subsequent groups are not validated.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_0
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_4
  -
    question: 'How can you validate a scalar value (e.g., an email string) directly using the Symfony Validator component, without an entity object?'
    answers:
      - { value: 'You cannot validate scalar values directly; they must be part of an object.', correct: false }
      - { value: 'By passing the scalar value and a `Constraint` object directly to `ValidatorInterface::validate()`.', correct: true }
      - { value: 'By wrapping the scalar value in a dummy object and then validating the object.', correct: false }
      - { value: 'Using `Validation::createValidator()->validateScalar($email, new Assert\\Email());`', correct: false }
    help: |
      The `validate()` method can accept a scalar value as its first argument and a constraint as its second.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_0
  -
    question: 'Which built-in constraint is used to validate that a property''s value is one of a predefined set of options?'
    answers:
      - { value: '`#[Assert\\InList]`', correct: false }
      - { value: '`#[Assert\\Option]`', correct: false }
      - { value: '`#[Assert\\Choice]`', correct: true }
      - { value: '`#[Assert\\Enum]`', correct: false }
    help: |
      The `Choice` constraint validates that a value is one of the given choices.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_10
  -
    question: 'What is the default behavior of the `match` option for the `#[Assert\\Regex]` constraint?'
    answers:
      - { value: 'It is `false`, meaning validation passes if the string does NOT match the pattern.', correct: false }
      - { value: 'It is `true`, meaning validation passes if the string matches the pattern.', correct: true }
      - { value: 'It depends on the PHP version.', correct: false }
      - { value: 'It must always be explicitly set.', correct: false }
    help: |
      By default, `match` is `true`, meaning the value must match the regular expression.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Regex.rst#_snippet_5
  -
    question: 'Which of the following is a valid way to define a `Length` constraint that requires a string to be exactly 20 characters long using PHP attributes?'
    answers:
      - { value: '`#[Assert\\Length(20)]`', correct: true }
      - { value: '`#[Assert\\Length(exact: 20)]`', correct: false }
      - { value: '`#[Assert\\Length(exactly: 20)]`', correct: true }
      - { value: '`#[Assert\\Length(min: 20, max: 20)]`', correct: true }
    help: |
      The `exactly` option can be used, or simply passing the integer as the first argument. `min` and `max` with the same value also achieve this.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_3
  -
    question: 'When using `#[Assert\\Length(min: 5)]`, what is the validation result if the value is `null`?'
    answers:
      - { value: 'A violation is triggered because `null` does not meet the minimum length.', correct: false }
      - { value: 'The validation passes, as `null` values are generally considered valid by length constraints unless `NotBlank` is also used.', correct: true }
      - { value: 'An `UnexpectedValueException` is thrown.', correct: false }
      - { value: 'The validator component converts `null` to an empty string before validation.', correct: false }
    help: |
      Null values are considered valid by the `Length` constraint, as validators are typically triggered only if the value is not null.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_7
  -
    question: 'What is the purpose of the `debug:validator` console command in Symfony?'
    answers:
      - { value: 'To run a validation check on a specific object and display all violations.', correct: false }
      - { value: 'To list all validation constraints applied to a given class or all classes in a directory.', correct: true }
      - { value: 'To generate boilerplate code for custom validation constraints.', correct: false }
      - { value: 'To clear the validator cache.', correct: false }
    help: |
      The `debug:validator` command helps inspect the validation rules configured for your classes.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_14
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_16
  -
    question: 'Which constraint is specifically designed to validate that a value is a valid CSS color string?'
    answers:
      - { value: '`#[Assert\\Color]`', correct: false }
      - { value: '`#[Assert\\HexColor]`', correct: false }
      - { value: '`#[Assert\\CssColor]`', correct: true }
      - { value: '`#[Assert\\RgbColor]`', correct: false }
    help: |
      The `CssColor` constraint validates CSS color formats.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CssColor.rst#_snippet_1
  -
    question: 'When implementing a custom constraint validator, what type of exception should be thrown if the `validate()` method receives a value of an unexpected type?'
    answers:
      - { value: '`\\InvalidArgumentException`', correct: false }
      - { value: '`Symfony\\Component\\Validator\\Exception\\UnexpectedTypeException`', correct: true }
      - { value: '`\\RuntimeException`', correct: false }
      - { value: '`Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException`', correct: false }
    help: |
      `UnexpectedTypeException` should be thrown if the constraint itself is not of the expected type, and `UnexpectedValueException` if the value being validated is of an unexpected type.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_4
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'How can you dynamically determine validation groups for a Symfony Form based on the submitted data?'
    answers:
      - { value: 'By setting the `validation_groups` option to a string containing comma-separated group names.', correct: false }
      - { value: 'By implementing `GroupSequenceProviderInterface` on the form type.', correct: false }
      - { value: 'By setting the `validation_groups` option to a `Closure` that receives the `FormInterface` object.', correct: true }
      - { value: 'By overriding the `getValidationGroups()` method in the form type.', correct: false }
    help: |
      The `validation_groups` option in form options can accept a Closure for dynamic group selection.
      https://github.com/symfony/symfony-docs/blob/7.3/form/data_based_validation.rst#_snippet_1
  -
    question: 'What is the purpose of the `otherwise` option in the `#[Assert\\When]` constraint?'
    answers:
      - { value: 'It defines constraints that are applied if the main `expression` evaluates to `true`.', correct: false }
      - { value: 'It defines constraints that are applied if the main `expression` evaluates to `false` (or a falsey value).', correct: true }
      - { value: 'It specifies an alternative message if the main constraints fail.', correct: false }
      - { value: 'It is used for defining a fallback validation group.', correct: false }
    help: |
      The `otherwise` option specifies constraints to apply when the `expression` is falsey.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_3
  -
    question: 'When using `#[Assert\\When]` with an `expression` that is a string, which variables are available within the expression context in Symfony 7.2 and later?'
    answers:
      - { value: '`this` (the object being validated)', correct: true }
      - { value: '`value` (the value of the property being validated)', correct: true }
      - { value: '`container` (the service container)', correct: false }
      - { value: '`context` (the `ExecutionContextInterface` object)', correct: true }
    help: |
      The `expression` option provides `this`, `value`, and `context` variables.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_4
  -
    question: 'How can you apply a `Callback` constraint to an entire class using the `loadValidatorMetadata` static method?'
    answers:
      - { value: '$metadata->addPropertyConstraint(''this'', new Assert\\Callback(''validate''));', correct: false }
      - { value: '$metadata->addMethodConstraint(''validate'', new Assert\\Callback());', correct: false }
      - { value: '$metadata->addConstraint(new Assert\\Callback(''validate''));', correct: true }
      - { value: '$metadata->addGetterConstraint(''validate'', new Assert\\Callback());', correct: false }
    help: |
      To apply a `Callback` constraint to the class itself, use `addConstraint()` on the `ClassMetadata` object.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#_snippet_4
  -
    question: 'What is the primary benefit of using `Validation::createCallable()` when integrating the Symfony Validator with other components like `OptionsResolver` or `QuestionHelper`?'
    answers:
      - { value: 'It allows for direct validation of form fields without defining constraints on entities.', correct: false }
      - { value: 'It returns a `Closure` that can be used as a callable validator, making integration seamless.', correct: true }
      - { value: 'It automatically registers all constraints defined in YAML or XML files.', correct: false }
      - { value: 'It provides a way to mock the validator for testing purposes.', correct: false }
    help: |
      `createCallable()` returns a closure suitable for use in contexts that expect a callable validator.
      https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#_snippet_19
      https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#_snippet_24
  -
    question: 'When validating a collection (e.g., an array of objects) with `#[Assert\\Count(min: 1)]`, what does the `minMessage` option allow you to customize?'
    answers:
      - { value: 'The message displayed if the collection has too many elements.', correct: false }
      - { value: 'The message displayed if the collection has fewer elements than `min`.', correct: true }
      - { value: 'The message displayed if any element within the collection fails validation.', correct: false }
      - { value: 'The message displayed if the collection is not an array.', correct: false }
    help: |
      `minMessage` is specifically for when the collection size is less than the `min` value.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#_snippet_2
  -
    question: 'How can you set a custom translation domain for a specific validation violation within a custom validator?'
    answers:
      - { value: 'By calling `$this->context->setTranslationDomain(''my_domain'');` before adding the violation.', correct: false }
      - { value: 'By passing the domain as an option to the constraint definition.', correct: false }
      - { value: 'By chaining `setTranslationDomain()` to the `buildViolation()` call: `$this->context->buildViolation(...)->setTranslationDomain(''my_domain'')->addViolation();`', correct: true }
      - { value: 'Translation domains are globally configured and cannot be set per violation.', correct: false }
    help: |
      The `setTranslationDomain()` method can be chained to the violation builder.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#_snippet_7
  -
    question: 'What is the primary use case for the `#[Assert\\Collection]` constraint?'
    answers:
      - { value: 'To validate that a value is an instance of `\\Traversable`.', correct: false }
      - { value: 'To validate the structure and content of an array or `\\Traversable` object, including nested constraints.', correct: true }
      - { value: 'To ensure all elements in an array are of the same type.', correct: false }
      - { value: 'To count the number of elements in a collection.', correct: false }
    help: |
      The `Collection` constraint is powerful for validating the structure of arrays or objects implementing `Traversable`.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_1
  -
    question: 'When using `#[Assert\\Valid]` on a `\\Traversable` property, what is the default value of the `traverse` option, and what does it imply?'
    answers:
      - { value: '`false`, meaning elements are not validated by default.', correct: false }
      - { value: '`true`, meaning all containing values will be validated recursively.', correct: true }
      - { value: '`true`, but only if the `Traversable` is an array.', correct: false }
      - { value: 'It is ignored; `Traversable` objects are never validated by `Valid`.', correct: false }
    help: |
      The `traverse` option for `Valid` is `true` by default for `Traversable` objects, ensuring nested validation. Arrays are always traversed.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_7
  -
    question: 'Which of the following is a valid way to apply a `NotBlank` constraint to the `name` property of an `Author` entity using YAML configuration?'
    answers:
      - { value: '''App\\Entity\\Author: properties: name: - NotBlank: ~''', correct: true }
      - { value: '''App\\Entity\\Author: name: - NotBlank: true''', correct: false }
      - { value: '''properties: App\\Entity\\Author.name: - NotBlank: {}''', correct: false }
      - { value: '''App\\Entity\\Author: constraints: name: NotBlank''', correct: false }
    help: |
      YAML configuration for properties uses the `properties` key, followed by the property name and a list of constraints.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_2
  -
    question: 'When integrating Symfony Forms with the Validator component, which extension needs to be added to the `FormFactoryBuilder`?'
    answers:
      - { value: '`FormValidationExtension`', correct: false }
      - { value: '`ValidatorExtension`', correct: true }
      - { value: '`ValidationFormExtension`', correct: false }
      - { value: '`Symfony\\Component\\Form\\Extension\\Validator\\ValidatorExtension`', correct: true }
    help: |
      The `ValidatorExtension` is crucial for enabling validation in Symfony Forms.
      https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#_snippet_18
  -
    question: 'What is the purpose of `Symfony\\Component\\Validator\\Validation::createIsValidCallable()`?'
    answers:
      - { value: 'It creates a callable that throws a `ValidationFailedException` if validation fails.', correct: false }
      - { value: 'It creates a callable that returns `true` on success and `false` on failure.', correct: true }
      - { value: 'It creates a callable that returns a `ConstraintViolationListInterface` object.', correct: false }
      - { value: 'It is deprecated in Symfony 7.', correct: false }
    help: |
      `createIsValidCallable()` returns a closure that returns `false` when constraints are not matched.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_8
  -
    question: 'Which of the following is true regarding `#[Assert\\Email]` constraint in Symfony?'
    answers:
      - { value: 'It only validates the format of the email address, not its existence.', correct: true }
      - { value: 'It requires an internet connection to verify the email domain.', correct: false }
      - { value: 'It can be configured to check for specific email providers.', correct: false }
      - { value: 'It automatically cleans the email string before validation.', correct: false }
    help: |
      The `Email` constraint primarily validates the format. (General knowledge, not explicitly in provided snippets, but a common understanding of this constraint).
  -
    question: 'What is the correct way to pass an error message to `buildViolation()` in a custom validator that can be translated?'
    answers:
      - { value: '$this->context->buildViolation(''my.message.key'')->addViolation();', correct: false }
      - { value: '$this->context->buildViolation(new TranslatableMessage(''my.message.key''))->addViolation();', correct: true }
      - { value: '$this->context->buildViolation($constraint->message)->addViolation();', correct: true }
      - { value: '$this->context->buildViolation(Translator::trans(''my.message.key''))->addViolation();', correct: false }
    help: |
      You can pass a `TranslatableMessage` object or the constraint's message property (which can be a TranslatableMessage or a string that will be translated by default).
      https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#_snippet_5
  -
    question: 'When using `#[Assert\\Length(max: 5)]`, what is the validation result if the value''s length is 6 characters?'
    answers:
      - { value: 'A violation is triggered.', correct: true }
      - { value: 'The value is truncated to 5 characters.', correct: false }
      - { value: 'The validation passes.', correct: false }
      - { value: 'An `InvalidArgumentException` is thrown.', correct: false }
    help: |
      The `max` option means validation fails if the length is greater than the specified maximum.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_5
  -
    question: 'In a Symfony application, how is the `ValidatorInterface` typically injected into a controller or service?'
    answers:
      - { value: 'Via constructor injection or method injection (e.g., `__construct(ValidatorInterface $validator)`).', correct: true }
      - { value: 'By calling `new ValidatorInterface()` directly.', correct: false }
      - { value: 'By using `$this->get(''validator'')` in a controller (if extending `AbstractController`).', correct: false }
      - { value: 'It is automatically available as a global variable.', correct: false }
    help: |
      Symfony's dependency injection container automatically provides the `ValidatorInterface` service.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_3
  -
    question: 'What is the correct way to define a custom validation method `isPasswordSafe()` as a getter constraint using `loadValidatorMetadata`?'
    answers:
      - { value: '$metadata->addPropertyConstraint(''passwordSafe'', new Assert\\IsTrue());', correct: false }
      - { value: '$metadata->addGetterConstraint(''passwordSafe'', new Assert\\IsTrue());', correct: true }
      - { value: '$metadata->addMethodConstraint(''isPasswordSafe'', new Assert\\IsTrue());', correct: false }
      - { value: '$metadata->addConstraint(new Assert\\IsTrue(''isPasswordSafe''));', correct: false }
    help: |
      `addGetterConstraint` is used for validating values returned by getter methods.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_0
  -
    question: 'When defining validation constraints using XML, what is the root element of the configuration file?'
    answers:
      - { value: '`<validation-mapping>`', correct: false }
      - { value: '`<constraints>`', correct: false }
      - { value: '`<constraint-mapping>`', correct: true }
      - { value: '`<symfony-validation>`', correct: false }
    help: |
      The root element for XML validation configuration is `constraint-mapping`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_3
  -
    question: 'Which of the following is NOT a valid way to define validation constraints in Symfony?'
    answers:
      - { value: 'Using annotations (deprecated in PHP 8, but still supported for compatibility)', correct: false }
      - { value: 'Using JSON files', correct: true }
      - { value: 'Using PHP attributes', correct: false }
      - { value: 'Using YAML files', correct: false }
    help: |
      Symfony validation supports PHP attributes, YAML, XML, and programmatic `loadValidatorMetadata`, but not JSON files for constraint definition.
  -
    question: 'What is the purpose of the `payload` argument in a custom validator''s `validate` method or when building a violation?'
    answers:
      - { value: 'It contains the raw HTTP request data.', correct: false }
      - { value: 'It allows passing arbitrary custom data to the violation for later processing (e.g., by error handlers).', correct: true }
      - { value: 'It holds the validated value.', correct: false }
      - { value: 'It is used to specify the validation group.', correct: false }
    help: |
      The `payload` can carry custom data associated with a violation. (General knowledge, not explicitly in provided snippets, but a common feature of the validator).
  -
    question: 'If you have a `User` entity and want to validate its `creditCard` property only when the user is a `Premium` user, which validation concept should you use?'
    answers:
      - { value: 'Validation scopes', correct: false }
      - { value: 'Validation groups', correct: true }
      - { value: 'Custom callback validators', correct: false }
      - { value: 'Group sequence', correct: false }
    help: |
      Validation groups allow applying constraints conditionally based on the context.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_2
  -
    question: 'What is the difference between `Validation::createCallable()` and `Validation::createIsValidCallable()`?'
    answers:
      - { value: '`createCallable()` returns a closure that throws an exception on failure, while `createIsValidCallable()` returns a closure that returns `false` on failure.', correct: true }
      - { value: '`createCallable()` is for object validation, `createIsValidCallable()` is for scalar validation.', correct: false }
      - { value: '`createCallable()` is deprecated, `createIsValidCallable()` is the modern approach.', correct: false }
      - { value: 'There is no functional difference; they are aliases.', correct: false }
    help: |
      `createCallable()` throws `ValidationFailedException`, while `createIsValidCallable()` returns a boolean.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_8
  -
    question: 'When defining a `GroupSequence` using PHP attributes, which attribute is used at the class level?'
    answers:
      - { value: '`#[Assert\\GroupSequenceProvider]`', correct: false }
      - { value: '`#[Assert\\ValidationSequence]`', correct: false }
      - { value: '`#[Assert\\GroupSequence]`', correct: true }
      - { value: '`#[Assert\\Sequence]`', correct: false }
    help: |
      The `#[Assert\\GroupSequence]` attribute is used to define a group sequence directly on the class.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_0
  -
    question: 'What is the correct way to handle validation errors and return them as a string in a Symfony controller?'
    answers:
      - { value: '`return new Response($errors->toString());`', correct: false }
      - { value: '`return new Response((string) $errors);`', correct: true }
      - { value: '`return new Response(json_encode($errors));`', correct: false }
      - { value: '`return new Response($errors->getMessages());`', correct: false }
    help: |
      The `ConstraintViolationList` object has a `__toString()` method that provides a readable string representation of errors.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_4
  -
    question: 'Which of the following built-in constraints can be used to validate that a string contains only alphanumeric characters?'
    answers:
      - { value: '`#[Assert\\Alphanumeric]`', correct: false }
      - { value: '`#[Assert\\Regex(pattern: "/^[a-zA-Z0-9]+$/")]`', correct: true }
      - { value: '`#[Assert\\Type(''string'')]` combined with `#[Assert\\Length]`', correct: false }
      - { value: '`#[Assert\\Ascii]`', correct: false }
    help: |
      While there isn't a direct `Alphanumeric` constraint, the `Regex` constraint can achieve this by specifying the appropriate pattern.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'When using `#[Assert\\When]` with a `Closure` for the `expression` option (Symfony 7.3+), what is passed as the first argument to the closure?'
    answers:
      - { value: 'The validated value of the property.', correct: false }
      - { value: 'The `ExecutionContextInterface` object.', correct: false }
      - { value: 'The object being validated.', correct: true }
      - { value: 'The constraint instance.', correct: false }
    help: |
      For a Closure expression, the first argument is the object being validated.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_4
  -
    question: 'What is the purpose of `atPath()` when building a validation violation using `buildViolation()`?'
    answers:
      - { value: 'To specify the exact file path where the violation occurred.', correct: false }
      - { value: 'To set the property path relative to the root object where the violation occurred.', correct: true }
      - { value: 'To define the URL path where the error message should be displayed.', correct: false }
      - { value: 'To indicate the depth of the nested object where the violation was found.', correct: false }
    help: |
      `atPath()` sets the property path for the violation, indicating which specific field caused the error.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_11
  -
    question: 'Which of the following is a valid way to define a `Length` constraint with a minimum of 5 and maximum of 20 characters using `loadValidatorMetadata`?'
    answers:
      - { value: '''$metadata->addPropertyConstraint(''name'', new Assert\\Length(min: 5, max: 20));''', correct: true }
      - { value: '''$metadata->addPropertyConstraint(''name'', new Assert\\Length([''min'' => 5, ''max'' => 20]));''', correct: false }
      - { value: '''$metadata->addPropertyConstraint(''name'', new Assert\\Length()->setMin(5)->setMax(20));''', correct: false }
      - { value: '''$metadata->addPropertyConstraint(''name'', new Assert\\Length(options: [''min'' => 5, ''max'' => 20]));''', correct: false }
    help: |
      Named arguments are the standard way to pass options to constraints in PHP attributes and when instantiating them.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#_snippet_1
  -
    question: 'When should you use `#[Assert\\When]` instead of `GroupSequenceProviderInterface`?'
    answers:
      - { value: '`#[Assert\\When]` is for class-level conditional validation, while `GroupSequenceProviderInterface` is for property-level.', correct: false }
      - { value: '`#[Assert\\When]` is for conditional application of constraints on a specific property or method, while `GroupSequenceProviderInterface` determines the overall validation flow for an object.', correct: true }
      - { value: '`GroupSequenceProviderInterface` is deprecated in favor of `#[Assert\\When]`.', correct: false }
      - { value: 'They are interchangeable; it''s a matter of preference.', correct: false }
    help: |
      `Assert\\When` applies constraints conditionally to a specific element based on an expression, whereas `GroupSequenceProviderInterface` defines the sequence of groups for the entire object.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst
  -
    question: 'What is the significance of the `Default` validation group?'
    answers:
      - { value: 'It is a special group that always contains all constraints, regardless of explicit group assignment.', correct: false }
      - { value: 'It is the group applied when no specific validation groups are provided to the validator.', correct: true }
      - { value: 'It is a reserved keyword and cannot be used for custom constraints.', correct: false }
      - { value: 'It ensures that validation stops at the first error found.', correct: false }
    help: |
      The `Default` group is used by default when no other groups are specified.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst
  -
    question: 'If you have a form and want to ensure that the `Default` validation group is *always* included along with dynamically selected groups, how would you configure the `validation_groups` option?'
    answers:
      - { value: '''`validation_groups` => ['Default', function (FormInterface $form) { /* ... */ return ['person']; }]''', correct: false }
      - { value: '''`validation_groups` => function (FormInterface $form) { $data = $form->getData(); if (Client::TYPE_PERSON == $data->getType()) { return ['Default', 'person']; } return ['Default', 'company']; }''', correct: true }
      - { value: '''`validation_groups` => ['Default', 'dynamic_group_provider']''', correct: false }
      - { value: '''`validation_groups` => new GroupSequence(['Default', 'dynamic_groups'])''', correct: false }
    help: |
      The Closure should explicitly return `Default` along with any other desired groups.
      https://github.com/symfony/symfony-docs/blob/7.3/form/data_based_validation.rst#_snippet_2
  -
    question: 'What does the `{{ limit }}` parameter represent in the `minMessage` of a `Length` constraint?'
    answers:
      - { value: 'The actual length of the invalid value.', correct: false }
      - { value: 'The expected minimum length defined in the constraint.', correct: true }
      - { value: 'The maximum allowed length.', correct: false }
      - { value: 'A unique identifier for the violation.', correct: false }
    help: |
      `{{ limit }}` refers to the `min` value set in the constraint.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_8
  -
    question: 'Which of the following is true about the `Valid` constraint''s interaction with validation groups?'
    answers:
      - { value: 'It only validates nested objects if they belong to the `Default` group.', correct: false }
      - { value: 'It always applies by default, even if you specify a group when calling the validator, unless you explicitly define the `groups` option for `Valid`.', correct: true }
      - { value: 'It implicitly inherits the validation groups from the parent object.', correct: false }
      - { value: 'It is ignored if the parent object is validated with a specific group.', correct: false }
    help: |
      The `Valid` constraint has a unique behavior regarding groups; it's always applied unless its own `groups` option is set.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_7
  -
    question: 'When writing a unit test for a custom constraint validator, which base class should your test extend?'
    answers:
      - { value: '`PHPUnit\\Framework\\TestCase`', correct: false }
      - { value: '`Symfony\\Component\\Validator\\Test\\ConstraintValidatorTestCase`', correct: true }
      - { value: '`Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase`', correct: false }
      - { value: '`Symfony\\Component\\Validator\\Test\\ValidatorTestCase`', correct: false }
    help: |
      `ConstraintValidatorTestCase` provides utilities for testing custom validators.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_13
  -
    question: 'What is the purpose of the `message` option in the `#[Assert\\Choice]` constraint when `multiple` is set to `false`?'
    answers:
      - { value: 'It defines the message shown when multiple choices are selected but not allowed.', correct: false }
      - { value: 'It defines the message shown when the selected value is not among the valid choices.', correct: true }
      - { value: 'It specifies a custom message for each invalid choice.', correct: false }
      - { value: 'It is used to translate the default error message.', correct: false }
    help: |
      The `message` option provides the error text when a single value is not found in the choices.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#_snippet_7
  -
    question: 'Which method is used on `ClassMetadata` to add a constraint to a specific property of a class?'
    answers:
      - { value: '`addConstraint()`', correct: false }
      - { value: '`addPropertyConstraint()`', correct: true }
      - { value: '`setPropertyConstraint()`', correct: false }
      - { value: '`addMemberConstraint()`', correct: false }
    help: |
      `addPropertyConstraint()` is specifically for adding constraints to properties.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#_snippet_0
  -
    question: 'When is a `ConstraintViolationList` object considered to have no errors?'
    answers:
      - { value: 'When its `count()` method returns `0`.', correct: true }
      - { value: 'When its `isEmpty()` method returns `true`.', correct: true }
      - { value: 'When it evaluates to `false` in a boolean context.', correct: false }
      - { value: 'When its `getViolations()` method returns an empty array.', correct: false }
    help: |
      Checking `count() > 0` or `!$errors->count()` is the standard way to check for violations.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_3
  -
    question: 'What is the role of `ExecutionContextInterface` when implementing a custom callback validator?'
    answers:
      - { value: 'It provides access to the validated value and the constraint options.', correct: false }
      - { value: 'It allows building and adding validation violations to the list of errors.', correct: true }
      - { value: 'It manages the lifecycle of the validator service.', correct: false }
      - { value: 'It is used to define the validation groups for the callback.', correct: false }
    help: |
      `ExecutionContextInterface` provides the context for validation, including the ability to add violations.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#_snippet_3
  -
    question: 'Which of the following describes a "validation scope" in Symfony?'
    answers:
      - { value: 'The specific entity or form being validated.', correct: false }
      - { value: 'The context in which validation is performed, such as property-level, getter-level, or class-level validation.', correct: true }
      - { value: 'The set of validation groups applied during a specific validation run.', correct: false }
      - { value: 'The range of values allowed for a given constraint.', correct: false }
    help: |
      Validation scopes refer to where constraints are applied: properties, getters, or the class itself.
      https://symfony.com/doc/current/validation/custom_constraint.html#class-constraint-vs-property-constraint (Conceptual, not directly in snippets, but implied by `addPropertyConstraint`, `addGetterConstraint`, `addConstraint`).
  -
    question: 'What is the primary difference between a property constraint and a class constraint?'
    answers:
      - { value: 'Property constraints validate individual properties, while class constraints validate the object as a whole, often based on relationships between properties.', correct: true }
      - { value: 'Property constraints are defined in YAML, class constraints in PHP attributes.', correct: false }
      - { value: 'Property constraints are always applied, class constraints only with specific validation groups.', correct: false }
      - { value: 'Class constraints are faster to execute than property constraints.', correct: false }
    help: |
      Property constraints check individual property values. Class constraints (like `Callback` on the class level) check the object's overall state.
      https://symfony.com/doc/current/validation/custom_constraint.html#class-constraint-vs-property-constraint (Conceptual, implied by snippets like `addPropertyConstraint` vs `addConstraint(new Assert\\Callback())`).
  -
    question: 'Which constraint would you use to ensure that a collection (e.g., an array) contains at least 3 elements and at most 10 elements?'
    answers:
      - { value: '`#[Assert\\Length(min: 3, max: 10)]`', correct: false }
      - { value: '`#[Assert\\Count(min: 3, max: 10)]`', correct: true }
      - { value: '`#[Assert\\Collection(min: 3, max: 10)]`', correct: false }
      - { value: '`#[Assert\\Range(min: 3, max: 10)]`', correct: false }
    help: |
      The `Count` constraint is specifically for validating the number of elements in a collection.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#_snippet_2
  -
    question: 'What is the correct way to render a Twig template and pass validation errors to it in a Symfony controller?'
    answers:
      - { value: '`return $this->render(''template.html.twig'', [''errors'' => $errors->toArray()]);`', correct: false }
      - { value: '`return $this->render(''template.html.twig'', [''errors'' => $errors]);`', correct: true }
      - { value: '`return $this->render(''template.html.twig'', [''violations'' => $errors->getViolations()]);`', correct: false }
      - { value: '`return $this->render(''template.html.twig'', [''validationErrors'' => (string) $errors]);`', correct: false }
    help: |
      The `ConstraintViolationList` object can be passed directly to Twig, where it can be iterated over.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_6
  -
    question: 'Consider a scenario where you have a custom constraint `#[App\\Validator\\ContainsAlphanumeric]` and its validator `ContainsAlphanumericValidator`. If the `validate` method receives a non-string value, what should happen according to Symfony best practices for custom validators?'
    answers:
      - { value: 'It should silently ignore the value and return.', correct: false }
      - { value: 'It should convert the value to a string before validation.', correct: false }
      - { value: 'It should throw an `UnexpectedValueException`.', correct: true }
      - { value: 'It should add a violation indicating an invalid type.', correct: false }
    help: |
      Custom validators should throw `UnexpectedValueException` if they cannot handle the passed type.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'What is the purpose of the `setParameter()` method when building a violation using `buildViolation()`?'
    answers:
      - { value: 'To set the value of the property that caused the violation.', correct: false }
      - { value: 'To replace placeholders in the error message with dynamic values.', correct: true }
      - { value: 'To define the severity level of the violation (e.g., warning, error).', correct: false }
      - { value: 'To associate the violation with a specific validation group.', correct: false }
    help: |
      `setParameter()` is used to inject dynamic data into translatable error messages.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'Which of the following constraints would you use to ensure that a string is a valid URL?'
    answers:
      - { value: '`#[Assert\\Url]`', correct: true }
      - { value: '`#[Assert\\Link]`', correct: false }
      - { value: '`#[Assert\\WebAddress]`', correct: false }
      - { value: '`#[Assert\\Uri]`', correct: false }
    help: |
      The `Url` constraint is specifically designed for validating URLs. (General knowledge, common built-in constraint).
  -
    question: 'What is the correct way to define a custom callback method `doComplexValidation` for conditional validation using `#[Assert\\When]` and `loadValidatorMetadata`?'
    answers:
      - { value: '''$metadata->addPropertyConstraint(''type'', new Assert\\When(expression: ''value == "percent"'', constraints: [new Assert\\Callback(''doComplexValidation'')],));''', correct: true }
      - { value: '''$metadata->addPropertyConstraint(''type'', new Assert\\When(expression: ''value == "percent"'', callback: ''doComplexValidation'',));''', correct: false }
      - { value: '''$metadata->addPropertyConstraint(''type'', new Assert\\When(expression: ''value == "percent"'', method: ''doComplexValidation'',));''', correct: false }
      - { value: '''$metadata->addPropertyConstraint(''type'', new Assert\\When(expression: ''value == "percent"'', validator: new Assert\\Callback(''doComplexValidation''),));''', correct: false }
    help: |
      The `Callback` constraint is placed within the `constraints` option of `Assert\\When`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_8
  -
    question: 'If you have a `User` entity with a `password` property and you want to ensure it''s not blank and has a minimum length of 7 characters, which constraints would you apply?'
    answers:
      - { value: '`#[Assert\\NotNull]`, `#[Assert\\MinLength(7)]`', correct: false }
      - { value: '`#[Assert\\NotBlank]`, `#[Assert\\Length(min: 7)]`', correct: true }
      - { value: '`#[Assert\\Required]`, `#[Assert\\Size(min: 7)]`', correct: false }
      - { value: '`#[Assert\\NotEmpty]`, `#[Assert\\Min(7)]`', correct: false }
    help: |
      `NotBlank` checks for non-empty values, and `Length` with `min` checks the minimum string length.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_0
  -
    question: 'What is the main advantage of using `loadValidatorMetadata` over PHP attributes for defining constraints?'
    answers:
      - { value: 'It allows for more dynamic and programmatic definition of constraints, potentially based on runtime conditions.', correct: true }
      - { value: 'It is the only way to define class-level constraints.', correct: false }
      - { value: 'It provides better performance during validation.', correct: false }
      - { value: 'It is easier to read and maintain for simple cases.', correct: false }
    help: |
      `loadValidatorMetadata` offers programmatic control over constraint definition.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_4
  -
    question: 'When validating an array structure using `#[Assert\\Collection]`, how do you specify constraints for a nested array key, for example, `name.first_name`?'
    answers:
      - { value: 'By defining a nested `Collection` constraint where the key matches the nested array key.', correct: true }
      - { value: 'By using `#[Assert\\Property(path: "name.first_name")]`', correct: false }
      - { value: '`Collection` only validates top-level keys, not nested ones.', correct: false }
      - { value: 'By using `#[Assert\\Nested(key: "name.first_name")]`', correct: false }
    help: |
      Nested `Collection` constraints are used to validate nested array structures.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_1
  -
    question: 'What is the purpose of the `#[Assert\\All]` constraint when used within a `#[Assert\\Collection]`?'
    answers:
      - { value: 'It ensures that all elements in a collection are of the same type.', correct: false }
      - { value: 'It applies a set of constraints to *each* element within a collection (e.g., an array of objects).', correct: true }
      - { value: 'It validates that all properties of an object satisfy their constraints.', correct: false }
      - { value: 'It aggregates violations from multiple constraints into a single error message.', correct: false }
    help: |
      `All` applies its nested constraints to every element of the collection it's applied to.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_1
  -
    question: 'Which of the following is a valid way to define a `NotBlank` constraint for the `name` property of an `Author` entity using XML configuration?'
    answers:
      - { value: '''<class name="App\\Entity\\Author"><property name="name"><constraint name="NotBlank"/></property></class>''', correct: true }
      - { value: '''<class name="App\\Entity\\Author"><constraint name="NotBlank" property="name"/></class>''', correct: false }
      - { value: '''<property name="name" class="App\\Entity\\Author"><constraint name="NotBlank"/></property>''', correct: false }
      - { value: '''<constraint-mapping><property name="name"><constraint name="NotBlank"/></property></constraint-mapping>''', correct: false }
    help: |
      XML configuration uses `<class>` and `<property>` tags to define constraints.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_2
  -
    question: 'When using `#[Assert\\When]` with the `expression` option, what is the effect if the expression evaluates to a falsey value?'
    answers:
      - { value: 'Constraints defined in the `constraints` option are applied, and `otherwise` constraints are ignored.', correct: false }
      - { value: 'Constraints defined in the `constraints` option are ignored, and `otherwise` constraints are applied.', correct: true }
      - { value: 'Validation stops immediately, and no constraints are applied.', correct: false }
      - { value: 'An error is triggered because the expression must always be truthy.', correct: false }
    help: |
      If the expression is falsey, the `constraints` are skipped, and `otherwise` constraints are considered.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_4
  -
    question: 'What is the purpose of the `#[Assert\\Optional]` constraint within a `#[Assert\\Collection]`?'
    answers:
      - { value: 'It makes the entire collection optional.', correct: false }
      - { value: 'It allows a specific key within the collection to be missing without triggering a violation.', correct: true }
      - { value: 'It makes all nested constraints within it optional.', correct: false }
      - { value: 'It specifies that the value for a key can be `null`.', correct: false }
    help: |
      `Optional` allows a key to be absent in the input array without causing a violation.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_1
  -
    question: 'How can you ensure that a custom validation message for a violation is translated using a specific translation domain (e.g., `validation_errors`)?'
    answers:
      - { value: 'By setting `translation_domain` as an option on the constraint itself.', correct: false }
      - { value: 'By calling `setTranslationDomain()` on the `ConstraintViolationBuilderInterface` returned by `buildViolation()`.', correct: true }
      - { value: 'By configuring the default translation domain for the validator service in `services.yaml`.', correct: false }
      - { value: 'By prefixing the message key with the domain, e.g., `validation_errors:my_message_key`.', correct: false }
    help: |
      `setTranslationDomain()` on the violation builder allows specifying the domain per violation.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#_snippet_7
  -
    question: 'When defining a `GroupSequence` using YAML, what is the key used to specify the sequence?'
    answers:
      - { value: '`groups_sequence`', correct: false }
      - { value: '`group_sequence`', correct: true }
      - { value: '`validation_sequence`', correct: false }
      - { value: '`sequence`', correct: false }
    help: |
      The `group_sequence` key is used in YAML to define the validation group order.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_0
  -
    question: 'What is the primary function of the `ConstraintViolationListInterface` returned by the `ValidatorInterface::validate()` method?'
    answers:
      - { value: 'To provide a boolean indicating whether validation passed or failed.', correct: false }
      - { value: 'To store and provide access to all detected validation errors (violations).', correct: true }
      - { value: 'To log validation events to a file.', correct: false }
      - { value: 'To automatically redirect the user to an error page.', correct: false }
    help: |
      `ConstraintViolationListInterface` is the collection of all validation errors.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_3
  -
    question: 'Which of the following is a valid way to define a custom validation callback method directly within an entity class, to be invoked for class-level validation?'
    answers:
      - { value: '''public function validate(ValidatorInterface $validator): void { /* ... */ }''', correct: false }
      - { value: '''public function validate(ExecutionContextInterface $context): void { /* ... */ }''', correct: true }
      - { value: '''public static function validateEntity(object $entity): void { /* ... */ }''', correct: false }
      - { value: '''public function customValidation(): array { /* ... */ }''', correct: false }
    help: |
      A class-level callback method should accept `ExecutionContextInterface` as its argument.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#_snippet_3
  -
    question: 'What happens if a `GroupSequenceProviderInterface` is defined on an object, and you explicitly pass validation groups to `ValidatorInterface::validate()`?'
    answers:
      - { value: 'The `GroupSequenceProviderInterface` takes precedence, and its sequence is always used.', correct: false }
      - { value: 'The explicitly passed groups override the sequence defined by `GroupSequenceProviderInterface`.', correct: true }
      - { value: 'Both the explicitly passed groups and the sequence from the provider are merged.', correct: false }
      - { value: 'An error is thrown due to conflicting group definitions.', correct: false }
    help: |
      Explicitly passed groups override the `GroupSequenceProviderInterface`. (General knowledge, common behavior for explicit overrides).
  -
    question: 'Which constraint would you use to ensure that a string value is a valid UUID (Universally Unique Identifier)?'
    answers:
      - { value: '`#[Assert\\Uuid]`', correct: true }
      - { value: '`#[Assert\\Guid]`', correct: false }
      - { value: '`#[Assert\\UniqueId]`', correct: false }
      - { value: '`#[Assert\\Identifier]`', correct: false }
    help: |
      The `Uuid` constraint validates UUID strings. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `message` option in most built-in Symfony validation constraints?'
    answers:
      - { value: 'To define a unique identifier for the constraint.', correct: false }
      - { value: 'To provide the default error message displayed when the constraint is violated.', correct: true }
      - { value: 'To specify the translation key for the error message.', correct: false }
      - { value: 'To set a custom success message if validation passes.', correct: false }
    help: |
      The `message` option allows customizing the error message.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_0
  -
    question: 'Which constraint is suitable for validating that a string represents a valid IP address (IPv4 or IPv6)?'
    answers:
      - { value: '`#[Assert\\IpAddress]`', correct: false }
      - { value: '`#[Assert\\Ip]`', correct: true }
      - { value: '`#[Assert\\NetworkAddress]`', correct: false }
      - { value: '`#[Assert\\Host]`', correct: false }
    help: |
      The `Ip` constraint validates IP addresses. (General knowledge, common built-in constraint).
  -
    question: 'When defining a custom constraint, what is the purpose of the `validatedBy()` method in the constraint class?'
    answers:
      - { value: 'It specifies the service ID of the validator that will handle this constraint.', correct: true }
      - { value: 'It defines the validation groups that the constraint belongs to.', correct: false }
      - { value: 'It returns the default error message for the constraint.', correct: false }
      - { value: 'It indicates whether the constraint applies to properties or classes.', correct: false }
    help: |
      `validatedBy()` links the constraint to its corresponding validator. (General knowledge, crucial for custom constraints).
  -
    question: 'Which of the following constraints can be used to validate that a value is a valid date and/or time?'
    answers:
      - { value: '`#[Assert\\Date]`', correct: true }
      - { value: '`#[Assert\\Time]`', correct: true }
      - { value: '`#[Assert\\DateTime]`', correct: true }
      - { value: '`#[Assert\\Timestamp]`', correct: false }
    help: |
      Symfony provides `Date`, `Time`, and `DateTime` constraints for validating date and time formats. (General knowledge, common built-in constraints).
  -
    question: 'What is the default translation domain for validation messages in Symfony?'
    answers:
      - { value: '`messages`', correct: false }
      - { value: '`validators`', correct: true }
      - { value: '`validation`', correct: false }
      - { value: '`app`', correct: false }
    help: |
      The default translation domain for validation messages is `validators`.
      https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#_snippet_18 (Implied by the resource loading).
  -
    question: 'Which constraint should be used to validate that a file upload is of a specific MIME type (e.g., `image/jpeg`)?'
    answers:
      - { value: '`#[Assert\\File(mimeTypes: ["image/jpeg"])]`', correct: true }
      - { value: '`#[Assert\\Image]`', correct: false }
      - { value: '`#[Assert\\MimeType(type: "image/jpeg")]`', correct: false }
      - { value: '`#[Assert\\Upload(type: "image/jpeg")]`', correct: false }
    help: |
      The `File` constraint has a `mimeTypes` option for validating file types. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `min` and `max` options in the `#[Assert\\Count]` constraint?'
    answers:
      - { value: 'They define the minimum and maximum value for each element in the collection.', correct: false }
      - { value: 'They define the minimum and maximum number of elements allowed in the collection.', correct: true }
      - { value: 'They define the minimum and maximum length of string elements in the collection.', correct: false }
      - { value: 'They specify the range of valid indices for the collection.', correct: false }
    help: |
      `min` and `max` in `Count` refer to the number of elements in the collection.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#_snippet_2
  -
    question: 'Which constraint is used to ensure that a numerical value falls within a specified range (e.g., between 1 and 100)?'
    answers:
      - { value: '`#[Assert\\Range(min: 1, max: 100)]`', correct: true }
      - { value: '`#[Assert\\Between(min: 1, max: 100)]`', correct: false }
      - { value: '`#[Assert\\NumberRange(min: 1, max: 100)]`', correct: false }
      - { value: '`#[Assert\\ValueRange(min: 1, max: 100)]`', correct: false }
    help: |
      The `Range` constraint is used for numerical range validation. (General knowledge, common built-in constraint).
  -
    question: 'What is the correct way to validate a `Product` entity using the `ValidatorInterface` in a controller, and return a 400 response if errors exist?'
    answers:
      - { value: '''$errors = $validator->validate($product); if ($errors->count() > 0) { return new Response((string) $errors, 400); }''', correct: true }
      - { value: '''$validator->validate($product); if (!$validator->isValid()) { return new Response('Invalid', 400); }''', correct: false }
      - { value: '''$errors = $validator->validate($product); if ($errors) { return new Response($errors->toJson(), 400); }''', correct: false }
      - { value: '''$errors = $validator->validate($product); if (count($errors) > 0) { return new Response($errors->getMessage(), 400); }''', correct: false }
    help: |
      The `validate()` method returns a `ConstraintViolationList` which can be cast to a string for response.
      https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#_snippet_21
  -
    question: 'Which constraint is used to ensure that a string value is a valid credit card number?'
    answers:
      - { value: '`#[Assert\\CreditCard]`', correct: true }
      - { value: '`#[Assert\\CardNumber]`', correct: false }
      - { value: '`#[Assert\\Luhn]`', correct: false }
      - { value: '`#[Assert\\PaymentCard]`', correct: false }
    help: |
      The `CreditCard` constraint validates credit card numbers. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary benefit of using validation groups?'
    answers:
      - { value: 'To organize constraints into logical sets, allowing for selective validation based on context (e.g., registration vs. profile update).', correct: true }
      - { value: 'To improve validation performance by only loading necessary constraints.', correct: false }
      - { value: 'To define the order in which constraints are applied.', correct: false }
      - { value: 'To enable different error messages for the same constraint.', correct: false }
    help: |
      Validation groups enable conditional validation.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst
  -
    question: 'How can you apply a `NotBlank` constraint to a private property `$name` using a static `loadValidatorMetadata` method in a PHP entity?'
    answers:
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void { $metadata->addPropertyConstraint(''name'', new Assert\\NotBlank()); }''', correct: true }
      - { value: '''public function __construct() { $this->addConstraint(''name'', new Assert\\NotBlank()); }''', correct: false }
      - { value: '''#[Assert\\NotBlank(property: "name")]''', correct: false }
      - { value: '''public static function validateName(ClassMetadata $metadata): void { $metadata->addConstraint(new Assert\\NotBlank()); }''', correct: false }
    help: |
      `addPropertyConstraint` is the correct method for this.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_2
  -
    question: 'Which constraint is used to validate that a value is a valid JSON string?'
    answers:
      - { value: '`#[Assert\\Json]`', correct: true }
      - { value: '`#[Assert\\IsJson]`', correct: false }
      - { value: '`#[Assert\\ValidJson]`', correct: false }
      - { value: '`#[Assert\\Serializable]`', correct: false }
    help: |
      The `Json` constraint validates JSON strings. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\UniqueEntity]` constraint (though it''s a Doctrine constraint, it relates to validation concepts)?'
    answers:
      - { value: 'To ensure a property''s value is unique across all instances of an entity in the database.', correct: true }
      - { value: 'To ensure a property''s value is unique within the current validation scope.', correct: false }
      - { value: 'To generate a unique identifier for an entity.', correct: false }
      - { value: 'To prevent duplicate form submissions.', correct: false }
    help: |
      `UniqueEntity` is a Doctrine constraint that checks for uniqueness in the database. (Common knowledge, often used with Symfony validation).
  -
    question: 'When validating a password field, you want to ensure it''s not blank and has a minimum length. Additionally, you want to ensure the password does not match the username, but only if the initial blank and length checks pass. Which validation concept best fits this scenario?'
    answers:
      - { value: 'Validation scopes', correct: false }
      - { value: 'Validation groups', correct: false }
      - { value: 'Group sequence', correct: true }
      - { value: 'Custom callback validators', correct: false }
    help: |
      A group sequence allows for staged validation, where subsequent groups are only checked if preceding ones pass.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst
  -
    question: 'Which constraint is used to validate that a value is a valid country code (ISO 3166-1 alpha-2)?'
    answers:
      - { value: '`#[Assert\\Country]`', correct: true }
      - { value: '`#[Assert\\Locale]`', correct: false }
      - { value: '`#[Assert\\Region]`', correct: false }
      - { value: '`#[Assert\\IsoCountry]`', correct: false }
    help: |
      The `Country` constraint validates country codes. (General knowledge, common built-in constraint).
  -
    question: 'What happens if you apply `#[Assert\\Valid]` to a property that is `null`?'
    answers:
      - { value: 'A violation is triggered because `null` is not a valid object.', correct: false }
      - { value: 'The `Valid` constraint is ignored, and no nested validation occurs for that property.', correct: true }
      - { value: 'An `UnexpectedValueException` is thrown.', correct: false }
      - { value: 'The validator attempts to instantiate a default object for validation.', correct: false }
    help: |
      The `Valid` constraint, like many others, generally ignores `null` values unless combined with `NotBlank` or `NotNull`.
      (Implied by general validator behavior, not explicitly in `Valid` snippets, but `Length` snippet mentions nulls are valid).
  -
    question: 'Which constraint is used to validate that a value is a valid language code (ISO 639-1 alpha-2)?'
    answers:
      - { value: '`#[Assert\\Language]`', correct: true }
      - { value: '`#[Assert\\Locale]`', correct: false }
      - { value: '`#[Assert\\Lang]`', correct: false }
      - { value: '`#[Assert\\IsoLanguage]`', correct: false }
    help: |
      The `Language` constraint validates language codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Expression]` constraint?'
    answers:
      - { value: 'To define a custom validation rule using a PHP expression, allowing complex logic without a dedicated custom validator class.', correct: true }
      - { value: 'To evaluate a mathematical expression and validate its result.', correct: false }
      - { value: 'To dynamically generate a validation message based on an expression.', correct: false }
      - { value: 'To define a regular expression pattern for string validation.', correct: false }
    help: |
      The `Expression` constraint allows for arbitrary PHP expressions to define validation rules. (General knowledge, common built-in constraint).
  -
    question: 'When using `#[Assert\\File]`, which option would you use to limit the maximum size of the uploaded file?'
    answers:
      - { value: '`maxSize`', correct: true }
      - { value: '`maxBytes`', correct: false }
      - { value: '`sizeLimit`', correct: false }
      - { value: '`fileSize`', correct: false }
    help: |
      The `maxSize` option is used to set the maximum file size. (General knowledge, common built-in constraint).
  -
    question: 'What is the role of `auto_mapping` in Doctrine configuration concerning Symfony validation?'
    answers:
      - { value: 'It automatically generates validation constraints from Doctrine entity metadata (e.g., `nullable=false` becomes `NotNull`).', correct: true }
      - { value: 'It automatically maps database columns to form fields for validation.', correct: false }
      - { value: 'It automatically creates database indexes for validated fields.', correct: false }
      - { value: 'It automatically applies all built-in Symfony constraints to Doctrine entities.', correct: false }
    help: |
      `auto_mapping` infers constraints from Doctrine metadata.
      https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#_snippet_21
  -
    question: 'Which constraint is used to validate that a value is a valid International Standard Book Number (ISBN)?'
    answers:
      - { value: '`#[Assert\\Isbn]`', correct: true }
      - { value: '`#[Assert\\BookNumber]`', correct: false }
      - { value: '`#[Assert\\ProductCode]`', correct: false }
      - { value: '`#[Assert\\Ean]`', correct: false }
    help: |
      The `Isbn` constraint validates ISBNs. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `groups` option when defining a constraint?'
    answers:
      - { value: 'To specify the default error message for the constraint.', correct: false }
      - { value: 'To assign the constraint to one or more validation groups, allowing it to be applied conditionally.', correct: true }
      - { value: 'To define the order in which multiple constraints on the same property are evaluated.', correct: false }
      - { value: 'To set the priority of the constraint during validation.', correct: false }
    help: |
      The `groups` option links a constraint to specific validation groups.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_0
  -
    question: 'Which constraint would you use to validate that a string represents a valid credit card scheme (e.g., VISA, MASTERCARD)?'
    answers:
      - { value: '`#[Assert\\CardScheme]`', correct: true }
      - { value: '`#[Assert\\CreditCardType]`', correct: false }
      - { value: '`#[Assert\\PaymentScheme]`', correct: false }
      - { value: '`#[Assert\\CardType]`', correct: false }
    help: |
      The `CardScheme` constraint validates against known credit card schemes.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_2
  -
    question: 'What is the correct way to specify validation groups when creating a form using `createFormBuilder` in a controller?'
    answers:
      - { value: '''$form = $this->createFormBuilder($user)->setValidationGroups(['registration'])->getForm();''', correct: false }
      - { value: '''$form = $this->createFormBuilder($user, ['validation_groups' => ['registration']])->getForm();''', correct: true }
      - { value: '''$form = $this->createFormBuilder($user)->addValidationGroup('registration')->getForm();''', correct: false }
      - { value: '''$form = $this->createFormBuilder($user, ['groups' => ['registration']])->getForm();''', correct: false }
    help: |
      The `validation_groups` option is passed in the options array to `createFormBuilder`.
      https://github.com/symfony/symfony-docs/blob/7.3/form/validation_groups.rst#_snippet_0
  -
    question: 'What is the primary purpose of the `#[Assert\\NotNull]` constraint?'
    answers:
      - { value: 'To ensure a string is not empty.', correct: false }
      - { value: 'To ensure a value is not `null`.', correct: true }
      - { value: 'To ensure a collection is not empty.', correct: false }
      - { value: 'To ensure a value is a valid object.', correct: false }
    help: |
      `NotNull` specifically checks for `null` values. (General knowledge, common built-in constraint).
  -
    question: 'Which of the following is true about the `#[Assert\\NotBlank]` constraint?'
    answers:
      - { value: 'It considers `null` values as valid.', correct: false }
      - { value: 'It considers an empty string (`''`) as valid.', correct: false }
      - { value: 'It considers a string containing only whitespace (`''   ''`) as valid.', correct: false }
      - { value: 'It considers `null`, empty strings, and whitespace-only strings as invalid.', correct: true }
    help: |
      `NotBlank` checks for non-empty and non-whitespace values. (General knowledge, common built-in constraint).
  -
    question: 'What is the correct way to define a `Length` constraint with a `minMessage` and `maxMessage` using PHP attributes?'
    answers:
      - { value: '''#[Assert\\Length(min: 5, max: 10, minMessage: "Too short", maxMessage: "Too long")]''', correct: true }
      - { value: '''#[Assert\\Length(min: 5, max: 10, messages: ["min" => "Too short", "max" => "Too long"])]''', correct: false }
      - { value: '''#[Assert\\Length(5, 10, "Too short", "Too long")]''', correct: false }
      - { value: '''#[Assert\\Length(options: {min: 5, max: 10, minMessage: "Too short", maxMessage: "Too long"})]''', correct: false }
    help: |
      Options are passed as named arguments to the constraint.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_8
  -
    question: 'Which constraint is used to validate that a value is a valid EAN (European Article Number) or UPC (Universal Product Code)?'
    answers:
      - { value: '`#[Assert\\Ean]`', correct: true }
      - { value: '`#[Assert\\Barcode]`', correct: false }
      - { value: '`#[Assert\\ProductCode]`', correct: false }
      - { value: '`#[Assert\\Isbn]`', correct: false }
    help: |
      The `Ean` constraint validates EAN/UPC codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Unique]` constraint (when used on a property, not a class)?'
    answers:
      - { value: 'To ensure that the value of a property is unique within a collection.', correct: false }
      - { value: 'To ensure that the value of a property is unique among other properties in the same object.', correct: false }
      - { value: 'This constraint does not exist as a standalone property constraint in Symfony Validator; it''s typically a Doctrine ORM constraint (`UniqueEntity`).', correct: true }
      - { value: 'To generate a unique ID for the property.', correct: false }
    help: |
      `Unique` as a property constraint is not a standard built-in Symfony Validator constraint; `UniqueEntity` is for Doctrine entities. (Clarification based on common confusion).
  -
    question: 'Which constraint is used to validate that a value is a valid currency code (ISO 4217)?'
    answers:
      - { value: '`#[Assert\\Currency]`', correct: true }
      - { value: '`#[Assert\\Money]`', correct: false }
      - { value: '`#[Assert\\IsoCurrency]`', correct: false }
      - { value: '`#[Assert\\FinancialCode]`', correct: false }
    help: |
      The `Currency` constraint validates ISO 4217 currency codes. (General knowledge, common built-in constraint).
  -
    question: 'When implementing `GroupSequenceProviderInterface`, what should the `getGroupSequence()` method return?'
    answers:
      - { value: 'An array of group names or a `GroupSequence` object.', correct: true }
      - { value: 'A boolean indicating whether validation should proceed.', correct: false }
      - { value: 'A `ConstraintViolationListInterface` object.', correct: false }
      - { value: 'A string representing the single group to validate.', correct: false }
    help: |
      The method must return an array of group names or a `GroupSequence` object.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_4
  -
    question: 'What is the main difference between `#[Assert\\IsTrue]` and `#[Assert\\IsFalse]`?'
    answers:
      - { value: '`IsTrue` validates that a value is strictly `true`, while `IsFalse` validates that a value is strictly `false`.', correct: true }
      - { value: '`IsTrue` is for boolean properties, `IsFalse` is for string properties.', correct: false }
      - { value: '`IsTrue` checks for truthy values, `IsFalse` checks for falsey values.', correct: false }
      - { value: 'They are aliases for the same constraint.', correct: false }
    help: |
      They validate strict boolean `true` or `false`. (General knowledge, common built-in constraints).
  -
    question: 'Which constraint is used to validate that a string contains only digits?'
    answers:
      - { value: '`#[Assert\\Digit]`', correct: false }
      - { value: '`#[Assert\\Digits]`', correct: true }
      - { value: '`#[Assert\\Numeric]`', correct: false }
      - { value: '`#[Assert\\Integer]`', correct: false }
    help: |
      The `Digits` constraint validates that a string contains only digits. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Type]` constraint?'
    answers:
      - { value: 'To ensure a value is of a specific PHP data type (e.g., `string`, `int`, `array`, `bool`).', correct: true }
      - { value: 'To cast a value to a different data type before validation.', correct: false }
      - { value: 'To validate the type of a file upload.', correct: false }
      - { value: 'To check if an object is an instance of a specific class.', correct: true }
    help: |
      `Type` validates the PHP data type or class instance. (General knowledge, common built-in constraint).
  -
    question: 'When should you use a custom callback validator instead of a built-in constraint or a custom constraint class?'
    answers:
      - { value: 'When the validation logic is very simple and can be expressed in a single line of code.', correct: false }
      - { value: 'When the validation logic is complex, involves multiple properties, or requires access to the `ExecutionContextInterface` for building violations, and you don''t want to create a separate constraint class.', correct: true }
      - { value: 'When you need to perform database queries as part of validation.', correct: false }
      - { value: 'When you want to reuse the validation logic across multiple projects.', correct: false }
    help: |
      Callback validators are suitable for complex, ad-hoc validation logic within the entity itself.
      https://symfony.com/doc/current/validation/custom_constraint.html#callback-constraint (Conceptual, but implied by snippets).
  -
    question: 'What is the purpose of the `#[Assert\\DivisibleBy]` constraint?'
    answers:
      - { value: 'To validate that a number is divisible by a given value.', correct: true }
      - { value: 'To check if a number is a prime number.', correct: false }
      - { value: 'To divide a number into equal parts.', correct: false }
      - { value: 'To validate that a number is an integer.', correct: false }
    help: |
      The `DivisibleBy` constraint checks for divisibility. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is `true` (case-insensitive for strings, or boolean `true`)?'
    answers:
      - { value: '`#[Assert\\IsTrue]`', correct: true }
      - { value: '`#[Assert\\True]`', correct: false }
      - { value: '`#[Assert\\BooleanTrue]`', correct: false }
      - { value: '`#[Assert\\Truthy]`', correct: false }
    help: |
      `IsTrue` validates that a value is `true`. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary difference between `#[Assert\\LessThan]` and `#[Assert\\LessThanOrEqual]`?'
    answers:
      - { value: '`LessThan` validates if a value is strictly less than another, while `LessThanOrEqual` includes equality.', correct: true }
      - { value: '`LessThan` is for numbers, `LessThanOrEqual` is for dates.', correct: false }
      - { value: '`LessThan` is for integers, `LessThanOrEqual` is for floats.', correct: false }
      - { value: 'They are interchangeable; the behavior is the same.', correct: false }
    help: |
      The "OrEqual" variants include the boundary value. (General knowledge, common built-in constraints).
  -
    question: 'Which constraint is used to validate that a value is a valid BIC (Bank Identifier Code) or SWIFT code?'
    answers:
      - { value: '`#[Assert\\Bic]`', correct: true }
      - { value: '`#[Assert\\Swift]`', correct: false }
      - { value: '`#[Assert\\BankCode]`', correct: false }
      - { value: '`#[Assert\\FinancialCode]`', correct: false }
    help: |
      The `Bic` constraint validates BIC/SWIFT codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Timezone]` constraint?'
    answers:
      - { value: 'To validate that a string is a valid PHP timezone identifier (e.g., `Europe/Paris`).', correct: true }
      - { value: 'To convert a date to a specific timezone.', correct: false }
      - { value: 'To check if a date falls within a specific timezone.', correct: false }
      - { value: 'To validate the format of a timezone offset.', correct: false }
    help: |
      The `Timezone` constraint validates timezone identifiers. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a string is a valid hostname?'
    answers:
      - { value: '`#[Assert\\Hostname]`', correct: true }
      - { value: '`#[Assert\\Domain]`', correct: false }
      - { value: '`#[Assert\\Host]`', correct: false }
      - { value: '`#[Assert\\UrlPart]`', correct: false }
    help: |
      The `Hostname` constraint validates hostnames. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Unique]` constraint when applied to a collection of objects (e.g., an array of tags)?'
    answers:
      - { value: 'To ensure that each object in the collection is a unique instance (different memory address).', correct: false }
      - { value: 'To ensure that a specific property (or combination of properties) within each object in the collection is unique across all objects in that collection.', correct: true }
      - { value: 'To ensure the collection itself is unique compared to other collections.', correct: false }
      - { value: 'This constraint is not applicable to collections of objects.', correct: false }
    help: |
      The `Unique` constraint (when available for collections, often via custom or specific bundle implementation) ensures uniqueness of elements based on a property. (Conceptual, often implemented via custom validators or specific bundle constraints like `UniqueEntity` for collections of entities).
  -
    question: 'Which constraint is used to validate that a value is a valid callback (callable) in PHP?'
    answers:
      - { value: '`#[Assert\\Callback]`', correct: true }
      - { value: '`#[Assert\\Callable]`', correct: false }
      - { value: '`#[Assert\\Invokable]`', correct: false }
      - { value: '`#[Assert\\Function]`', correct: false }
    help: |
      The `Callback` constraint can also be used to validate if a value is a valid PHP callable. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary benefit of using `#[Assert\\When]` over a custom `GroupSequenceProviderInterface` for conditional validation?'
    answers:
      - { value: '`#[Assert\\When]` provides a more concise way to apply conditional logic directly to specific constraints or properties without affecting the entire object''s validation flow.', correct: true }
      - { value: '`#[Assert\\When]` is more performant for complex conditional logic.', correct: false }
      - { value: '`GroupSequenceProviderInterface` is deprecated in Symfony 7.', correct: false }
      - { value: '`#[Assert\\When]` allows for more complex expressions than `GroupSequenceProviderInterface`.', correct: false }
    help: |
      `Assert\\When` is for fine-grained, property-level conditional validation.
      https://symfony.com/doc/current/reference/constraints/When.html (Conceptual, comparing two distinct features).
  -
    question: 'Which constraint is used to validate that a string represents a valid HTML color code (e.g., `#RRGGBB`)?'
    answers:
      - { value: '`#[Assert\\Color]`', correct: false }
      - { value: '`#[Assert\\CssColor]`', correct: true }
      - { value: '`#[Assert\\HtmlColor]`', correct: false }
      - { value: '`#[Assert\\HexColor]`', correct: false }
    help: |
      The `CssColor` constraint validates various CSS color formats, including hex codes.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CssColor.rst#_snippet_1
  -
    question: 'What is the purpose of the `#[Assert\\AtLeastOneOf]` constraint?'
    answers:
      - { value: 'To ensure that at least one of the specified properties has a value.', correct: true }
      - { value: 'To ensure that a collection has at least one element.', correct: false }
      - { value: 'To validate that a value is greater than or equal to a minimum.', correct: false }
      - { value: 'To apply a constraint to at least one of the validation groups.', correct: false }
    help: |
      `AtLeastOneOf` ensures that at least one of the given constraints (or properties) passes validation. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid email address, but also allows for a specific mode like `strict` or `html5`?'
    answers:
      - { value: '`#[Assert\\Email(mode: Email::VALIDATION_MODE_HTML5)]`', correct: true }
      - { value: '`#[Assert\\EmailAddress]`', correct: false }
      - { value: '`#[Assert\\Mail]`', correct: false }
      - { value: '`#[Assert\\Email(format: "html5")]`', correct: false }
    help: |
      The `Email` constraint has a `mode` option for different validation levels. (General knowledge, common built-in constraint).
  -
    question: 'What is the correct way to define a `GroupSequence` using the `GroupSequence` class directly in PHP?'
    answers:
      - { value: '''new GroupSequence(['Default', 'Strict'])''', correct: true }
      - { value: '''new Assert\\GroupSequence(['Default', 'Strict'])''', correct: true }
      - { value: '''new GroupSequenceProvider(['Default', 'Strict'])''', correct: false }
      - { value: '''new GroupSequence(['Default', 'Strict'], type: GroupSequence::TYPE_ORDERED)''', correct: false }
    help: |
      The `GroupSequence` class is used to define an ordered sequence of groups.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_4 (Return type of `getGroupSequence()`).
  -
    question: 'Which constraint is used to validate that a number is positive (greater than 0)?'
    answers:
      - { value: '`#[Assert\\Positive]`', correct: true }
      - { value: '`#[Assert\\GreaterThan(0)]`', correct: true }
      - { value: '`#[Assert\\Min(1)]`', correct: false }
      - { value: '`#[Assert\\PositiveOrZero]`', correct: false }
    help: |
      `Positive` and `GreaterThan(0)` both achieve this. (General knowledge, common built-in constraints).
  -
    question: 'What is the purpose of the `#[Assert\\Time]` constraint?'
    answers:
      - { value: 'To validate that a string represents a valid time format (e.g., `HH:MM:SS`).', correct: true }
      - { value: 'To validate a `DateTime` object.', correct: false }
      - { value: 'To compare two time values.', correct: false }
      - { value: 'To check if a time falls within a specific range.', correct: false }
    help: |
      The `Time` constraint validates time strings. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid country subdivision code (e.g., US states, Canadian provinces)?'
    answers:
      - { value: '`#[Assert\\CountrySubdivision]`', correct: true }
      - { value: '`#[Assert\\RegionCode]`', correct: false }
      - { value: '`#[Assert\\StateProvince]`', correct: false }
      - { value: '`#[Assert\\Subdivision]`', correct: false }
    help: |
      The `CountrySubdivision` constraint validates country subdivision codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the difference between `#[Assert\\NotNull]` and `#[Assert\\NotBlank]`?'
    answers:
      - { value: '`NotNull` only checks for `null` values, while `NotBlank` checks for `null`, empty strings, and strings containing only whitespace.', correct: true }
      - { value: '`NotNull` is for objects, `NotBlank` is for strings.', correct: false }
      - { value: '`NotNull` is deprecated in favor of `NotBlank`.', correct: false }
      - { value: '`NotBlank` allows `null` values if the property is nullable.', correct: false }
    help: |
      `NotBlank` is a stricter version of `NotNull` for string-like values. (General knowledge, common built-in constraints).
  -
    question: 'What is the purpose of the `#[Assert\\Callback]` constraint when applied to a property?'
    answers:
      - { value: 'To execute a custom validation method (defined elsewhere) on the property''s value.', correct: true }
      - { value: 'To automatically call a setter method on the property.', correct: false }
      - { value: 'To define a property as a callable.', correct: false }
      - { value: 'To trigger a JavaScript callback function on the client-side.', correct: false }
    help: |
      `Callback` on a property allows a custom method to validate that specific property. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a number is negative (less than 0)?'
    answers:
      - { value: '`#[Assert\\Negative]`', correct: true }
      - { value: '`#[Assert\\LessThan(0)]`', correct: true }
      - { value: '`#[Assert\\Max(-1)]`', correct: false }
      - { value: '`#[Assert\\NegativeOrZero]`', correct: false }
    help: |
      `Negative` and `LessThan(0)` both achieve this. (General knowledge, common built-in constraints).
  -
    question: 'What is the primary benefit of using PHP attributes for defining validation constraints?'
    answers:
      - { value: 'They keep validation rules close to the properties they validate, improving readability and discoverability.', correct: true }
      - { value: 'They offer better performance compared to YAML or XML configurations.', correct: false }
      - { value: 'They allow for more complex conditional validation logic than other methods.', correct: false }
      - { value: 'They are the only way to define constraints for private properties.', correct: false }
    help: |
      Attributes integrate validation directly into the class definition.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_1
  -
    question: 'Which constraint is used to validate that a value is a valid `DateTime` object or a string that can be parsed into a `DateTime` object?'
    answers:
      - { value: '`#[Assert\\DateTime]`', correct: true }
      - { value: '`#[Assert\\DateObject]`', correct: false }
      - { value: '`#[Assert\\ValidDate]`', correct: false }
      - { value: '`#[Assert\\Timestamp]`', correct: false }
    help: |
      The `DateTime` constraint validates date and time values. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Unique]` constraint when applied to a property in a form, typically used with a data transformer?'
    answers:
      - { value: 'To ensure the submitted value for that field has not been submitted before in the current session.', correct: false }
      - { value: 'To check if the submitted value for that field already exists in the database for another entity (requires custom logic or a Doctrine `UniqueEntity` constraint on the entity).', correct: true }
      - { value: 'To generate a unique token for the form submission.', correct: false }
      - { value: 'To prevent the user from entering the same value twice in different form fields.', correct: false }
    help: |
      While `Unique` isn't a standalone property constraint in the core validator, the concept of uniqueness usually involves checking against existing data, often via Doctrine's `UniqueEntity` or custom logic. (Conceptual, addresses a common use case).
  -
    question: 'Which constraint is used to validate that a string is a valid regular expression?'
    answers:
      - { value: '`#[Assert\\Regex]`', correct: true }
      - { value: '`#[Assert\\Pattern]`', correct: false }
      - { value: '`#[Assert\\RegExp]`', correct: false }
      - { value: '`#[Assert\\ValidRegex]`', correct: false }
    help: |
      The `Regex` constraint is used for regular expression validation. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary purpose of the `#[Assert\\EqualTo]` constraint?'
    answers:
      - { value: 'To validate that a value is strictly equal to another specified value.', correct: true }
      - { value: 'To check if two properties in an object have the same value.', correct: false }
      - { value: 'To compare the length of two strings.', correct: false }
      - { value: 'To ensure a value is not `null`.', correct: false }
    help: |
      `EqualTo` checks for strict equality. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid locale code (e.g., `en`, `fr_FR`)?'
    answers:
      - { value: '`#[Assert\\Locale]`', correct: true }
      - { value: '`#[Assert\\Language]`', correct: false }
      - { value: '`#[Assert\\Country]`', correct: false }
      - { value: '`#[Assert\\Culture]`', correct: false }
    help: |
      The `Locale` constraint validates locale codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Range]` constraint when applied to a date or time value?'
    answers:
      - { value: 'To ensure the date/time falls within a specified period (e.g., between two dates).', correct: true }
      - { value: 'To validate the format of the date/time string.', correct: false }
      - { value: 'To compare the date/time to the current date/time.', correct: false }
      - { value: 'To check if the date/time is in the future or past.', correct: false }
    help: |
      `Range` can be used for numerical or date/time ranges. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a string is a valid IBAN (International Bank Account Number)?'
    answers:
      - { value: '`#[Assert\\Iban]`', correct: true }
      - { value: '`#[Assert\\BankAccount]`', correct: false }
      - { value: '`#[Assert\\BankNumber]`', correct: false }
      - { value: '`#[Assert\\Account]`', correct: false }
    help: |
      The `Iban` constraint validates IBANs. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Sequentially]` constraint?'
    answers:
      - { value: 'To apply constraints in a specific order, stopping on the first violation, similar to a `GroupSequence` but for a single property or object.', correct: true }
      - { value: 'To validate elements of a collection one by one.', correct: false }
      - { value: 'To ensure a series of values are in sequential order.', correct: false }
      - { value: 'To define a sequence of validation groups for the entire form.', correct: false }
    help: |
      `Sequentially` allows for ordered validation of multiple constraints on a single item. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid phone number?'
    answers:
      - { value: '`#[Assert\\PhoneNumber]`', correct: true }
      - { value: '`#[Assert\\Tel]`', correct: false }
      - { value: '`#[Assert\\Mobile]`', correct: false }
      - { value: '`#[Assert\\Phone]`', correct: false }
    help: |
      The `PhoneNumber` constraint validates phone numbers. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary purpose of the `#[Assert\\ExpressionLanguage]` constraint?'
    answers:
      - { value: 'To define complex validation rules using Symfony''s ExpressionLanguage component, allowing for more powerful and readable expressions than simple PHP expressions.', correct: true }
      - { value: 'To validate the syntax of an ExpressionLanguage string.', correct: false }
      - { value: 'To translate validation messages using ExpressionLanguage.', correct: false }
      - { value: 'To dynamically generate validation groups based on ExpressionLanguage.', correct: false }
    help: |
      `ExpressionLanguage` provides a more robust expression engine for validation. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid `DateTimeImmutable` object or a string that can be parsed into one?'
    answers:
      - { value: '`#[Assert\\DateTimeImmutable]`', correct: true }
      - { value: '`#[Assert\\ImmutableDateTime]`', correct: false }
      - { value: '`#[Assert\\DateImmutable]`', correct: false }
      - { value: '`#[Assert\\ImmutableDate]`', correct: false }
    help: |
      The `DateTimeImmutable` constraint validates `DateTimeImmutable` objects. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Timezone]` constraint''s `zone` option?'
    answers:
      - { value: 'To specify a specific timezone to validate against.', correct: false }
      - { value: 'To limit validation to a specific type of timezone (e.g., `DateTimeZone::AMERICA`).', correct: true }
      - { value: 'To define the default timezone for the application.', correct: false }
      - { value: 'To check if the timezone is daylight saving time.', correct: false }
    help: |
      The `zone` option allows filtering by timezone type. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid `DateInterval` object or a string that can be parsed into one?'
    answers:
      - { value: '`#[Assert\\DateInterval]`', correct: true }
      - { value: '`#[Assert\\Interval]`', correct: false }
      - { value: '`#[Assert\\TimePeriod]`', correct: false }
      - { value: '`#[Assert\\Duration]`', correct: false }
    help: |
      The `DateInterval` constraint validates `DateInterval` objects. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Ulid]` constraint?'
    answers:
      - { value: 'To validate that a string is a valid ULID (Universally Unique Lexicographically Sortable Identifier).', correct: true }
      - { value: 'To generate a ULID for an entity.', correct: false }
      - { value: 'To validate that a string is a valid UUID.', correct: false }
      - { value: 'To check if a string contains only uppercase letters and digits.', correct: false }
    help: |
      The `Ulid` constraint validates ULID strings. (General knowledge, common built-in constraint).
  -
    question: 'When using `#[Assert\\Type]` with `type: "array"`, what is the validation result if the value is a `Traversable` object (e.g., `\ArrayIterator`)?'
    answers:
      - { value: 'A violation is triggered because it''s not a native PHP array.', correct: false }
      - { value: 'The validation passes, as `Traversable` objects are considered array-like for this constraint.', correct: true }
      - { value: 'An `UnexpectedValueException` is thrown.', correct: false }
      - { value: 'The object is converted to an array before validation.', correct: false }
    help: |
      The `Type` constraint for "array" also accepts `Traversable` objects. (General knowledge, common built-in constraint behavior).category: Data Validation
questions:
  -
    question: 'Which Composer command is used to install the Symfony Validator component?'
    answers:
      - { value: 'composer install symfony/validator', correct: false }
      - { value: 'composer require symfony/validator', correct: true }
      - { value: 'symfony install validator', correct: false }
      - { value: 'composer add validator', correct: false }
    help: |
      To install the Symfony Validator component, you use the `composer require` command.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_0
  -
    question: 'How do you obtain a basic instance of the Symfony Validator in a standalone PHP script (outside of a Symfony application context)?'
    answers:
      - { value: '$validator = new Validator();', correct: false }
      - { value: '$validator = ValidatorFactory::create();', correct: false }
      - { value: 'use Symfony\\Component\\Validator\\Validation; $validator = Validation::createValidator();', correct: true }
      - { value: '$validator = $container->get(''validator'');', correct: false }
    help: |
      The `Validation::createValidator()` method is used to get a basic validator instance.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator.rst#_snippet_3
  -
    question: 'Which of the following methods can be used to define validation constraints for a Symfony entity?'
    answers:
      - { value: 'PHP attributes (#[Assert\\Constraint])', correct: true }
      - { value: 'YAML configuration files', correct: true }
      - { value: 'XML configuration files', correct: true }
      - { value: 'A static `loadValidatorMetadata` method in the entity class', correct: true }
      - { value: 'Directly in the entity constructor', correct: false }
    help: |
      Symfony supports multiple ways to define validation constraints, including PHP attributes, YAML, XML, and programmatic definition via `loadValidatorMetadata`.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_2
  -
    question: 'Consider the following PHP attribute definition for a property:
```php
class Author
{
    #[Assert\\NotBlank]
    #[Assert\\Length(min: 3)]
    private string $firstName;
}
```
What does this configuration ensure for the `$firstName` property?'
    answers:
      - { value: 'The `$firstName` property must not be null.', correct: false }
      - { value: 'The `$firstName` property must not be an empty string.', correct: true }
      - { value: 'The `$firstName` property must have a length of exactly 3 characters.', correct: false }
      - { value: 'The `$firstName` property must have a length of at least 3 characters.', correct: true }
    help: |
      `NotBlank` ensures the value is not blank (null, empty string, or whitespace only). `Length(min: 3)` ensures the string has at least 3 characters.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_12
  -
    question: 'When validating an object using `ValidatorInterface::validate($value)`, which validation groups are applied by default if no groups are explicitly specified?'
    answers:
      - { value: 'All defined groups', correct: false }
      - { value: 'Only the `Default` group', correct: true }
      - { value: 'No groups are applied, only global constraints', correct: false }
      - { value: 'The `Default` group and any groups defined via `GroupSequenceProviderInterface`', correct: false }
    help: |
      If no groups are provided to the `validate()` method, only constraints belonging to the `Default` group are applied.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_2
  -
    question: 'Which of the following code snippets correctly validates an `$author` object using only the `registration` validation group?'
    answers:
      - { value: '$errors = $validator->validate($author, ''registration'');', correct: false }
      - { value: '$errors = $validator->validate($author, null, ''registration'');', correct: false }
      - { value: '$errors = $validator->validate($author, null, [''registration'']);', correct: true }
      - { value: '$errors = $validator->validate($author, groups: [''registration'']);', correct: true }
    help: |
      The third argument to `validate()` is for groups and accepts an array or a string. For a single group, an array is preferred or a string.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_1
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_2
  -
    question: 'What is the purpose of the `#[Assert\\Valid]` attribute in Symfony validation?'
    answers:
      - { value: 'It marks a property as required, similar to `#[Assert\\NotBlank]`.', correct: false }
      - { value: 'It ensures that the value of the property is a valid PHP object.', correct: false }
      - { value: 'It recursively validates the properties of a nested object or elements of a collection.', correct: true }
      - { value: 'It validates that the property value adheres to a specific data type.', correct: false }
    help: |
      The `Valid` constraint is used to trigger validation on nested objects or collections.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_5
  -
    question: 'Consider an `Author` entity with an `Address` property:
```php
// src/Entity/Author.php
namespace App\\Entity;

use Symfony\\Component\\Validator\\Constraints as Assert;

class Author
{
    #[Assert\\Valid]
    protected Address $address;
}
```
If the `Address` object has validation constraints, when will they be checked?'
    answers:
      - { value: 'Only if the `Author` object itself has no validation errors.', correct: false }
      - { value: 'Only if the `Address` property is explicitly validated in the controller.', correct: false }
      - { value: 'When the `Author` object is validated, the `Address` object will also be validated recursively.', correct: true }
      - { value: 'The `#[Assert\\Valid]` attribute is ignored for nested objects.', correct: false }
    help: |
      The `Valid` constraint ensures that when the parent object is validated, any nested objects marked with `Valid` are also validated.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_5
  -
    question: 'Which method of `ConstraintValidator` should be implemented to contain the core logic for a custom validation constraint?'
    answers:
      - { value: '`isValid()`', correct: false }
      - { value: '`validate()`', correct: true }
      - { value: '`check()`', correct: false }
      - { value: '`apply()`', correct: false }
    help: |
      The `validate()` method is where the custom validation logic resides within a `ConstraintValidator`.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_4
  -
    question: 'Inside a custom constraint validator''s `validate()` method, how do you add a validation violation?'
    answers:
      - { value: '$this->addError(''message'');', correct: false }
      - { value: '$this->context->addViolation(''message'');', correct: false }
      - { value: '$this->context->buildViolation($constraint->message)->addViolation();', correct: true }
      - { value: '$this->violationBuilder->add(''message'');', correct: false }
    help: |
      The `context` property of the validator provides the `buildViolation()` method, which is used to create and add a violation.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'What is the purpose of `GroupSequenceProviderInterface` in Symfony validation?'
    answers:
      - { value: 'To define a fixed order of validation groups for an object.', correct: false }
      - { value: 'To dynamically determine the validation groups to apply based on the object''s state.', correct: true }
      - { value: 'To allow multiple validation groups to be applied simultaneously without order.', correct: false }
      - { value: 'To provide a list of all available validation groups in the application.', correct: false }
    help: |
      `GroupSequenceProviderInterface` allows an object to define its own validation group sequence dynamically.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_4
  -
    question: 'Consider the following `GroupSequence` definition:
```php
#[Assert\\GroupSequence(['User', 'Strict'])]
class User implements UserInterface
{
    // ...
}
```
If a violation occurs in the `User` group, what happens to the `Strict` group validation?'
    answers:
      - { value: 'The `Strict` group will still be validated.', correct: false }
      - { value: 'The validation process will stop, and the `Strict` group will not be validated.', correct: true }
      - { value: 'The `Strict` group will be validated, but its violations will be ignored.', correct: false }
      - { value: 'The `User` group will be re-validated after the `Strict` group.', correct: false }
    help: |
      In a `GroupSequence`, validation proceeds sequentially. If a violation occurs in an earlier group, subsequent groups are not validated.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_0
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_4
  -
    question: 'How can you validate a scalar value (e.g., an email string) directly using the Symfony Validator component, without an entity object?'
    answers:
      - { value: 'You cannot validate scalar values directly; they must be part of an object.', correct: false }
      - { value: 'By passing the scalar value and a `Constraint` object directly to `ValidatorInterface::validate()`.', correct: true }
      - { value: 'By wrapping the scalar value in a dummy object and then validating the object.', correct: false }
      - { value: 'Using `Validation::createValidator()->validateScalar($email, new Assert\\Email());`', correct: false }
    help: |
      The `validate()` method can accept a scalar value as its first argument and a constraint as its second.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_0
  -
    question: 'Which built-in constraint is used to validate that a property''s value is one of a predefined set of options?'
    answers:
      - { value: '`#[Assert\\InList]`', correct: false }
      - { value: '`#[Assert\\Option]`', correct: false }
      - { value: '`#[Assert\\Choice]`', correct: true }
      - { value: '`#[Assert\\Enum]`', correct: false }
    help: |
      The `Choice` constraint validates that a value is one of the given choices.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_10
  -
    question: 'What is the default behavior of the `match` option for the `#[Assert\\Regex]` constraint?'
    answers:
      - { value: 'It is `false`, meaning validation passes if the string does NOT match the pattern.', correct: false }
      - { value: 'It is `true`, meaning validation passes if the string matches the pattern.', correct: true }
      - { value: 'It depends on the PHP version.', correct: false }
      - { value: 'It must always be explicitly set.', correct: false }
    help: |
      By default, `match` is `true`, meaning the value must match the regular expression.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Regex.rst#_snippet_5
  -
    question: 'Which of the following is a valid way to define a `Length` constraint that requires a string to be exactly 20 characters long using PHP attributes?'
    answers:
      - { value: '`#[Assert\\Length(20)]`', correct: true }
      - { value: '`#[Assert\\Length(exact: 20)]`', correct: false }
      - { value: '`#[Assert\\Length(exactly: 20)]`', correct: true }
      - { value: '`#[Assert\\Length(min: 20, max: 20)]`', correct: true }
    help: |
      The `exactly` option can be used, or simply passing the integer as the first argument. `min` and `max` with the same value also achieve this.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_3
  -
    question: 'When using `#[Assert\\Length(min: 5)]`, what is the validation result if the value is `null`?'
    answers:
      - { value: 'A violation is triggered because `null` does not meet the minimum length.', correct: false }
      - { value: 'The validation passes, as `null` values are generally considered valid by length constraints unless `NotBlank` is also used.', correct: true }
      - { value: 'An `UnexpectedValueException` is thrown.', correct: false }
      - { value: 'The validator component converts `null` to an empty string before validation.', correct: false }
    help: |
      Null values are considered valid by the `Length` constraint, as validators are typically triggered only if the value is not null.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_7
  -
    question: 'What is the purpose of the `debug:validator` console command in Symfony?'
    answers:
      - { value: 'To run a validation check on a specific object and display all violations.', correct: false }
      - { value: 'To list all validation constraints applied to a given class or all classes in a directory.', correct: true }
      - { value: 'To generate boilerplate code for custom validation constraints.', correct: false }
      - { value: 'To clear the validator cache.', correct: false }
    help: |
      The `debug:validator` command helps inspect the validation rules configured for your classes.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_14
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_16
  -
    question: 'Which constraint is specifically designed to validate that a value is a valid CSS color string?'
    answers:
      - { value: '`#[Assert\\Color]`', correct: false }
      - { value: '`#[Assert\\HexColor]`', correct: false }
      - { value: '`#[Assert\\CssColor]`', correct: true }
      - { value: '`#[Assert\\RgbColor]`', correct: false }
    help: |
      The `CssColor` constraint validates CSS color formats.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CssColor.rst#_snippet_1
  -
    question: 'When implementing a custom constraint validator, what type of exception should be thrown if the `validate()` method receives a value of an unexpected type?'
    answers:
      - { value: '`\\InvalidArgumentException`', correct: false }
      - { value: '`Symfony\\Component\\Validator\\Exception\\UnexpectedTypeException`', correct: true }
      - { value: '`\\RuntimeException`', correct: false }
      - { value: '`Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException`', correct: false }
    help: |
      `UnexpectedTypeException` should be thrown if the constraint itself is not of the expected type, and `UnexpectedValueException` if the value being validated is of an unexpected type.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_4
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'How can you dynamically determine validation groups for a Symfony Form based on the submitted data?'
    answers:
      - { value: 'By setting the `validation_groups` option to a string containing comma-separated group names.', correct: false }
      - { value: 'By implementing `GroupSequenceProviderInterface` on the form type.', correct: false }
      - { value: 'By setting the `validation_groups` option to a `Closure` that receives the `FormInterface` object.', correct: true }
      - { value: 'By overriding the `getValidationGroups()` method in the form type.', correct: false }
    help: |
      The `validation_groups` option in form options can accept a Closure for dynamic group selection.
      https://github.com/symfony/symfony-docs/blob/7.3/form/data_based_validation.rst#_snippet_1
  -
    question: 'What is the purpose of the `otherwise` option in the `#[Assert\\When]` constraint?'
    answers:
      - { value: 'It defines constraints that are applied if the main `expression` evaluates to `true`.', correct: false }
      - { value: 'It defines constraints that are applied if the main `expression` evaluates to `false` (or a falsey value).', correct: true }
      - { value: 'It specifies an alternative message if the main constraints fail.', correct: false }
      - { value: 'It is used for defining a fallback validation group.', correct: false }
    help: |
      The `otherwise` option specifies constraints to apply when the `expression` is falsey.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_3
  -
    question: 'When using `#[Assert\\When]` with an `expression` that is a string, which variables are available within the expression context in Symfony 7.2 and later?'
    answers:
      - { value: '`this` (the object being validated)', correct: true }
      - { value: '`value` (the value of the property being validated)', correct: true }
      - { value: '`container` (the service container)', correct: false }
      - { value: '`context` (the `ExecutionContextInterface` object)', correct: true }
    help: |
      The `expression` option provides `this`, `value`, and `context` variables.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_4
  -
    question: 'How can you apply a `Callback` constraint to an entire class using the `loadValidatorMetadata` static method?'
    answers:
      - { value: '$metadata->addPropertyConstraint(''this'', new Assert\\Callback(''validate''));', correct: false }
      - { value: '$metadata->addMethodConstraint(''validate'', new Assert\\Callback());', correct: false }
      - { value: '$metadata->addConstraint(new Assert\\Callback(''validate''));', correct: true }
      - { value: '$metadata->addGetterConstraint(''validate'', new Assert\\Callback());', correct: false }
    help: |
      To apply a `Callback` constraint to the class itself, use `addConstraint()` on the `ClassMetadata` object.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#_snippet_4
  -
    question: 'What is the primary benefit of using `Validation::createCallable()` when integrating the Symfony Validator with other components like `OptionsResolver` or `QuestionHelper`?'
    answers:
      - { value: 'It allows for direct validation of form fields without defining constraints on entities.', correct: false }
      - { value: 'It returns a `Closure` that can be used as a callable validator, making integration seamless.', correct: true }
      - { value: 'It automatically registers all constraints defined in YAML or XML files.', correct: false }
      - { value: 'It provides a way to mock the validator for testing purposes.', correct: false }
    help: |
      `createCallable()` returns a closure suitable for use in contexts that expect a callable validator.
      https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#_snippet_19
      https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#_snippet_24
  -
    question: 'When validating a collection (e.g., an array of objects) with `#[Assert\\Count(min: 1)]`, what does the `minMessage` option allow you to customize?'
    answers:
      - { value: 'The message displayed if the collection has too many elements.', correct: false }
      - { value: 'The message displayed if the collection has fewer elements than `min`.', correct: true }
      - { value: 'The message displayed if any element within the collection fails validation.', correct: false }
      - { value: 'The message displayed if the collection is not an array.', correct: false }
    help: |
      `minMessage` is specifically for when the collection size is less than the `min` value.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#_snippet_2
  -
    question: 'How can you set a custom translation domain for a specific validation violation within a custom validator?'
    answers:
      - { value: 'By calling `$this->context->setTranslationDomain(''my_domain'');` before adding the violation.', correct: false }
      - { value: 'By passing the domain as an option to the constraint definition.', correct: false }
      - { value: 'By chaining `setTranslationDomain()` to the `buildViolation()` call: `$this->context->buildViolation(...)->setTranslationDomain(''my_domain'')->addViolation();`', correct: true }
      - { value: 'Translation domains are globally configured and cannot be set per violation.', correct: false }
    help: |
      The `setTranslationDomain()` method can be chained to the violation builder.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#_snippet_7
  -
    question: 'What is the primary use case for the `#[Assert\\Collection]` constraint?'
    answers:
      - { value: 'To validate that a value is an instance of `\\Traversable`.', correct: false }
      - { value: 'To validate the structure and content of an array or `\\Traversable` object, including nested constraints.', correct: true }
      - { value: 'To ensure all elements in an array are of the same type.', correct: false }
      - { value: 'To count the number of elements in a collection.', correct: false }
    help: |
      The `Collection` constraint is powerful for validating the structure of arrays or objects implementing `Traversable`.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_1
  -
    question: 'When using `#[Assert\\Valid]` on a `\\Traversable` property, what is the default value of the `traverse` option, and what does it imply?'
    answers:
      - { value: '`false`, meaning elements are not validated by default.', correct: false }
      - { value: '`true`, meaning all containing values will be validated recursively.', correct: true }
      - { value: '`true`, but only if the `Traversable` is an array.', correct: false }
      - { value: 'It is ignored; `Traversable` objects are never validated by `Valid`.', correct: false }
    help: |
      The `traverse` option for `Valid` is `true` by default for `Traversable` objects, ensuring nested validation. Arrays are always traversed.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_7
  -
    question: 'Which of the following is a valid way to apply a `NotBlank` constraint to the `name` property of an `Author` entity using YAML configuration?'
    answers:
      - { value: '''App\\Entity\\Author: properties: name: - NotBlank: ~''', correct: true }
      - { value: '''App\\Entity\\Author: name: - NotBlank: true''', correct: false }
      - { value: '''properties: App\\Entity\\Author.name: - NotBlank: {}''', correct: false }
      - { value: '''App\\Entity\\Author: constraints: name: NotBlank''', correct: false }
    help: |
      YAML configuration for properties uses the `properties` key, followed by the property name and a list of constraints.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_2
  -
    question: 'When integrating Symfony Forms with the Validator component, which extension needs to be added to the `FormFactoryBuilder`?'
    answers:
      - { value: '`FormValidationExtension`', correct: false }
      - { value: '`ValidatorExtension`', correct: true }
      - { value: '`ValidationFormExtension`', correct: false }
      - { value: '`Symfony\\Component\\Form\\Extension\\Validator\\ValidatorExtension`', correct: true }
    help: |
      The `ValidatorExtension` is crucial for enabling validation in Symfony Forms.
      https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#_snippet_18
  -
    question: 'What is the purpose of `Symfony\\Component\\Validator\\Validation::createIsValidCallable()`?'
    answers:
      - { value: 'It creates a callable that throws a `ValidationFailedException` if validation fails.', correct: false }
      - { value: 'It creates a callable that returns `true` on success and `false` on failure.', correct: true }
      - { value: 'It creates a callable that returns a `ConstraintViolationListInterface` object.', correct: false }
      - { value: 'It is deprecated in Symfony 7.', correct: false }
    help: |
      `createIsValidCallable()` returns a closure that returns `false` when constraints are not matched.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_8
  -
    question: 'Which of the following is true regarding `#[Assert\\Email]` constraint in Symfony?'
    answers:
      - { value: 'It only validates the format of the email address, not its existence.', correct: true }
      - { value: 'It requires an internet connection to verify the email domain.', correct: false }
      - { value: 'It can be configured to check for specific email providers.', correct: false }
      - { value: 'It automatically cleans the email string before validation.', correct: false }
    help: |
      The `Email` constraint primarily validates the format. (General knowledge, not explicitly in provided snippets, but a common understanding of this constraint).
  -
    question: 'What is the correct way to pass an error message to `buildViolation()` in a custom validator that can be translated?'
    answers:
      - { value: '$this->context->buildViolation(''my.message.key'')->addViolation();', correct: false }
      - { value: '$this->context->buildViolation(new TranslatableMessage(''my.message.key''))->addViolation();', correct: true }
      - { value: '$this->context->buildViolation($constraint->message)->addViolation();', correct: true }
      - { value: '$this->context->buildViolation(Translator::trans(''my.message.key''))->addViolation();', correct: false }
    help: |
      You can pass a `TranslatableMessage` object or the constraint's message property (which can be a TranslatableMessage or a string that will be translated by default).
      https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#_snippet_5
  -
    question: 'When using `#[Assert\\Length(max: 5)]`, what is the validation result if the value''s length is 6 characters?'
    answers:
      - { value: 'A violation is triggered.', correct: true }
      - { value: 'The value is truncated to 5 characters.', correct: false }
      - { value: 'The validation passes.', correct: false }
      - { value: 'An `InvalidArgumentException` is thrown.', correct: false }
    help: |
      The `max` option means validation fails if the length is greater than the specified maximum.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_5
  -
    question: 'In a Symfony application, how is the `ValidatorInterface` typically injected into a controller or service?'
    answers:
      - { value: 'Via constructor injection or method injection (e.g., `__construct(ValidatorInterface $validator)`).', correct: true }
      - { value: 'By calling `new ValidatorInterface()` directly.', correct: false }
      - { value: 'By using `$this->get(''validator'')` in a controller (if extending `AbstractController`).', correct: false }
      - { value: 'It is automatically available as a global variable.', correct: false }
    help: |
      Symfony's dependency injection container automatically provides the `ValidatorInterface` service.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_3
  -
    question: 'What is the correct way to define a custom validation method `isPasswordSafe()` as a getter constraint using `loadValidatorMetadata`?'
    answers:
      - { value: '$metadata->addPropertyConstraint(''passwordSafe'', new Assert\\IsTrue());', correct: false }
      - { value: '$metadata->addGetterConstraint(''passwordSafe'', new Assert\\IsTrue());', correct: true }
      - { value: '$metadata->addMethodConstraint(''isPasswordSafe'', new Assert\\IsTrue());', correct: false }
      - { value: '$metadata->addConstraint(new Assert\\IsTrue(''isPasswordSafe''));', correct: false }
    help: |
      `addGetterConstraint` is used for validating values returned by getter methods.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_0
  -
    question: 'When defining validation constraints using XML, what is the root element of the configuration file?'
    answers:
      - { value: '`<validation-mapping>`', correct: false }
      - { value: '`<constraints>`', correct: false }
      - { value: '`<constraint-mapping>`', correct: true }
      - { value: '`<symfony-validation>`', correct: false }
    help: |
      The root element for XML validation configuration is `constraint-mapping`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_3
  -
    question: 'Which of the following is NOT a valid way to define validation constraints in Symfony?'
    answers:
      - { value: 'Using annotations (deprecated in PHP 8, but still supported for compatibility)', correct: false }
      - { value: 'Using JSON files', correct: true }
      - { value: 'Using PHP attributes', correct: false }
      - { value: 'Using YAML files', correct: false }
    help: |
      Symfony validation supports PHP attributes, YAML, XML, and programmatic `loadValidatorMetadata`, but not JSON files for constraint definition.
  -
    question: 'What is the purpose of the `payload` argument in a custom validator''s `validate` method or when building a violation?'
    answers:
      - { value: 'It contains the raw HTTP request data.', correct: false }
      - { value: 'It allows passing arbitrary custom data to the violation for later processing (e.g., by error handlers).', correct: true }
      - { value: 'It holds the validated value.', correct: false }
      - { value: 'It is used to specify the validation group.', correct: false }
    help: |
      The `payload` can carry custom data associated with a violation. (General knowledge, not explicitly in provided snippets, but a common feature of the validator).
  -
    question: 'If you have a `User` entity with a `creditCard` property and you want to validate its `creditCard` property only when the user is a `Premium` user, which validation concept should you use?'
    answers:
      - { value: 'Validation scopes', correct: false }
      - { value: 'Validation groups', correct: true }
      - { value: 'Custom callback validators', correct: false }
      - { value: 'Group sequence', correct: false }
    help: |
      Validation groups allow applying constraints conditionally based on the context.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_2
  -
    question: 'What is the difference between `Validation::createCallable()` and `Validation::createIsValidCallable()`?'
    answers:
      - { value: '`createCallable()` returns a closure that throws an exception on failure, while `createIsValidCallable()` returns a closure that returns `false` on failure.', correct: true }
      - { value: '`createCallable()` is for object validation, `createIsValidCallable()` is for scalar validation.', correct: false }
      - { value: '`createCallable()` is deprecated, `createIsValidCallable()` is the modern approach.', correct: false }
      - { value: 'There is no functional difference; they are aliases.', correct: false }
    help: |
      `createCallable()` throws `ValidationFailedException`, while `createIsValidCallable()` returns a boolean.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_8
  -
    question: 'When defining a `GroupSequence` using PHP attributes, which attribute is used at the class level?'
    answers:
      - { value: '`#[Assert\\GroupSequenceProvider]`', correct: false }
      - { value: '`#[Assert\\ValidationSequence]`', correct: false }
      - { value: '`#[Assert\\GroupSequence]`', correct: true }
      - { value: '`#[Assert\\Sequence]`', correct: false }
    help: |
      The `#[Assert\\GroupSequence]` attribute is used to define a group sequence directly on the class.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_0
  -
    question: 'What is the correct way to handle validation errors and return them as a string in a Symfony controller?'
    answers:
      - { value: '`return new Response($errors->toString());`', correct: false }
      - { value: '`return new Response((string) $errors);`', correct: true }
      - { value: '`return new Response(json_encode($errors));`', correct: false }
      - { value: '`return new Response($errors->getMessages());`', correct: false }
    help: |
      The `ConstraintViolationList` object has a `__toString()` method that provides a readable string representation of errors.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_4
  -
    question: 'Which of the following built-in constraints can be used to validate that a string contains only alphanumeric characters?'
    answers:
      - { value: '`#[Assert\\Alphanumeric]`', correct: false }
      - { value: '`#[Assert\\Regex(pattern: "/^[a-zA-Z0-9]+$/")]`', correct: true }
      - { value: '`#[Assert\\Type(''string'')]` combined with `#[Assert\\Length]`', correct: false }
      - { value: '`#[Assert\\Ascii]`', correct: false }
    help: |
      While there isn't a direct `Alphanumeric` constraint, the `Regex` constraint can achieve this by specifying the appropriate pattern.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'When using `#[Assert\\When]` with a `Closure` for the `expression` option (Symfony 7.3+), what is passed as the first argument to the closure?'
    answers:
      - { value: 'The validated value of the property.', correct: false }
      - { value: 'The `ExecutionContextInterface` object.', correct: false }
      - { value: 'The object being validated.', correct: true }
      - { value: 'The constraint instance.', correct: false }
    help: |
      For a Closure expression, the first argument is the object being validated.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_4
  -
    question: 'What is the purpose of `atPath()` when building a validation violation using `buildViolation()`?'
    answers:
      - { value: 'To specify the exact file path where the violation occurred.', correct: false }
      - { value: 'To set the property path relative to the root object where the violation occurred.', correct: true }
      - { value: 'To define the URL path where the error message should be displayed.', correct: false }
      - { value: 'To indicate the depth of the nested object where the violation was found.', correct: false }
    help: |
      `atPath()` sets the property path for the violation, indicating which specific field caused the error.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_11
  -
    question: 'Which of the following is a valid way to define a `Length` constraint with a minimum of 5 and maximum of 20 characters using `loadValidatorMetadata`?'
    answers:
      - { value: '''$metadata->addPropertyConstraint(''name'', new Assert\\Length(min: 5, max: 20));''', correct: true }
      - { value: '''$metadata->addPropertyConstraint(''name'', new Assert\\Length([''min'' => 5, ''max'' => 20]));''', correct: false }
      - { value: '''$metadata->addPropertyConstraint(''name'', new Assert\\Length()->setMin(5)->setMax(20));''', correct: false }
      - { value: '''$metadata->addPropertyConstraint(''name'', new Assert\\Length(options: [''min'' => 5, ''max'' => 20]));''', correct: false }
    help: |
      Named arguments are the standard way to pass options to constraints in PHP attributes and when instantiating them.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#_snippet_1
  -
    question: 'When should you use `#[Assert\\When]` instead of `GroupSequenceProviderInterface`?'
    answers:
      - { value: '`#[Assert\\When]` is for class-level conditional validation, while `GroupSequenceProviderInterface` is for property-level.', correct: false }
      - { value: '`#[Assert\\When]` is for conditional application of constraints on a specific property or method, while `GroupSequenceProviderInterface` determines the overall validation flow for an object.', correct: true }
      - { value: '`GroupSequenceProviderInterface` is deprecated in favor of `#[Assert\\When]`.', correct: false }
      - { value: 'They are interchangeable; it''s a matter of preference.', correct: false }
    help: |
      `Assert\\When` applies constraints conditionally to a specific element based on an expression, whereas `GroupSequenceProviderInterface` defines the sequence of groups for the entire object.
      https://symfony.com/doc/current/reference/constraints/When.rst
      https://symfony.com/doc/current/validation/sequence_provider.rst
  -
    question: 'What is the significance of the `Default` validation group?'
    answers:
      - { value: 'It is a special group that always contains all constraints, regardless of explicit group assignment.', correct: false }
      - { value: 'It is the group applied when no specific validation groups are provided to the validator.', correct: true }
      - { value: 'It is a reserved keyword and cannot be used for custom constraints.', correct: false }
      - { value: 'It ensures that validation stops at the first error found.', correct: false }
    help: |
      The `Default` group is used by default when no other groups are specified.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst
  -
    question: 'If you have a form and want to ensure that the `Default` validation group is *always* included along with dynamically selected groups, how would you configure the `validation_groups` option?'
    answers:
      - { value: '''`validation_groups` => ['Default', function (FormInterface $form) { /* ... */ return ['person']; }]''', correct: false }
      - { value: '''`validation_groups` => function (FormInterface $form) { $data = $form->getData(); if (Client::TYPE_PERSON == $data->getType()) { return ['Default', 'person']; } return ['Default', 'company']; }''', correct: true }
      - { value: '''`validation_groups` => ['Default', 'dynamic_group_provider']''', correct: false }
      - { value: '''`validation_groups` => new GroupSequence(['Default', 'dynamic_groups'])''', correct: false }
    help: |
      The Closure should explicitly return `Default` along with any other desired groups.
      https://github.com/symfony/symfony-docs/blob/7.3/form/data_based_validation.rst#_snippet_2
  -
    question: 'What does the `{{ limit }}` parameter represent in the `minMessage` of a `Length` constraint?'
    answers:
      - { value: 'The actual length of the invalid value.', correct: false }
      - { value: 'The expected minimum length defined in the constraint.', correct: true }
      - { value: 'The maximum allowed length.', correct: false }
      - { value: 'A unique identifier for the violation.', correct: false }
    help: |
      `{{ limit }}` refers to the `min` value set in the constraint.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_8
  -
    question: 'Which of the following is true about the `Valid` constraint''s interaction with validation groups?'
    answers:
      - { value: 'It only validates nested objects if they belong to the `Default` group.', correct: false }
      - { value: 'It always applies by default, even if you specify a group when calling the validator, unless you explicitly define the `groups` option for `Valid`.', correct: true }
      - { value: 'It implicitly inherits the validation groups from the parent object.', correct: false }
      - { value: 'It is ignored if the parent object is validated with a specific group.', correct: false }
    help: |
      The `Valid` constraint has a unique behavior regarding groups; it's always applied unless its own `groups` option is set.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_7
  -
    question: 'When writing a unit test for a custom constraint validator, which base class should your test extend?'
    answers:
      - { value: '`PHPUnit\\Framework\\TestCase`', correct: false }
      - { value: '`Symfony\\Component\\Validator\\Test\\ConstraintValidatorTestCase`', correct: true }
      - { value: '`Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase`', correct: false }
      - { value: '`Symfony\\Component\\Validator\\Test\\ValidatorTestCase`', correct: false }
    help: |
      `ConstraintValidatorTestCase` provides utilities for testing custom validators.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_13
  -
    question: 'What is the purpose of the `message` option in the `#[Assert\\Choice]` constraint when `multiple` is set to `false`?'
    answers:
      - { value: 'It defines the message shown when multiple choices are selected but not allowed.', correct: false }
      - { value: 'It defines the message shown when the selected value is not among the valid choices.', correct: true }
      - { value: 'It specifies a custom message for each invalid choice.', correct: false }
      - { value: 'It is used to translate the default error message.', correct: false }
    help: |
      The `message` option provides the error text when a single value is not found in the choices.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#_snippet_7
  -
    question: 'Which method is used on `ClassMetadata` to add a constraint to a specific property of a class?'
    answers:
      - { value: '`addConstraint()`', correct: false }
      - { value: '`addPropertyConstraint()`', correct: true }
      - { value: '`setPropertyConstraint()`', correct: false }
      - { value: '`addMemberConstraint()`', correct: false }
    help: |
      `addPropertyConstraint()` is specifically for adding constraints to properties.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#_snippet_0
  -
    question: 'When is a `ConstraintViolationList` object considered to have no errors?'
    answers:
      - { value: 'When its `count()` method returns `0`.', correct: true }
      - { value: 'When its `isEmpty()` method returns `true`.', correct: true }
      - { value: 'When it evaluates to `false` in a boolean context.', correct: false }
      - { value: 'When its `getViolations()` method returns an empty array.', correct: false }
    help: |
      Checking `count() > 0` or `!$errors->count()` is the standard way to check for violations.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_3
  -
    question: 'What is the role of `ExecutionContextInterface` when implementing a custom callback validator?'
    answers:
      - { value: 'It provides access to the validated value and the constraint options.', correct: false }
      - { value: 'It allows building and adding validation violations to the list of errors.', correct: true }
      - { value: 'It manages the lifecycle of the validator service.', correct: false }
      - { value: 'It is used to define the validation groups for the callback.', correct: false }
    help: |
      `ExecutionContextInterface` provides the context for validation, including the ability to add violations.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#_snippet_3
  -
    question: 'Which of the following describes a "validation scope" in Symfony?'
    answers:
      - { value: 'The specific entity or form being validated.', correct: false }
      - { value: 'The context in which validation is performed, such as property-level, getter-level, or class-level validation.', correct: true }
      - { value: 'The set of validation groups applied during a specific validation run.', correct: false }
      - { value: 'The range of values allowed for a given constraint.', correct: false }
    help: |
      Validation scopes refer to where constraints are applied: properties, getters, or the class itself.
      https://symfony.com/doc/current/validation/custom_constraint.html#class-constraint-vs-property-constraint (Conceptual, not directly in snippets, but implied by `addPropertyConstraint`, `addGetterConstraint`, `addConstraint`).
  -
    question: 'What is the primary difference between a property constraint and a class constraint?'
    answers:
      - { value: 'Property constraints validate individual properties, while class constraints validate the object as a whole, often based on relationships between properties.', correct: true }
      - { value: 'Property constraints are defined in YAML, class constraints in PHP attributes.', correct: false }
      - { value: 'Property constraints are always applied, class constraints only with specific validation groups.', correct: false }
      - { value: 'Class constraints are faster to execute than property constraints.', correct: false }
    help: |
      Property constraints check individual property values. Class constraints (like `Callback` on the class level) check the object's overall state.
      https://symfony.com/doc/current/validation/custom_constraint.html#class-constraint-vs-property-constraint (Conceptual, implied by snippets like `addPropertyConstraint` vs `addConstraint(new Assert\\Callback())`).
  -
    question: 'Which constraint would you use to ensure that a collection (e.g., an array) contains at least 3 elements and at most 10 elements?'
    answers:
      - { value: '`#[Assert\\Length(min: 3, max: 10)]`', correct: false }
      - { value: '`#[Assert\\Count(min: 3, max: 10)]`', correct: true }
      - { value: '`#[Assert\\Collection(min: 3, max: 10)]`', correct: false }
      - { value: '`#[Assert\\Range(min: 3, max: 10)]`', correct: false }
    help: |
      The `Count` constraint is specifically for validating the number of elements in a collection.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#_snippet_2
  -
    question: 'What is the correct way to render a Twig template and pass validation errors to it in a Symfony controller?'
    answers:
      - { value: '`return $this->render(''template.html.twig'', [''errors'' => $errors->toArray()]);`', correct: false }
      - { value: '`return $this->render(''template.html.twig'', [''errors'' => $errors]);`', correct: true }
      - { value: '`return $this->render(''template.html.twig'', [''violations'' => $errors->getViolations()]);`', correct: false }
      - { value: '`return $this->render(''template.html.twig'', [''validationErrors'' => (string) $errors]);`', correct: false }
    help: |
      The `ConstraintViolationList` object can be passed directly to Twig, where it can be iterated over.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_6
  -
    question: 'Consider a scenario where you have a custom constraint `#[App\\Validator\\ContainsAlphanumeric]` and its validator `ContainsAlphanumericValidator`. If the `validate` method receives a non-string value, what should happen according to Symfony best practices for custom validators?'
    answers:
      - { value: 'It should silently ignore the value and return.', correct: false }
      - { value: 'It should convert the value to a string before validation.', correct: false }
      - { value: 'It should throw an `UnexpectedValueException`.', correct: true }
      - { value: 'It should add a violation indicating an invalid type.', correct: false }
    help: |
      Custom validators should throw `UnexpectedValueException` if they cannot handle the passed type.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'What is the purpose of the `setParameter()` method when building a violation using `buildViolation()`?'
    answers:
      - { value: 'To set the value of the property that caused the violation.', correct: false }
      - { value: 'To replace placeholders in the error message with dynamic values.', correct: true }
      - { value: 'To define the severity level of the violation (e.g., warning, error).', correct: false }
      - { value: 'To associate the violation with a specific validation group.', correct: false }
    help: |
      `setParameter()` is used to inject dynamic data into translatable error messages.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#_snippet_5
  -
    question: 'Which of the following constraints would you use to ensure that a string is a valid URL?'
    answers:
      - { value: '`#[Assert\\Url]`', correct: true }
      - { value: '`#[Assert\\Link]`', correct: false }
      - { value: '`#[Assert\\WebAddress]`', correct: false }
      - { value: '`#[Assert\\Uri]`', correct: false }
    help: |
      The `Url` constraint is specifically designed for validating URLs. (General knowledge, common built-in constraint).
  -
    question: 'What is the correct way to define a custom callback method `doComplexValidation` for conditional validation using `#[Assert\\When]` and `loadValidatorMetadata`?'
    answers:
      - { value: '''$metadata->addPropertyConstraint(''type'', new Assert\\When(expression: ''value == "percent"'', constraints: [new Assert\\Callback(''doComplexValidation'')],));''', correct: true }
      - { value: '''$metadata->addPropertyConstraint(''type'', new Assert\\When(expression: ''value == "percent"'', callback: ''doComplexValidation'',));''', correct: false }
      - { value: '''$metadata->addPropertyConstraint(''type'', new Assert\\When(expression: ''value == "percent"'', method: ''doComplexValidation'',));''', correct: false }
      - { value: '''$metadata->addPropertyConstraint(''type'', new Assert\\When(expression: ''value == "percent"'', validator: new Assert\\Callback(''doComplexValidation''),));''', correct: false }
    help: |
      The `Callback` constraint is placed within the `constraints` option of `Assert\\When`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_8
  -
    question: 'If you have a `User` entity with a `password` property and you want to ensure it''s not blank and has a minimum length of 7 characters, which constraints would you apply?'
    answers:
      - { value: '`#[Assert\\NotNull]`, `#[Assert\\MinLength(7)]`', correct: false }
      - { value: '`#[Assert\\NotBlank]`, `#[Assert\\Length(min: 7)]`', correct: true }
      - { value: '`#[Assert\\Required]`, `#[Assert\\Size(min: 7)]`', correct: false }
      - { value: '`#[Assert\\NotEmpty]`, `#[Assert\\Min(7)]`', correct: false }
    help: |
      `NotBlank` checks for non-empty values, and `Length` with `min` checks the minimum string length.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_0
  -
    question: 'What is the main advantage of using `loadValidatorMetadata` over PHP attributes for defining constraints?'
    answers:
      - { value: 'It allows for more dynamic and programmatic definition of constraints, potentially based on runtime conditions.', correct: true }
      - { value: 'It is the only way to define class-level constraints.', correct: false }
      - { value: 'It provides better performance during validation.', correct: false }
      - { value: 'It is easier to read and maintain for simple cases.', correct: false }
    help: |
      `loadValidatorMetadata` offers programmatic control over constraint definition.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_4
  -
    question: 'When validating an array structure using `#[Assert\\Collection]`, how do you specify constraints for a nested array key, for example, `name.first_name`?'
    answers:
      - { value: 'By defining a nested `Collection` constraint where the key matches the nested array key.', correct: true }
      - { value: 'By using `#[Assert\\Property(path: "name.first_name")]`', correct: false }
      - { value: '`Collection` only validates top-level keys, not nested ones.', correct: false }
      - { value: 'By using `#[Assert\\Nested(key: "name.first_name")]`', correct: false }
    help: |
      Nested `Collection` constraints are used to validate nested array structures.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_1
  -
    question: 'What is the purpose of the `#[Assert\\All]` constraint when used within a `#[Assert\\Collection]`?'
    answers:
      - { value: 'It ensures that all elements in a collection are of the same type.', correct: false }
      - { value: 'It applies a set of constraints to *each* element within a collection (e.g., an array of objects).', correct: true }
      - { value: 'It validates that all properties of an object satisfy their constraints.', correct: false }
      - { value: 'It aggregates violations from multiple constraints into a single error message.', correct: false }
    help: |
      `All` applies its nested constraints to every element of the collection it's applied to.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_1
  -
    question: 'Which of the following is a valid way to define a `NotBlank` constraint for the `name` property of an `Author` entity using XML configuration?'
    answers:
      - { value: '''<class name="App\\Entity\\Author"><property name="name"><constraint name="NotBlank"/></property></class>''', correct: true }
      - { value: '''<class name="App\\Entity\\Author"><constraint name="NotBlank" property="name"/></class>''', correct: false }
      - { value: '''<property name="name" class="App\\Entity\\Author"><constraint name="NotBlank"/></property>''', correct: false }
      - { value: '''<constraint-mapping><property name="name"><constraint name="NotBlank"/></property></constraint-mapping>''', correct: false }
    help: |
      XML configuration uses `<class>` and `<property>` tags to define constraints.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_2
  -
    question: 'When using `#[Assert\\When]` with the `expression` option, what is the effect if the expression evaluates to a falsey value?'
    answers:
      - { value: 'Constraints defined in the `constraints` option are applied, and `otherwise` constraints are ignored.', correct: false }
      - { value: 'Constraints defined in the `constraints` option are ignored, and `otherwise` constraints are applied.', correct: true }
      - { value: 'Validation stops immediately, and no constraints are applied.', correct: false }
      - { value: 'An error is triggered because the expression must always be truthy.', correct: false }
    help: |
      If the expression is falsey, the `constraints` are skipped, and `otherwise` constraints are considered.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#_snippet_4
  -
    question: 'What is the purpose of the `#[Assert\\Optional]` constraint within a `#[Assert\\Collection]`?'
    answers:
      - { value: 'It makes the entire collection optional.', correct: false }
      - { value: 'It allows a specific key within the collection to be missing without triggering a violation.', correct: true }
      - { value: 'It makes all nested constraints within it optional.', correct: false }
      - { value: 'It specifies that the value for a key can be `null`.', correct: false }
    help: |
      `Optional` allows a key to be absent in the input array without causing a violation.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_1
  -
    question: 'How can you ensure that a custom validation message for a violation is translated using a specific translation domain (e.g., `validation_errors`)?'
    answers:
      - { value: 'By setting `translation_domain` as an option on the constraint itself.', correct: false }
      - { value: 'By calling `setTranslationDomain()` on the `ConstraintViolationBuilderInterface` returned by `buildViolation()`.', correct: true }
      - { value: 'By configuring the default translation domain for the validator service in `services.yaml`.', correct: false }
      - { value: 'By prefixing the message key with the domain, e.g., `validation_errors:my_message_key`.', correct: false }
    help: |
      `setTranslationDomain()` on the violation builder allows specifying the domain per violation.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#_snippet_7
  -
    question: 'When defining a `GroupSequence` using YAML, what is the key used to specify the sequence?'
    answers:
      - { value: '`groups_sequence`', correct: false }
      - { value: '`group_sequence`', correct: true }
      - { value: '`validation_sequence`', correct: false }
      - { value: '`sequence`', correct: false }
    help: |
      The `group_sequence` key is used in YAML to define the validation group order.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_0
  -
    question: 'What is the primary function of the `ConstraintViolationListInterface` returned by the `ValidatorInterface::validate()` method?'
    answers:
      - { value: 'To provide a boolean indicating whether validation passed or failed.', correct: false }
      - { value: 'To store and provide access to all detected validation errors (violations).', correct: true }
      - { value: 'To log validation events to a file.', correct: false }
      - { value: 'To automatically redirect the user to an error page.', correct: false }
    help: |
      `ConstraintViolationListInterface` is the collection of all validation errors.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_3
  -
    question: 'Which of the following is a valid way to define a custom validation callback method directly within an entity class, to be invoked for class-level validation?'
    answers:
      - { value: '''public function validate(ValidatorInterface $validator): void { /* ... */ }''', correct: false }
      - { value: '''public function validate(ExecutionContextInterface $context): void { /* ... */ }''', correct: true }
      - { value: '''public static function validateEntity(object $entity): void { /* ... */ }''', correct: false }
      - { value: '''public function customValidation(): array { /* ... */ }''', correct: false }
    help: |
      A class-level callback method should accept `ExecutionContextInterface` as its argument.
      https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#_snippet_3
  -
    question: 'What happens if a `GroupSequenceProviderInterface` is defined on an object, and you explicitly pass validation groups to `ValidatorInterface::validate()`?'
    answers:
      - { value: 'The `GroupSequenceProviderInterface` takes precedence, and its sequence is always used.', correct: false }
      - { value: 'The explicitly passed groups override the sequence defined by `GroupSequenceProviderInterface`.', correct: true }
      - { value: 'Both the explicitly passed groups and the sequence from the provider are merged.', correct: false }
      - { value: 'An error is thrown due to conflicting group definitions.', correct: false }
    help: |
      Explicitly passed groups override the `GroupSequenceProviderInterface`. (General knowledge, common behavior for explicit overrides).
  -
    question: 'Which constraint would you use to ensure that a string value is a valid UUID (Universally Unique Identifier)?'
    answers:
      - { value: '`#[Assert\\Uuid]`', correct: true }
      - { value: '`#[Assert\\Guid]`', correct: false }
      - { value: '`#[Assert\\UniqueId]`', correct: false }
      - { value: '`#[Assert\\Identifier]`', correct: false }
    help: |
      The `Uuid` constraint validates UUID strings. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `message` option in most built-in Symfony validation constraints?'
    answers:
      - { value: 'To define a unique identifier for the constraint.', correct: false }
      - { value: 'To provide the default error message displayed when the constraint is violated.', correct: true }
      - { value: 'To specify the translation key for the error message.', correct: false }
      - { value: 'To set a custom success message if validation passes.', correct: false }
    help: |
      The `message` option allows customizing the error message.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#_snippet_0
  -
    question: 'Which constraint is suitable for validating that a string represents a valid IP address (IPv4 or IPv6)?'
    answers:
      - { value: '`#[Assert\\IpAddress]`', correct: false }
      - { value: '`#[Assert\\Ip]`', correct: true }
      - { value: '`#[Assert\\NetworkAddress]`', correct: false }
      - { value: '`#[Assert\\Host]`', correct: false }
    help: |
      The `Ip` constraint validates IP addresses. (General knowledge, common built-in constraint).
  -
    question: 'When defining a custom constraint, what is the purpose of the `validatedBy()` method in the constraint class?'
    answers:
      - { value: 'It specifies the service ID of the validator that will handle this constraint.', correct: true }
      - { value: 'It defines the validation groups that the constraint belongs to.', correct: false }
      - { value: 'It returns the default error message for the constraint.', correct: false }
      - { value: 'It indicates whether the constraint applies to properties or classes.', correct: false }
    help: |
      `validatedBy()` links the constraint to its corresponding validator. (General knowledge, crucial for custom constraints).
  -
    question: 'Which of the following constraints can be used to validate that a value is a valid date and/or time?'
    answers:
      - { value: '`#[Assert\\Date]`', correct: true }
      - { value: '`#[Assert\\Time]`', correct: true }
      - { value: '`#[Assert\\DateTime]`', correct: true }
      - { value: '`#[Assert\\Timestamp]`', correct: false }
    help: |
      Symfony provides `Date`, `Time`, and `DateTime` constraints for validating date and time formats. (General knowledge, common built-in constraints).
  -
    question: 'What is the default translation domain for validation messages in Symfony?'
    answers:
      - { value: '`messages`', correct: false }
      - { value: '`validators`', correct: true }
      - { value: '`validation`', correct: false }
      - { value: '`app`', correct: false }
    help: |
      The default translation domain for validation messages is `validators`.
      https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#_snippet_18 (Implied by the resource loading).
  -
    question: 'Which constraint should be used to validate that a file upload is of a specific MIME type (e.g., `image/jpeg`)?'
    answers:
      - { value: '`#[Assert\\File(mimeTypes: ["image/jpeg"])]`', correct: true }
      - { value: '`#[Assert\\Image]`', correct: false }
      - { value: '`#[Assert\\MimeType(type: "image/jpeg")]`', correct: false }
      - { value: '`#[Assert\\Upload(type: "image/jpeg")]`', correct: false }
    help: |
      The `File` constraint has a `mimeTypes` option for validating file types. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `min` and `max` options in the `#[Assert\\Count]` constraint?'
    answers:
      - { value: 'They define the minimum and maximum value for each element in the collection.', correct: false }
      - { value: 'They define the minimum and maximum number of elements allowed in the collection.', correct: true }
      - { value: 'They define the minimum and maximum length of string elements in the collection.', correct: false }
      - { value: 'They specify the range of valid indices for the collection.', correct: false }
    help: |
      `min` and `max` in `Count` refer to the number of elements in the collection.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#_snippet_2
  -
    question: 'Which constraint is used to ensure that a numerical value falls within a specified range (e.g., between 1 and 100)?'
    answers:
      - { value: '`#[Assert\\Range(min: 1, max: 100)]`', correct: true }
      - { value: '`#[Assert\\Between(min: 1, max: 100)]`', correct: false }
      - { value: '`#[Assert\\NumberRange(min: 1, max: 100)]`', correct: false }
      - { value: '`#[Assert\\ValueRange(min: 1, max: 100)]`', correct: false }
    help: |
      The `Range` constraint is used for numerical range validation. (General knowledge, common built-in constraint).
  -
    question: 'What is the correct way to validate a `Product` entity using the `ValidatorInterface` in a controller, and return a 400 response if errors exist?'
    answers:
      - { value: '''$errors = $validator->validate($product); if ($errors->count() > 0) { return new Response((string) $errors, 400); }''', correct: true }
      - { value: '''$validator->validate($product); if (!$validator->isValid()) { return new Response('Invalid', 400); }''', correct: false }
      - { value: '''$errors = $validator->validate($product); if ($errors) { return new Response($errors->toJson(), 400); }''', correct: false }
      - { value: '''$errors = $validator->validate($product); if (count($errors) > 0) { return new Response($errors->getMessage(), 400); }''', correct: false }
    help: |
      The `validate()` method returns a `ConstraintViolationList` which can be cast to a string for response.
      https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#_snippet_21
  -
    question: 'Which constraint is used to ensure that a string value is a valid credit card number?'
    answers:
      - { value: '`#[Assert\\CreditCard]`', correct: true }
      - { value: '`#[Assert\\CardNumber]`', correct: false }
      - { value: '`#[Assert\\Luhn]`', correct: false }
      - { value: '`#[Assert\\PaymentCard]`', correct: false }
    help: |
      The `CreditCard` constraint validates credit card numbers. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary benefit of using validation groups?'
    answers:
      - { value: 'To organize constraints into logical sets, allowing for selective validation based on context (e.g., registration vs. profile update).', correct: true }
      - { value: 'To improve validation performance by only loading necessary constraints.', correct: false }
      - { value: 'To define the order in which constraints are applied.', correct: false }
      - { value: 'To enable different error messages for the same constraint.', correct: false }
    help: |
      Validation groups enable conditional validation.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst
  -
    question: 'How can you apply a `NotBlank` constraint to a private property `$name` using a static `loadValidatorMetadata` method in a PHP entity?'
    answers:
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void { $metadata->addPropertyConstraint(''name'', new Assert\\NotBlank()); }''', correct: true }
      - { value: '''public function __construct() { $this->addConstraint(''name'', new Assert\\NotBlank()); }''', correct: false }
      - { value: '''#[Assert\\NotBlank(property: "name")]''', correct: false }
      - { value: '''public static function validateName(ClassMetadata $metadata): void { $metadata->addConstraint(new Assert\\NotBlank()); }''', correct: false }
    help: |
      `addPropertyConstraint` is the correct method for this.
      https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#_snippet_2
  -
    question: 'Which constraint is used to validate that a value is a valid JSON string?'
    answers:
      - { value: '`#[Assert\\Json]`', correct: true }
      - { value: '`#[Assert\\IsJson]`', correct: false }
      - { value: '`#[Assert\\ValidJson]`', correct: false }
      - { value: '`#[Assert\\Serializable]`', correct: false }
    help: |
      The `Json` constraint validates JSON strings. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\UniqueEntity]` constraint (though it''s a Doctrine constraint, it relates to validation concepts)?'
    answers:
      - { value: 'To ensure a property''s value is unique across all instances of an entity in the database.', correct: true }
      - { value: 'To ensure a property''s value is unique within the current validation scope.', correct: false }
      - { value: 'To generate a unique identifier for an entity.', correct: false }
      - { value: 'To prevent duplicate form submissions.', correct: false }
    help: |
      `UniqueEntity` is a Doctrine constraint that checks for uniqueness in the database. (Common knowledge, often used with Symfony validation).
  -
    question: 'When validating a password field, you want to ensure it''s not blank and has a minimum length. Additionally, you want to ensure the password does not match the username, but only if the initial blank and length checks pass. Which validation concept best fits this scenario?'
    answers:
      - { value: 'Validation scopes', correct: false }
      - { value: 'Validation groups', correct: false }
      - { value: 'Group sequence', correct: true }
      - { value: 'Custom callback validators', correct: false }
    help: |
      A group sequence allows for staged validation, where subsequent groups are only checked if preceding ones pass.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst
  -
    question: 'Which constraint is used to validate that a value is a valid country code (ISO 3166-1 alpha-2)?'
    answers:
      - { value: '`#[Assert\\Country]`', correct: true }
      - { value: '`#[Assert\\Locale]`', correct: false }
      - { value: '`#[Assert\\Region]`', correct: false }
      - { value: '`#[Assert\\IsoCountry]`', correct: false }
    help: |
      The `Country` constraint validates country codes. (General knowledge, common built-in constraint).
  -
    question: 'What happens if you apply `#[Assert\\Valid]` to a property that is `null`?'
    answers:
      - { value: 'A violation is triggered because `null` is not a valid object.', correct: false }
      - { value: 'The `Valid` constraint is ignored, and no nested validation occurs for that property.', correct: true }
      - { value: 'An `UnexpectedValueException` is thrown.', correct: false }
      - { value: 'The validator attempts to instantiate a default object for validation.', correct: false }
    help: |
      The `Valid` constraint, like many others, generally ignores `null` values unless combined with `NotBlank` or `NotNull`.
      (Implied by general validator behavior, not explicitly in `Valid` snippets, but `Length` snippet mentions nulls are valid).
  -
    question: 'Which constraint is used to validate that a value is a valid language code (ISO 639-1 alpha-2)?'
    answers:
      - { value: '`#[Assert\\Language]`', correct: true }
      - { value: '`#[Assert\\Locale]`', correct: false }
      - { value: '`#[Assert\\Lang]`', correct: false }
      - { value: '`#[Assert\\IsoLanguage]`', correct: false }
    help: |
      The `Language` constraint validates language codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Expression]` constraint?'
    answers:
      - { value: 'To define a custom validation rule using a PHP expression, allowing complex logic without a dedicated custom validator class.', correct: true }
      - { value: 'To evaluate a mathematical expression and validate its result.', correct: false }
      - { value: 'To dynamically generate a validation message based on an expression.', correct: false }
      - { value: 'To define a regular expression pattern for string validation.', correct: false }
    help: |
      The `Expression` constraint allows for arbitrary PHP expressions to define validation rules. (General knowledge, common built-in constraint).
  -
    question: 'When using `#[Assert\\File]`, which option would you use to limit the maximum size of the uploaded file?'
    answers:
      - { value: '`maxSize`', correct: true }
      - { value: '`maxBytes`', correct: false }
      - { value: '`sizeLimit`', correct: false }
      - { value: '`fileSize`', correct: false }
    help: |
      The `maxSize` option is used to set the maximum file size. (General knowledge, common built-in constraint).
  -
    question: 'What is the role of `auto_mapping` in Doctrine configuration concerning Symfony validation?'
    answers:
      - { value: 'It automatically generates validation constraints from Doctrine entity metadata (e.g., `nullable=false` becomes `NotNull`).', correct: true }
      - { value: 'It automatically maps database columns to form fields for validation.', correct: false }
      - { value: 'It automatically creates database indexes for validated fields.', correct: false }
      - { value: 'It automatically applies all built-in Symfony constraints to Doctrine entities.', correct: false }
    help: |
      `auto_mapping` infers constraints from Doctrine metadata.
      https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#_snippet_21
  -
    question: 'Which constraint is used to validate that a value is a valid International Standard Book Number (ISBN)?'
    answers:
      - { value: '`#[Assert\\Isbn]`', correct: true }
      - { value: '`#[Assert\\BookNumber]`', correct: false }
      - { value: '`#[Assert\\ProductCode]`', correct: false }
      - { value: '`#[Assert\\Ean]`', correct: false }
    help: |
      The `Isbn` constraint validates ISBNs. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `groups` option when defining a constraint?'
    answers:
      - { value: 'To specify the default error message for the constraint.', correct: false }
      - { value: 'To assign the constraint to one or more validation groups, allowing it to be applied conditionally.', correct: true }
      - { value: 'To define the order in which multiple constraints on the same property are evaluated.', correct: false }
      - { value: 'To set the priority of the constraint during validation.', correct: false }
    help: |
      The `groups` option links a constraint to specific validation groups.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#_snippet_0
  -
    question: 'Which constraint is used to validate that a string represents a valid credit card scheme (e.g., VISA, MASTERCARD)?'
    answers:
      - { value: '`#[Assert\\CardScheme]`', correct: true }
      - { value: '`#[Assert\\CreditCardType]`', correct: false }
      - { value: '`#[Assert\\PaymentScheme]`', correct: false }
      - { value: '`#[Assert\\CardType]`', correct: false }
    help: |
      The `CardScheme` constraint validates against known credit card schemes.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_2
  -
    question: 'What is the correct way to specify validation groups when creating a form using `createFormBuilder` in a controller?'
    answers:
      - { value: '''$form = $this->createFormBuilder($user)->setValidationGroups(['registration'])->getForm();''', correct: false }
      - { value: '''$form = $this->createFormBuilder($user, ['validation_groups' => ['registration']])->getForm();''', correct: true }
      - { value: '''$form = $this->createFormBuilder($user)->addValidationGroup('registration')->getForm();''', correct: false }
      - { value: '''$form = $this->createFormBuilder($user, ['groups' => ['registration']])->getForm();''', correct: false }
    help: |
      The `validation_groups` option is passed in the options array to `createFormBuilder`.
      https://github.com/symfony/symfony-docs/blob/7.3/form/validation_groups.rst#_snippet_0
  -
    question: 'What is the primary purpose of the `#[Assert\\NotNull]` constraint?'
    answers:
      - { value: 'To ensure a string is not empty.', correct: false }
      - { value: 'To ensure a value is not `null`.', correct: true }
      - { value: 'To ensure a collection is not empty.', correct: false }
      - { value: 'To ensure a value is a valid object.', correct: false }
    help: |
      `NotNull` specifically checks for `null` values. (General knowledge, common built-in constraint).
  -
    question: 'Which of the following is true about the `#[Assert\\NotBlank]` constraint?'
    answers:
      - { value: 'It considers `null` values as valid.', correct: false }
      - { value: 'It considers an empty string (`''`) as valid.', correct: false }
      - { value: 'It considers a string containing only whitespace (`''   ''`) as valid.', correct: false }
      - { value: 'It considers `null`, empty strings, and whitespace-only strings as invalid.', correct: true }
    help: |
      `NotBlank` checks for non-empty and non-whitespace values. (General knowledge, common built-in constraint).
  -
    question: 'What is the correct way to define a `Length` constraint with a `minMessage` and `maxMessage` using PHP attributes?'
    answers:
      - { value: '''#[Assert\\Length(min: 5, max: 10, minMessage: "Too short", maxMessage: "Too long")]''', correct: true }
      - { value: '''#[Assert\\Length(min: 5, max: 10, messages: ["min" => "Too short", "max" => "Too long"])]''', correct: false }
      - { value: '''#[Assert\\Length(5, 10, "Too short", "Too long")]''', correct: false }
      - { value: '''#[Assert\\Length(options: {min: 5, max: 10, minMessage: "Too short", maxMessage: "Too long"})]''', correct: false }
    help: |
      Options are passed as named arguments to the constraint.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#_snippet_8
  -
    question: 'Which constraint is used to validate that a value is a valid EAN (European Article Number) or UPC (Universal Product Code)?'
    answers:
      - { value: '`#[Assert\\Ean]`', correct: true }
      - { value: '`#[Assert\\Barcode]`', correct: false }
      - { value: '`#[Assert\\ProductCode]`', correct: false }
      - { value: '`#[Assert\\Isbn]`', correct: false }
    help: |
      The `Ean` constraint validates EAN/UPC codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Unique]` constraint (when used on a property, not a class)?'
    answers:
      - { value: 'To ensure that the value of a property is unique within a collection.', correct: false }
      - { value: 'To ensure that the value of a property is unique among other properties in the same object.', correct: false }
      - { value: 'This constraint does not exist as a standalone property constraint in Symfony Validator; it''s typically a Doctrine ORM constraint (`UniqueEntity`).', correct: true }
      - { value: 'To generate a unique ID for the property.', correct: false }
    help: |
      `Unique` as a property constraint is not a standard built-in Symfony Validator constraint; `UniqueEntity` is for Doctrine entities. (Clarification based on common confusion).
  -
    question: 'Which constraint is used to validate that a value is a valid currency code (ISO 4217)?'
    answers:
      - { value: '`#[Assert\\Currency]`', correct: true }
      - { value: '`#[Assert\\Money]`', correct: false }
      - { value: '`#[Assert\\IsoCurrency]`', correct: false }
      - { value: '`#[Assert\\FinancialCode]`', correct: false }
    help: |
      The `Currency` constraint validates ISO 4217 currency codes. (General knowledge, common built-in constraint).
  -
    question: 'When implementing `GroupSequenceProviderInterface`, what should the `getGroupSequence()` method return?'
    answers:
      - { value: 'An array of group names or a `GroupSequence` object.', correct: true }
      - { value: 'A boolean indicating whether validation should proceed.', correct: false }
      - { value: 'A `ConstraintViolationListInterface` object.', correct: false }
      - { value: 'A string representing the single group to validate.', correct: false }
    help: |
      The method must return an array of group names or a `GroupSequence` object.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_4
  -
    question: 'What is the main difference between `#[Assert\\IsTrue]` and `#[Assert\\IsFalse]`?'
    answers:
      - { value: '`IsTrue` validates that a value is strictly `true`, while `IsFalse` validates that a value is strictly `false`.', correct: true }
      - { value: '`IsTrue` is for boolean properties, `IsFalse` is for string properties.', correct: false }
      - { value: '`IsTrue` checks for truthy values, `IsFalse` checks for falsey values.', correct: false }
      - { value: 'They are aliases for the same constraint.', correct: false }
    help: |
      They validate strict boolean `true` or `false`. (General knowledge, common built-in constraints).
  -
    question: 'Which constraint is used to validate that a string contains only digits?'
    answers:
      - { value: '`#[Assert\\Digit]`', correct: false }
      - { value: '`#[Assert\\Digits]`', correct: true }
      - { value: '`#[Assert\\Numeric]`', correct: false }
      - { value: '`#[Assert\\Integer]`', correct: false }
    help: |
      The `Digits` constraint validates that a string contains only digits. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Type]` constraint?'
    answers:
      - { value: 'To ensure a value is of a specific PHP data type (e.g., `string`, `int`, `array`, `bool`).', correct: true }
      - { value: 'To cast a value to a different data type before validation.', correct: false }
      - { value: 'To validate the type of a file upload.', correct: false }
      - { value: 'To check if an object is an instance of a specific class.', correct: true }
    help: |
      `Type` validates the PHP data type or class instance. (General knowledge, common built-in constraint).
  -
    question: 'When should you use a custom callback validator instead of a built-in constraint or a custom constraint class?'
    answers:
      - { value: 'When the validation logic is very simple and can be expressed in a single line of code.', correct: false }
      - { value: 'When the validation logic is complex, involves multiple properties, or requires access to the `ExecutionContextInterface` for building violations, and you don''t want to create a separate constraint class.', correct: true }
      - { value: 'When you need to perform database queries as part of validation.', correct: false }
      - { value: 'When you want to reuse the validation logic across multiple projects.', correct: false }
    help: |
      Callback validators are suitable for complex, ad-hoc validation logic within the entity itself.
      https://symfony.com/doc/current/validation/custom_constraint.html#callback-constraint (Conceptual, but implied by snippets).
  -
    question: 'What is the purpose of the `#[Assert\\DivisibleBy]` constraint?'
    answers:
      - { value: 'To validate that a number is divisible by a given value.', correct: true }
      - { value: 'To check if a number is a prime number.', correct: false }
      - { value: 'To divide a number into equal parts.', correct: false }
      - { value: 'To validate that a number is an integer.', correct: false }
    help: |
      The `DivisibleBy` constraint checks for divisibility. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is `true` (case-insensitive for strings, or boolean `true`)?'
    answers:
      - { value: '`#[Assert\\IsTrue]`', correct: true }
      - { value: '`#[Assert\\True]`', correct: false }
      - { value: '`#[Assert\\BooleanTrue]`', correct: false }
      - { value: '`#[Assert\\Truthy]`', correct: false }
    help: |
      `IsTrue` validates that a value is `true`. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary difference between `#[Assert\\LessThan]` and `#[Assert\\LessThanOrEqual]`?'
    answers:
      - { value: '`LessThan` validates if a value is strictly less than another, while `LessThanOrEqual` includes equality.', correct: true }
      - { value: '`LessThan` is for numbers, `LessThanOrEqual` is for dates.', correct: false }
      - { value: '`LessThan` is for integers, `LessThanOrEqual` is for floats.', correct: false }
      - { value: 'They are interchangeable; the behavior is the same.', correct: false }
    help: |
      The "OrEqual" variants include the boundary value. (General knowledge, common built-in constraints).
  -
    question: 'Which constraint is used to validate that a value is a valid BIC (Bank Identifier Code) or SWIFT code?'
    answers:
      - { value: '`#[Assert\\Bic]`', correct: true }
      - { value: '`#[Assert\\Swift]`', correct: false }
      - { value: '`#[Assert\\BankCode]`', correct: false }
      - { value: '`#[Assert\\FinancialCode]`', correct: false }
    help: |
      The `Bic` constraint validates BIC/SWIFT codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Timezone]` constraint?'
    answers:
      - { value: 'To validate that a string is a valid PHP timezone identifier (e.g., `Europe/Paris`).', correct: true }
      - { value: 'To convert a date to a specific timezone.', correct: false }
      - { value: 'To check if a date falls within a specific timezone.', correct: false }
      - { value: 'To validate the format of a timezone offset.', correct: false }
    help: |
      The `Timezone` constraint validates timezone identifiers. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a string is a valid hostname?'
    answers:
      - { value: '`#[Assert\\Hostname]`', correct: true }
      - { value: '`#[Assert\\Domain]`', correct: false }
      - { value: '`#[Assert\\Host]`', correct: false }
      - { value: '`#[Assert\\UrlPart]`', correct: false }
    help: |
      The `Hostname` constraint validates hostnames. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Unique]` constraint when applied to a collection of objects (e.g., an array of tags)?'
    answers:
      - { value: 'To ensure that each object in the collection is a unique instance (different memory address).', correct: false }
      - { value: 'To ensure that a specific property (or combination of properties) within each object in the collection is unique across all objects in that collection.', correct: true }
      - { value: 'To ensure the collection itself is unique compared to other collections.', correct: false }
      - { value: 'This constraint is not applicable to collections of objects.', correct: false }
    help: |
      The `Unique` constraint (when available for collections, often via custom or specific bundle implementation) ensures uniqueness of elements based on a property. (Conceptual, often implemented via custom validators or specific bundle constraints like `UniqueEntity` for collections of entities).
  -
    question: 'Which constraint is used to validate that a value is a valid callback (callable) in PHP?'
    answers:
      - { value: '`#[Assert\\Callback]`', correct: true }
      - { value: '`#[Assert\\Callable]`', correct: false }
      - { value: '`#[Assert\\Invokable]`', correct: false }
      - { value: '`#[Assert\\Function]`', correct: false }
    help: |
      The `Callback` constraint can also be used to validate if a value is a valid PHP callable. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary benefit of using `#[Assert\\When]` over a custom `GroupSequenceProviderInterface` for conditional validation?'
    answers:
      - { value: '`#[Assert\\When]` provides a more concise way to apply conditional logic directly to specific constraints or properties without affecting the entire object''s validation flow.', correct: true }
      - { value: '`#[Assert\\When]` is more performant for complex conditional logic.', correct: false }
      - { value: '`GroupSequenceProviderInterface` is deprecated in Symfony 7.', correct: false }
      - { value: '`#[Assert\\When]` allows for more complex expressions than `GroupSequenceProviderInterface`.', correct: false }
    help: |
      `Assert\\When` is for fine-grained, property-level conditional validation.
      https://symfony.com/doc/current/reference/constraints/When.html (Conceptual, comparing two distinct features).
  -
    question: 'Which constraint is used to validate that a string represents a valid HTML color code (e.g., `#RRGGBB`)?'
    answers:
      - { value: '`#[Assert\\Color]`', correct: false }
      - { value: '`#[Assert\\CssColor]`', correct: true }
      - { value: '`#[Assert\\HtmlColor]`', correct: false }
      - { value: '`#[Assert\\HexColor]`', correct: false }
    help: |
      The `CssColor` constraint validates various CSS color formats, including hex codes.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CssColor.rst#_snippet_1
  -
    question: 'What is the purpose of the `#[Assert\\AtLeastOneOf]` constraint?'
    answers:
      - { value: 'To ensure that at least one of the specified properties has a value.', correct: true }
      - { value: 'To ensure that a collection has at least one element.', correct: false }
      - { value: 'To validate that a value is greater than or equal to a minimum.', correct: false }
      - { value: 'To apply a constraint to at least one of the validation groups.', correct: false }
    help: |
      `AtLeastOneOf` ensures that at least one of the given constraints (or properties) passes validation. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid email address, but also allows for a specific mode like `strict` or `html5`?'
    answers:
      - { value: '`#[Assert\\Email(mode: Email::VALIDATION_MODE_HTML5)]`', correct: true }
      - { value: '`#[Assert\\EmailAddress]`', correct: false }
      - { value: '`#[Assert\\Mail]`', correct: false }
      - { value: '`#[Assert\\Email(format: "html5")]`', correct: false }
    help: |
      The `Email` constraint has a `mode` option for different validation levels. (General knowledge, common built-in constraint).
  -
    question: 'What is the correct way to define a `GroupSequence` using the `GroupSequence` class directly in PHP?'
    answers:
      - { value: '''new GroupSequence(['Default', 'Strict'])''', correct: true }
      - { value: '''new Assert\\GroupSequence(['Default', 'Strict'])''', correct: true }
      - { value: '''new GroupSequenceProvider(['Default', 'Strict'])''', correct: false }
      - { value: '''new GroupSequence(['Default', 'Strict'], type: GroupSequence::TYPE_ORDERED)''', correct: false }
    help: |
      The `GroupSequence` class is used to define an ordered sequence of groups.
      https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#_snippet_4 (Return type of `getGroupSequence()`).
  -
    question: 'Which constraint is used to validate that a number is positive (greater than 0)?'
    answers:
      - { value: '`#[Assert\\Positive]`', correct: true }
      - { value: '`#[Assert\\GreaterThan(0)]`', correct: true }
      - { value: '`#[Assert\\Min(1)]`', correct: false }
      - { value: '`#[Assert\\PositiveOrZero]`', correct: false }
    help: |
      `Positive` and `GreaterThan(0)` both achieve this. (General knowledge, common built-in constraints).
  -
    question: 'What is the purpose of the `#[Assert\\Time]` constraint?'
    answers:
      - { value: 'To validate that a string represents a valid time format (e.g., `HH:MM:SS`).', correct: true }
      - { value: 'To validate a `DateTime` object.', correct: false }
      - { value: 'To compare two time values.', correct: false }
      - { value: 'To check if a time falls within a specific range.', correct: false }
    help: |
      The `Time` constraint validates time strings. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid country subdivision code (e.g., US states, Canadian provinces)?'
    answers:
      - { value: '`#[Assert\\CountrySubdivision]`', correct: true }
      - { value: '`#[Assert\\RegionCode]`', correct: false }
      - { value: '`#[Assert\\StateProvince]`', correct: false }
      - { value: '`#[Assert\\Subdivision]`', correct: false }
    help: |
      The `CountrySubdivision` constraint validates country subdivision codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the difference between `#[Assert\\NotNull]` and `#[Assert\\NotBlank]`?'
    answers:
      - { value: '`NotNull` only checks for `null` values, while `NotBlank` checks for `null`, empty strings, and strings containing only whitespace.', correct: true }
      - { value: '`NotNull` is for objects, `NotBlank` is for strings.', correct: false }
      - { value: '`NotNull` is deprecated in favor of `NotBlank`.', correct: false }
      - { value: '`NotBlank` allows `null` values if the property is nullable.', correct: false }
    help: |
      `NotBlank` is a stricter version of `NotNull` for string-like values. (General knowledge, common built-in constraints).
  -
    question: 'What is the purpose of the `#[Assert\\Callback]` constraint when applied to a property?'
    answers:
      - { value: 'To execute a custom validation method (defined elsewhere) on the property''s value.', correct: true }
      - { value: 'To automatically call a setter method on the property.', correct: false }
      - { value: 'To define a property as a callable.', correct: false }
      - { value: 'To trigger a JavaScript callback function on the client-side.', correct: false }
    help: |
      `Callback` on a property allows a custom method to validate that specific property. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a number is negative (less than 0)?'
    answers:
      - { value: '`#[Assert\\Negative]`', correct: true }
      - { value: '`#[Assert\\LessThan(0)]`', correct: true }
      - { value: '`#[Assert\\Max(-1)]`', correct: false }
      - { value: '`#[Assert\\NegativeOrZero]`', correct: false }
    help: |
      `Negative` and `LessThan(0)` both achieve this. (General knowledge, common built-in constraints).
  -
    question: 'What is the primary benefit of using PHP attributes for defining validation constraints?'
    answers:
      - { value: 'They keep validation rules close to the properties they validate, improving readability and discoverability.', correct: true }
      - { value: 'They offer better performance compared to YAML or XML configurations.', correct: false }
      - { value: 'They allow for more complex conditional validation logic than other methods.', correct: false }
      - { value: 'They are the only way to define constraints for private properties.', correct: false }
    help: |
      Attributes integrate validation directly into the class definition.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#_snippet_1
  -
    question: 'Which constraint is used to validate that a value is a valid `DateTime` object or a string that can be parsed into a `DateTime` object?'
    answers:
      - { value: '`#[Assert\\DateTime]`', correct: true }
      - { value: '`#[Assert\\DateObject]`', correct: false }
      - { value: '`#[Assert\\ValidDate]`', correct: false }
      - { value: '`#[Assert\\Timestamp]`', correct: false }
    help: |
      The `DateTime` constraint validates date and time values. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Unique]` constraint when applied to a property in a form, typically used with a data transformer?'
    answers:
      - { value: 'To ensure the submitted value for that field has not been submitted before in the current session.', correct: false }
      - { value: 'To check if the submitted value for that field already exists in the database for another entity (requires custom logic or a Doctrine `UniqueEntity` constraint on the entity).', correct: true }
      - { value: 'To generate a unique token for the form submission.', correct: false }
      - { value: 'To prevent the user from entering the same value twice in different form fields.', correct: false }
    help: |
      While `Unique` isn't a standalone property constraint in the core validator, the concept of uniqueness usually involves checking against existing data, often via Doctrine's `UniqueEntity` or custom logic. (Conceptual, addresses a common use case).
  -
    question: 'Which constraint is used to validate that a string is a valid regular expression?'
    answers:
      - { value: '`#[Assert\\Regex]`', correct: true }
      - { value: '`#[Assert\\Pattern]`', correct: false }
      - { value: '`#[Assert\\RegExp]`', correct: false }
      - { value: '`#[Assert\\ValidRegex]`', correct: false }
    help: |
      The `Regex` constraint is used for regular expression validation. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary purpose of the `#[Assert\\EqualTo]` constraint?'
    answers:
      - { value: 'To validate that a value is strictly equal to another specified value.', correct: true }
      - { value: 'To check if two properties in an object have the same value.', correct: false }
      - { value: 'To compare the length of two strings.', correct: false }
      - { value: 'To ensure a value is not `null`.', correct: false }
    help: |
      `EqualTo` checks for strict equality. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid locale code (e.g., `en`, `fr_FR`)?'
    answers:
      - { value: '`#[Assert\\Locale]`', correct: true }
      - { value: '`#[Assert\\Language]`', correct: false }
      - { value: '`#[Assert\\Country]`', correct: false }
      - { value: '`#[Assert\\Culture]`', correct: false }
    help: |
      The `Locale` constraint validates locale codes. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Range]` constraint when applied to a date or time value?'
    answers:
      - { value: 'To ensure the date/time falls within a specified period (e.g., between two dates).', correct: true }
      - { value: 'To validate the format of the date/time string.', correct: false }
      - { value: 'To compare the date/time to the current date/time.', correct: false }
      - { value: 'To check if the date/time is in the future or past.', correct: false }
    help: |
      `Range` can be used for numerical or date/time ranges. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a string is a valid IBAN (International Bank Account Number)?'
    answers:
      - { value: '`#[Assert\\Iban]`', correct: true }
      - { value: '`#[Assert\\BankAccount]`', correct: false }
      - { value: '`#[Assert\\BankNumber]`', correct: false }
      - { value: '`#[Assert\\Account]`', correct: false }
    help: |
      The `Iban` constraint validates IBANs. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Sequentially]` constraint?'
    answers:
      - { value: 'To apply constraints in a specific order, stopping on the first violation, similar to a `GroupSequence` but for a single property or object.', correct: true }
      - { value: 'To validate elements of a collection one by one.', correct: false }
      - { value: 'To ensure a series of values are in sequential order.', correct: false }
      - { value: 'To define a sequence of validation groups for the entire form.', correct: false }
    help: |
      `Sequentially` allows for ordered validation of multiple constraints on a single item. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid phone number?'
    answers:
      - { value: '`#[Assert\\PhoneNumber]`', correct: true }
      - { value: '`#[Assert\\Tel]`', correct: false }
      - { value: '`#[Assert\\Mobile]`', correct: false }
      - { value: '`#[Assert\\Phone]`', correct: false }
    help: |
      The `PhoneNumber` constraint validates phone numbers. (General knowledge, common built-in constraint).
  -
    question: 'What is the primary purpose of the `#[Assert\\ExpressionLanguage]` constraint?'
    answers:
      - { value: 'To define complex validation rules using Symfony''s ExpressionLanguage component, allowing for more powerful and readable expressions than simple PHP expressions.', correct: true }
      - { value: 'To validate the syntax of an ExpressionLanguage string.', correct: false }
      - { value: 'To translate validation messages using ExpressionLanguage.', correct: false }
      - { value: 'To dynamically generate validation groups based on ExpressionLanguage.', correct: false }
    help: |
      `ExpressionLanguage` provides a more robust expression engine for validation. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid `DateTimeImmutable` object or a string that can be parsed into one?'
    answers:
      - { value: '`#[Assert\\DateTimeImmutable]`', correct: true }
      - { value: '`#[Assert\\ImmutableDateTime]`', correct: false }
      - { value: '`#[Assert\\DateImmutable]`', correct: false }
      - { value: '`#[Assert\\ImmutableDate]`', correct: false }
    help: |
      The `DateTimeImmutable` constraint validates `DateTimeImmutable` objects. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Timezone]` constraint''s `zone` option?'
    answers:
      - { value: 'To specify a specific timezone to validate against.', correct: false }
      - { value: 'To limit validation to a specific type of timezone (e.g., `DateTimeZone::AMERICA`).', correct: true }
      - { value: 'To define the default timezone for the application.', correct: false }
      - { value: 'To check if the timezone is daylight saving time.', correct: false }
    help: |
      The `zone` option allows filtering by timezone type. (General knowledge, common built-in constraint).
  -
    question: 'Which constraint is used to validate that a value is a valid `DateInterval` object or a string that can be parsed into one?'
    answers:
      - { value: '`#[Assert\\DateInterval]`', correct: true }
      - { value: '`#[Assert\\Interval]`', correct: false }
      - { value: '`#[Assert\\TimePeriod]`', correct: false }
      - { value: '`#[Assert\\Duration]`', correct: false }
    help: |
      The `DateInterval` constraint validates `DateInterval` objects. (General knowledge, common built-in constraint).
  -
    question: 'What is the purpose of the `#[Assert\\Ulid]` constraint?'
    answers:
      - { value: 'To validate that a string is a valid ULID (Universally Unique Lexicographically Sortable Identifier).', correct: true }
      - { value: 'To generate a ULID for an entity.', correct: false }
      - { value: 'To validate that a string is a valid UUID.', correct: false }
      - { value: 'To check if a string contains only uppercase letters and digits.', correct: false }
    help: |
      The `Ulid` constraint validates ULID strings. (General knowledge, common built-in constraint).
  -
    question: 'When using `#[Assert\\Type]` with `type: "array"`, what is the validation result if the value is a `Traversable` object (e.g., `\ArrayIterator`)?'
    answers:
      - { value: 'A violation is triggered because it''s not a native PHP array.', correct: false }
      - { value: 'The validation passes, as `Traversable` objects are considered array-like for this constraint.', correct: true }
      - { value: 'An `UnexpectedValueException` is thrown.', correct: false }
      - { value: 'The object is converted to an array before validation.', correct: false }
    help: |
      The `Type` constraint for "array" also accepts `Traversable` objects. (General knowledge, common built-in constraint behavior).