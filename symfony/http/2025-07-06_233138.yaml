```yaml
category: HTTP
questions:
  -
    question: 'How do you make a basic GET request using the Symfony HTTP Client and retrieve its content as an array (assuming JSON response)?'
    answers:
      - { value: '$response = $client->get(''https://api.example.com''); $content = $response->toArray();', correct: false }
      - { value: '$response = $client->request(''GET'', ''https://api.example.com''); $content = $response->toArray();', correct: true }
      - { value: '$response = $client->send(''GET'', ''https://api.example.com''); $content = $response->json();', correct: false }
      - { value: '$response = $client->fetch(''https://api.example.com''); $content = $response->toArray();', correct: false }
    help: |
      The `request()` method is used for all HTTP verbs, and `toArray()` converts JSON content to a PHP array.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_1
  -
    question: 'Which of the following options can be passed to the `HttpClientInterface::request()` method? (Select all that apply)'
    answers:
      - { value: 'headers', correct: true }
      - { value: 'body', correct: true }
      - { value: 'query', correct: true }
      - { value: 'auth_basic', correct: true }
      - { value: 'http_version', correct: true }
    help: |
      The `request()` method accepts an array of options, including `headers`, `body`, `query`, `auth_basic`, `auth_bearer`, `auth_ntlm`, and `http_version`.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_1
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_12
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_14
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_18
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_44
  -
    question: 'What is the nature of the `HttpClientInterface::request()` method regarding execution flow?'
    answers:
      - { value: 'It is synchronous and blocks execution until the full response is received.', correct: false }
      - { value: 'It is asynchronous; the call returns immediately, and the response content is fetched lazily.', correct: true }
      - { value: 'It uses a callback mechanism to process the response in a separate thread.', correct: false }
      - { value: 'It always returns a Promise object that must be explicitly awaited.', correct: false }
    help: |
      The `request()` method is asynchronous; it returns immediately, and the response content is fetched lazily when methods like `getContent()` or `toArray()` are called.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_10
  -
    question: 'When using `ResponseInterface::getContent(true)` or `ResponseInterface::toArray(true)`, what happens if the HTTP response status code is a 4xx or 5xx error?'
    answers:
      - { value: 'It returns an empty string or array.', correct: false }
      - { value: 'It throws an exception.', correct: true }
      - { value: 'It logs the error and returns the content if available.', correct: false }
      - { value: 'It returns null.', correct: false }
    help: |
      By default, `getContent(true)` and `toArray(true)` throw an exception on HTTP errors (4xx or 5xx).
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_46
  -
    question: 'How can you process a large HTTP response chunk by chunk to avoid memory exhaustion with Symfony''s HTTP Client?'
    answers:
      - { value: 'By calling `$response->getStream()`.', correct: false }
      - { value: 'By using `$client->stream($response)` and iterating over the chunks.', correct: true }
      - { value: 'By setting a `max_memory` option in the request.', correct: false }
      - { value: 'By using `$response->toStream()` and reading from the resource.', correct: false }
    help: |
      The `HttpClientInterface::stream()` method allows you to process large responses chunk by chunk, which is crucial for handling large files without exhausting memory.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_47
  -
    question: 'How can you send multiple HTTP requests in parallel using Symfony''s HTTP Client?'
    answers:
      - { value: 'By using `Promise\all()` on an array of responses.', correct: false }
      - { value: 'By initiating all requests in a loop and then iterating over the responses in a separate loop to consume their content.', correct: true }
      - { value: 'By setting the `concurrent` option to `true` for each request.', correct: false }
      - { value: 'Symfony HttpClient automatically parallelizes all requests, no specific action is needed.', correct: false }
    help: |
      Symfony's HTTP client allows sending requests concurrently by initiating them in one loop and then iterating over the response objects in a subsequent loop to process their content.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_50
  -
    question: 'How can you configure a default `User-Agent` header for all requests made by the Symfony HTTP Client in `config/packages/framework.yaml`?'
    answers:
      - { value: '''framework:
    http_client:
        default_options:
            headers:
                User-Agent: "My Fancy App"''', correct: true }
      - { value: '''framework:
    http_client:
        global_headers:
            User-Agent: "My Fancy App"''', correct: false }
      - { value: '''services:
    _defaults:
        headers:
            User-Agent: "My Fancy App"''', correct: false }
      - { value: '''framework:
    http_client:
        headers:
            User-Agent: "My Fancy App"''', correct: false }
    help: |
      Default options for the HTTP client, including headers, can be configured under `framework.http_client.default_options` in `framework.yaml`.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_16
  -
    question: 'Which of the following authentication types are supported globally by the Symfony HTTP Client configuration? (Select all that apply)'
    answers:
      - { value: 'HTTP Basic authentication', correct: true }
      - { value: 'OAuth2 authentication', correct: false }
      - { value: 'HTTP Bearer authentication', correct: true }
      - { value: 'Microsoft NTLM authentication', correct: true }
      - { value: 'Digest authentication', correct: false }
    help: |
      Symfony HTTP Client supports HTTP Basic, HTTP Bearer, and Microsoft NTLM authentication as global or per-request options.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_12
  -
    question: 'What is the behavior when a header is defined both globally (via default options) and specifically for a single request using the `headers` option?'
    answers:
      - { value: 'The global header is always used, and the request-specific header is ignored.', correct: false }
      - { value: 'The request-specific header takes precedence and overrides the global header.', correct: true }
      - { value: 'Both headers are sent, potentially leading to duplicate headers.', correct: false }
      - { value: 'An exception is thrown due to header conflict.', correct: false }
    help: |
      Headers defined at the request level override any globally defined default headers for the HTTP client.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_17
  -
    question: 'How do you use `UriTemplateHttpClient` to make a request to `http://example.org/users?page=1`?'
    answers:
      - { value: '''$client = new UriTemplateHttpClient();
$client->request(''GET'', ''http://example.org/users?page=1'');''', correct: false }
      - { value: '''$client = new UriTemplateHttpClient();
$client->request(''GET'', ''http://example.org/{resource}{?page}'', [
    ''vars'' => [
        ''resource'' => ''users'',
        ''page'' => 1,
    ],
]);''', correct: true }
      - { value: '''$client = new UriTemplateHttpClient();
$client->request(''GET'', ''http://example.org/{resource}?page={page}'', [
    ''resource'' => ''users'',
    ''page'' => 1,
]);''', correct: false }
      - { value: '''$client = new UriTemplateHttpClient();
$client->request(''GET'', ''http://example.org/{resource}'', [
    ''query'' => [
        ''resource'' => ''users'',
        ''page'' => 1,
    ],
]);''', correct: false }
    help: |
      `UriTemplateHttpClient` uses the `vars` option to expand variables in the URI template.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_36
  -
    question: 'Which of the following are valid ways to define the request body using the `body` option in Symfony HttpClient? (Select all that apply)'
    answers:
      - { value: 'A regular string.', correct: true }
      - { value: 'An array of parameters (e.g., `[''param1'' => ''value1'']`).', correct: true }
      - { value: 'A `SplFileObject` instance.', correct: false }
      - { value: 'A PHP callable (closure) that generates data.', correct: true }
      - { value: 'A PHP resource (e.g., a file handle returned by `fopen()`).', correct: true }
    help: |
      The `body` option is highly flexible and can accept strings, arrays, closures, or PHP resources for uploading data.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_18
  -
    question: 'How do you add query string parameters to an HTTP GET request using the Symfony HTTP Client?'
    answers:
      - { value: 'By concatenating them directly to the URL string.', correct: false }
      - { value: 'By using the `query` option in the request options array.', correct: true }
      - { value: 'By setting them in the `headers` option with a `Query-String` key.', correct: false }
      - { value: 'By using the `params` option in the request options array.', correct: false }
    help: |
      The `query` option is used to define query string parameters, which are automatically URL-encoded.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_15
  -
    question: 'How can you force HTTP/2 for HTTP URLs when configuring the Symfony HTTP Client?'
    answers:
      - { value: '''framework:
    http_client:
        default_options:
            http_version: ''2.0''''', correct: true }
      - { value: '''framework:
    http_client:
        default_options:
            protocol: HTTP/2''', correct: false }
      - { value: '''$client = HttpClient::create([''force_http2'' => true]);''', correct: false }
      - { value: '''framework:
    http_client:
        default_options:
            version: 2''', correct: false }
    help: |
      The `http_version` option, set to `'2.0'`, forces HTTP/2 for HTTP URLs.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_44
  -
    question: 'How can an ongoing HTTP request be cancelled using Symfony''s HTTP Client? (Select all that apply)'
    answers:
      - { value: 'By calling `ResponseInterface::cancel()` on the response object.', correct: true }
      - { value: 'By throwing an exception from an `on_progress` callback.', correct: true }
      - { value: 'By calling `HttpClientInterface::abort()` with the response object.', correct: false }
      - { value: 'Requests cannot be cancelled once initiated.', correct: false }
    help: |
      Requests can be cancelled either by explicitly calling `cancel()` on the response object or by throwing an exception within an `on_progress` callback.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_48
  -
    question: 'When using `HttpClient::create()`, what is the order of preference for HTTP client transports?'
    answers:
      - { value: 'AmpHttpClient, then CurlHttpClient, then NativeHttpClient.', correct: false }
      - { value: 'NativeHttpClient, then CurlHttpClient, then AmpHttpClient.', correct: false }
      - { value: 'CurlHttpClient, then AmpHttpClient, then NativeHttpClient.', correct: true }
      - { value: 'The order is random and depends on system configuration.', correct: false }
    help: |
      `HttpClient::create()` prioritizes `CurlHttpClient` if the cURL extension is enabled, falls back to `AmpHttpClient` if cURL is not available or too old, and finally to `NativeHttpClient` (PHP streams).
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_42
  -
    question: 'How can you mock HTTP responses for testing purposes with Symfony''s HTTP Client? (Select all that apply)'
    answers:
      - { value: 'By passing an array of `MockResponse` objects to `MockHttpClient` constructor.', correct: true }
      - { value: 'By providing a callable function to `MockHttpClient` that dynamically generates `MockResponse` instances.', correct: true }
      - { value: 'By using `HarFileResponseFactory` with `MockHttpClient` to load responses from HAR files.', correct: true }
      - { value: 'By directly extending `HttpClientInterface` and overriding the `request` method.', correct: false }
    help: |
      `MockHttpClient` can be constructed with an array of `MockResponse` objects, a callable to generate responses dynamically, or in conjunction with `HarFileResponseFactory` for HAR-based testing.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_83
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_84
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_100
  -
    question: 'Which `MockResponse` method allows you to retrieve the HTTP method of the simulated request?'
    answers:
      - { value: '`getMethod()`', correct: false }
      - { value: '`getRequestMethod()`', correct: true }
      - { value: '`getSimulatedMethod()`', correct: false }
      - { value: '`getHttpRequestMethod()`', correct: false }
    help: |
      The `MockResponse` class provides helper methods for inspecting the simulated request, including `getRequestMethod()`.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_95
  -
    question: 'Which class is used to create mock responses from HAR (HTTP Archive) files for testing Symfony''s HTTP Client?'
    answers:
      - { value: '`HarClientFactory`', correct: false }
      - { value: '`HarResponseGenerator`', correct: false }
      - { value: '`HarFileResponseFactory`', correct: true }
      - { value: '`HttpClientHarLoader`', correct: false }
    help: |
      `HarFileResponseFactory` is specifically designed to create mock responses from HAR files, facilitating realistic and reproducible tests.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_100
  -
    question: 'What does `HttpClientInterface::stream` yield in its iteration?'
    answers:
      - { value: 'An array containing the response object and the chunk content.', correct: false }
      - { value: 'A `ResponseInterface` object and a `ChunkInterface` object.', correct: true }
      - { value: 'Only the content string of each chunk.', correct: false }
      - { value: 'A `Promise` object for each chunk.', correct: false }
    help: |
      The `stream()` method yields an iterable of `ResponseInterface` and `ChunkInterface` objects, allowing for asynchronous processing of response data.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_54
  -
    question: 'Which of the following keys are valid to retrieve specific information from the transport layer using `ResponseInterface::getInfo(key)`? (Select all that apply)'
    answers:
      - { value: '`response_headers`', correct: true }
      - { value: '`redirect_count`', correct: true }
      - { value: '`start_time`', correct: true }
      - { value: '`debug`', correct: true }
    help: |
      The `getInfo()` method can retrieve various transport-layer details, including `response_headers`, `redirect_count`, `start_time`, `redirect_url`, `debug`, and `pause_handler`.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_46
  -
    question: 'How do you create a `Request` object from PHP''s global variables in Symfony?'
    answers:
      - { value: '`Request::createFromGlobals()`', correct: true }
      - { value: '`new Request($_GET, $_POST, $_SERVER)`', correct: false }
      - { value: '`Request::capture()`', correct: false }
      - { value: '`Request::populateFromGlobals()`', correct: false }
    help: |
      The static method `Request::createFromGlobals()` is the standard way to create a Request object from the current PHP global variables.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: 'Given a `Symfony\Component\HttpFoundation\Request $request` object, how do you correctly retrieve the value of a GET parameter named `id` and a POST parameter named `category` with a default value of `default category`? (Select all that apply)'
    answers:
      - { value: '`$request->query->get(''id'');`', correct: true }
      - { value: '`$request->request->get(''category'', ''default category'');`', correct: false }
      - { value: '`$request->getPayload()->get(''category'', ''default category'');`', correct: true }
      - { value: '`$request->get(''id'');`', correct: false }
    help: |
      GET parameters are accessed via `$request->query->get()`. For POST parameters, use `$request->getPayload()->get()`, as `$request->request` is deprecated for this purpose in Symfony 7.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: 'How do you retrieve an HTTP request header, with normalized, lowercase keys, from a `Symfony\Component\HttpFoundation\Request` object?'
    answers:
      - { value: '`$request->headers->get(''Content-Type'');`', correct: true }
      - { value: '`$request->getHeader(''content-type'');`', correct: false }
      - { value: '`$request->headers[''content-type''];`', correct: false }
      - { value: '`$request->getHeaders()[''Content-Type''];`', correct: false }
    help: |
      HTTP request headers are accessed via `$request->headers->get()`, and keys are normalized to lowercase.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: 'How do you access the raw content of the HTTP request body in Symfony?'
    answers:
      - { value: '`$request->getBody();`', correct: false }
      - { value: '`$request->getRawContent();`', correct: false }
      - { value: '`$request->getContent();`', correct: true }
      - { value: '`file_get_contents(''php://input'');`', correct: false }
    help: |
      The `Request::getContent()` method is used to retrieve the raw content of the HTTP request body.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_10
  -
    question: 'How do you create a basic `Symfony\Component\HttpFoundation\Response` object with content, status code, and a header?'
    answers:
      - { value: '''use Symfony\\\\Component\\\\HttpFoundation\\\\Response;
$response = new Response(
    ''Content'',
    200,
    [''content-type'' => ''text/html'']
);''', correct: true }
      - { value: '''use Symfony\\\\Component\\\\HttpFoundation\\\\Response;
$response = Response::create(
    ''Content'',
    Response::HTTP_OK,
    [''Content-Type'' => ''text/html'']
);''', correct: false }
      - { value: '''use Symfony\\\\Component\\\\HttpFoundation\\\\Response;
$response = new Response();
$response->setContent(''Content'');
$response->setStatusCode(Response::HTTP_OK);
$response->headers->set(''Content-Type'', ''text/html'');''', correct: true }
      - { value: '''use Symfony\\\\Component\\\\HttpFoundation\\\\Response;
$response = Response::build(
    ''Content'',
    Response::HTTP_OK,
    [''content-type'' => ''text/html'']
);''', correct: false }
    help: |
      A `Response` object can be instantiated by passing content, status code, and headers to its constructor, or by setting them individually using setter methods.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_30
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_7
  -
    question: 'What method is used to send the HTTP headers and content of a `Symfony\Component\HttpFoundation\Response` object to the client?'
    answers:
      - { value: '`$response->print();`', correct: false }
      - { value: '`$response->output();`', correct: false }
      - { value: '`$response->send();`', correct: true }
      - { value: '`$response->flush();`', correct: false }
    help: |
      The `send()` method is responsible for sending the HTTP headers and echoing the content of the response to the client.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_7
  -
    question: 'Which class in Symfony''s HttpFoundation component is specifically designed for HTTP redirects?'
    answers:
      - { value: '`Symfony\Component\HttpFoundation\RedirectResponse`', correct: true }
      - { value: '`Symfony\Component\HttpFoundation\HttpResponseRedirect`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\ResponseRedirect`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\UrlResponse`', correct: false }
    help: |
      The `RedirectResponse` class is a specialized `Response` class for handling HTTP redirects.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which class allows you to stream the HTTP Response back to the client, enabling dynamic and incremental content delivery?'
    answers:
      - { value: '`Symfony\Component\HttpFoundation\StreamingResponse`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\StreamResponse`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\StreamedResponse`', correct: true }
      - { value: '`Symfony\Component\HttpFoundation\ChunkedResponse`', correct: false }
    help: |
      The `StreamedResponse` class is designed for streaming content back to the client, using a callable or an iterable of strings.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_54
  -
    question: 'What types of content can a `StreamedResponse` accept for its content generation? (Select all that apply)'
    answers:
      - { value: 'A PHP callable (closure).', correct: true }
      - { value: 'A string iterable (Symfony 7.3+).', correct: true }
      - { value: 'A plain string.', correct: false }
      - { value: 'A `resource` type (e.g., file handle).', correct: false }
    help: |
      `StreamedResponse` can be initialized with a PHP callable or, since Symfony 7.3, an iterable of strings.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_54
  -
    question: 'When simulating an HTTP request for testing or internal dispatching, how can you programmatically construct a `Request` object?'
    answers:
      - { value: '`Request::create(''/path'', ''METHOD'', [''params'']);`', correct: true }
      - { value: '`new Request([''path'' => ''/path'', ''method'' => ''METHOD'']);`', correct: false }
      - { value: '`Request::simulate(''/path'', ''METHOD'');`', correct: false }
      - { value: '`Request::fromArray([''uri'' => ''/path'', ''method'' => ''METHOD'']);`', correct: false }
    help: |
      The `Request::create()` static method allows programmatic construction of a `Request` object for simulation purposes.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_14
  -
    question: 'How do you set a cookie on a `Symfony\Component\HttpFoundation\Response` object?'
    answers:
      - { value: '`$response->addCookie(new Cookie(...));`', correct: false }
      - { value: '`$response->headers->setCookie(new Cookie(...));`', correct: true }
      - { value: '`$response->cookies->add(new Cookie(...));`', correct: false }
      - { value: '`$response->setCookie(new Cookie(...));`', correct: false }
    help: |
      Cookies are managed via the `ResponseHeaderBag` accessible through `$response->headers`, using the `setCookie()` method.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'How do you clear a cookie from a `Symfony\Component\HttpFoundation\Response` object?'
    answers:
      - { value: '`$response->headers->clearCookie(''cookie_name'');`', correct: true }
      - { value: '`$response->removeCookie(''cookie_name'');`', correct: false }
      - { value: '`$response->cookies->delete(''cookie_name'');`', correct: false }
      - { value: '`$response->expireCookie(''cookie_name'');`', correct: false }
    help: |
      The `clearCookie()` method on the `ResponseHeaderBag` is used to remove a cookie from the response.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which method is a factory method to create a `Symfony\Component\HttpFoundation\Cookie` object?'
    answers:
      - { value: '`Cookie::new(...)`', correct: false }
      - { value: '`Cookie::make(...)`', correct: false }
      - { value: '`Cookie::create(...)`', correct: true }
      - { value: '`new Cookie(...)`', correct: false }
    help: |
      The `Cookie::create()` static method is provided as a factory to construct `Cookie` objects.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'If you want to change the value of an existing `Cookie` object, which method should you use to get a new `Cookie` instance with the modified value?'
    answers:
      - { value: '`$cookie->setValue(''new_value'');`', correct: false }
      - { value: '`$cookie->withValue(''new_value'');`', correct: true }
      - { value: '`$cookie->updateValue(''new_value'');`', correct: false }
      - { value: '`$cookie->value = ''new_value'';`', correct: false }
    help: |
      The `Cookie` class provides `with*` methods (e.g., `withValue()`, `withExpires()`) to return new `Cookie` instances with modified properties, adhering to immutability.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'How can you set the `Cache-Control` header directives `public` and `max-age` to 600 seconds for a Symfony response? (Select all that apply)'
    answers:
      - { value: 'Using the `#[Cache(public: true, maxage: 600)]` attribute on a controller method.', correct: true }
      - { value: 'By calling `$response->setPublic();` and `$response->setMaxAge(600);`.', correct: true }
      - { value: 'By setting `$response->headers->set(''Cache-Control'', ''public, max-age=600'');`.', correct: true }
      - { value: 'Using `$response->setCache([''public'' => true, ''max_age'' => 600]);`.', correct: true }
    help: |
      Cache-Control directives can be set via the `#[Cache]` attribute, individual `Response` methods (`setPublic()`, `setMaxAge()`), direct header manipulation, or the `setCache()` method.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#_snippet_0
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'What does the `Response::isNotModified(Request $request)` method do if the response validators (ETag, Last-Modified) match a conditional value in the client Request?'
    answers:
      - { value: 'It returns `true` and sends the full response again.', correct: false }
      - { value: 'It returns `true`, sets the status code to 304 Not Modified, and removes the response content.', correct: true }
      - { value: 'It throws an exception indicating the content is not modified.', correct: false }
      - { value: 'It returns `false` and forces a full response.', correct: false }
    help: |
      If the response is not modified, `isNotModified()` sets the status to 304 and removes the content, optimizing bandwidth.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'What is the effect of calling `$response->expire()` on a Symfony `Response` object?'
    answers:
      - { value: 'It sets the `Expires` header to a date in the past, marking the response as immediately stale.', correct: true }
      - { value: 'It removes all caching headers from the response.', correct: false }
      - { value: 'It forces the client to revalidate the content with the server on the next request.', correct: true }
      - { value: 'It sets `Cache-Control: no-cache, no-store`.', correct: false }
    help: |
      The `expire()` method sets the response to be immediately stale, forcing caches to revalidate the content with the origin server.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#_snippet_3
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'What is the purpose of the `Vary` HTTP header in caching?'
    answers:
      - { value: 'It specifies that the response content will never change.', correct: false }
      - { value: 'It indicates which request headers should be considered by a cache when deciding if a cached response can be used.', correct: true }
      - { value: 'It defines the maximum age for a cached response.', correct: false }
      - { value: 'It forces the client to always revalidate the cache.', correct: false }
    help: |
      The `Vary` header informs caches that the response content may differ based on the values of specified request headers (e.g., `Accept-Encoding`, `User-Agent`).
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/cache_vary.rst#_snippet_0
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which method on the `Response` object allows setting multiple cache-related headers in one call?'
    answers:
      - { value: '`$response->setCacheHeaders([...]);`', correct: false }
      - { value: '`$response->configureCache([...]);`', correct: false }
      - { value: '`$response->setCache([...]);`', correct: true }
      - { value: '`$response->cache([...]);`', correct: false }
    help: |
      The `setCache()` method provides a convenient way to set multiple cache-related headers (e.g., `max_age`, `public`, `etag`, `last_modified`) in a single call.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which HTTP status code should be returned for a resource that does not exist?'
    answers:
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '404 Not Found', correct: true }
      - { value: '500 Internal Server Error', correct: false }
    help: |
      The 404 Not Found status code indicates that the server cannot find the requested resource.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_8
  -
    question: 'What is the primary purpose of the HTTP GET method?'
    answers:
      - { value: 'To submit data to be processed to a specified resource.', correct: false }
      - { value: 'To request data from a specified resource.', correct: true }
      - { value: 'To update an existing resource.', correct: false }
      - { value: 'To delete a specified resource.', correct: false }
    help: |
      The GET method is used to request data from a specified resource. It should only retrieve data and have no other effect on the data.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_0
  -
    question: 'When should the HTTP POST method typically be used?'
    answers:
      - { value: 'To retrieve a representation of a resource.', correct: false }
      - { value: 'To submit data to be processed to a specified resource, often resulting in a change in state or creation of a new resource.', correct: true }
      - { value: 'To replace all current representations of the target resource with the request payload.', correct: false }
      - { value: 'To remove a specified resource.', correct: false }
    help: |
      The POST method is used to send data to a server to create/update a resource. It is typically used when submitting form data or uploading files.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_10
  -
    question: 'What is the typical use case for the HTTP PUT method?'
    answers:
      - { value: 'To create a new resource at a specific URI, if it does not already exist, or replace it if it does.', correct: true }
      - { value: 'To partially update an existing resource.', correct: false }
      - { value: 'To retrieve a list of resources.', correct: false }
      - { value: 'To execute a server-side script without returning a response body.', correct: false }
    help: |
      The PUT method is used to create a resource or replace a representation of the target resource with the request payload. It is idempotent.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_10
  -
    question: 'What is the purpose of the HTTP DELETE method?'
    answers:
      - { value: 'To request that the origin server delete the resource identified by the Request-URI.', correct: true }
      - { value: 'To mark a resource as inactive without removing it.', correct: false }
      - { value: 'To retrieve a resource and then delete it from the cache.', correct: false }
      - { value: 'To delete a specific field from a resource.', correct: false }
    help: |
      The DELETE method requests that the origin server delete the resource identified by the Request-URI.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_1
  -
    question: 'Which of the following HTTP methods are generally considered idempotent? (Select all that apply)'
    answers:
      - { value: 'GET', correct: true }
      - { value: 'POST', correct: false }
      - { value: 'PUT', correct: true }
      - { value: 'DELETE', correct: true }
      - { value: 'PATCH', correct: false }
    help: |
      Idempotent methods (GET, PUT, DELETE, HEAD, OPTIONS, TRACE) produce the same result on the server whether they are called once or multiple times. POST and PATCH are not idempotent.
      Source: https://developer.mozilla.org/en-US/docs/Glossary/Idempotent
  -
    question: 'Which `Request` object method returns the list of accepted content types ordered by descending quality?'
    answers:
      - { value: '`$request->getPreferredContentTypes();`', correct: false }
      - { value: '`$request->getAcceptableContentTypes();`', correct: true }
      - { value: '`$request->getAcceptedMimeTypes();`', correct: false }
      - { value: '`$request->getAcceptContentTypes();`', correct: false }
    help: |
      The `getAcceptableContentTypes()` method parses the `Accept` header and returns a sorted list of content types.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: 'How do you retrieve the list of accepted languages, ordered by descending quality, from a `Symfony\Component\HttpFoundation\Request` object?'
    answers:
      - { value: '`$request->getLanguages();`', correct: true }
      - { value: '`$request->getPreferredLanguages();`', correct: false }
      - { value: '`$request->getAcceptLanguages();`', correct: false }
      - { value: '`$request->headers->get(''Accept-Language'');`', correct: false }
    help: |
      The `getLanguages()` method parses the `Accept-Language` header and returns a sorted list of accepted languages.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: 'What is the output of `HeaderUtils::parseQuery(''foo[bar.baz]=qux'')`?'
    answers:
      - { value: '`[''foo.bar.baz'' => ''qux'']`', correct: false }
      - { value: '`[''foo'' => [''bar'' => [''baz'' => ''qux'']]]`', correct: false }
      - { value: '`[''foo'' => [''bar.baz'' => ''qux'']]`', correct: true }
      - { value: '`[''foo[bar.baz]'' => ''qux'']`', correct: false }
    help: |
      `HeaderUtils::parseQuery()` handles query strings, preserving dots within keys when parsing.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_21
  -
    question: 'In a raw PHP script, how would you typically access GET parameters and set an HTTP header? (Select all that apply)'
    answers:
      - { value: 'Access GET parameters using `$_GET[''param_name'']`.', correct: true }
      - { value: 'Set an HTTP header using `header(''Content-Type: text/html'');`.', correct: true }
      - { value: 'Access GET parameters using `$_REQUEST[''param_name'']`.', correct: true }
      - { value: 'Set an HTTP header using `set_header(''Content-Type'', ''text/html'');`.', correct: false }
    help: |
      Raw PHP uses superglobal arrays like `$_GET` and `$_REQUEST` for parameters, and the `header()` function to set HTTP headers.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_3
  -
    question: 'What is the correct sequence of methods to process an HTTP request using Symfony''s `HttpKernel`?'
    answers:
      - { value: '`handle()`, `send()`, `terminate()`', correct: true }
      - { value: '`process()`, `respond()`, `finish()`', correct: false }
      - { value: '`execute()`, `output()`, `shutdown()`', correct: false }
      - { value: '`dispatch()`, `render()`, `close()`', correct: false }
    help: |
      The core lifecycle of `HttpKernel` involves `handle()` to process the request and generate a response, `send()` to output it, and `terminate()` for post-response tasks.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_3
  -
    question: 'How can you configure a `HttpClientInterface` instance with a base URI and replace all existing headers using `withOptions()` and `HttpOptions`?'
    answers:
      - { value: '''$client = $client->withOptions(
    (new HttpOptions())
        ->setBaseUri(''https://example.com/'')
        ->setHeaders([''header-name'' => ''header-value''])
        ->toArray()
);''', correct: true }
      - { value: '''$client = $client->withOptions([
    ''base_uri'' => ''https://example.com/'',
    ''headers'' => [''header-name'' => ''header-value''],
]);''', correct: false }
      - { value: '''$client = $client->setOptions(
    (new HttpOptions())
        ->setBaseUri(''https://example.com/'')
        ->setHeaders([''header-name'' => ''header-value''])
);''', correct: false }
      - { value: '''$client->setBaseUri(''https://example.com/'')->setHeaders([''header-name'' => ''header-value'']);''', correct: false }
    help: |
      The `withOptions()` method on an `HttpClientInterface` instance, combined with `HttpOptions`, allows for dynamic modification of client settings, including setting a base URI and replacing headers.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_4
  -
    question: 'Which method of `HttpClient` is specifically designed to create a client with a predefined base URI and associated options, often used for scoped clients?'
    answers:
      - { value: '`HttpClient::createForBaseUri(...)`', correct: true }
      - { value: '`HttpClient::withBaseUri(...)`', correct: false }
      - { value: '`HttpClient::scoped(...)`', correct: false }
      - { value: '`HttpClient::build(...)`', correct: false }
    help: |
      `HttpClient::createForBaseUri()` is a factory method to create a client with a specific base URI and options, useful for defining scoped clients.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_9
  -
    question: 'When integrating Symfony''s HTTP Client with libraries that expect PSR-18 `HttpClientInterface` or PSR-7 `RequestFactoryInterface`/`StreamFactoryInterface`, which client implementation should you use?'
    answers:
      - { value: '`NativeHttpClient`', correct: false }
      - { value: '`CurlHttpClient`', correct: false }
      - { value: '`HttplugClient`', correct: true }
      - { value: '`AmpHttpClient`', correct: false }
    help: |
      `HttplugClient` acts as a bridge, implementing PSR-18 `HttpClientInterface` and PSR-7 factories, making it suitable for integration with other PSR-compliant libraries.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_73
  -
    question: 'How do you handle asynchronous requests and their promises when using `HttplugClient`?'
    answers:
      - { value: 'By calling `sendAsyncRequest()` which returns a `Promise` object, then using `then()` for callbacks and `wait()` to resolve.', correct: true }
      - { value: '`HttplugClient` does not support asynchronous requests directly; you must use `AmpHttpClient`.', correct: false }
      - { value: 'By passing a callback to the `request()` method for asynchronous processing.', correct: false }
      - { value: 'Asynchronous requests are automatically handled; no explicit promise management is needed.', correct: false }
    help: |
      `HttplugClient` uses promises for asynchronous operations. `sendAsyncRequest()` returns a promise, which can be chained with `then()` for success/error handling and resolved with `wait()`.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_75
  -
    question: 'What is the purpose of the `Request::initialize` method?'
    answers:
      - { value: 'To reset the request object to its initial state.', correct: false }
      - { value: 'To change multiple request parameters (query, request, attributes, cookies, files, server, content) with a single method call.', correct: true }
      - { value: 'To load request data from a JSON string.', correct: false }
      - { value: 'To validate the integrity of the request data.', correct: false }
    help: |
      The `initialize` method allows for setting multiple request parameters at once, which is useful for programmatic manipulation of request objects.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_17
  -
    question: 'What is the output of `HeaderUtils::combine([[''foo'', ''abc''], [''bar'']])`?'
    answers:
      - { value: '`[''foo'' => ''abc'', ''bar'' => true]`', correct: true }
      - { value: '`[''foo'' => [''abc''], ''bar'' => []]`', correct: false }
      - { value: '`[''foo'' => ''abc'', ''bar'' => null]`', correct: false }
      - { value: '`[''foo_abc'', ''bar'']`', correct: false }
    help: |
      `HeaderUtils::combine()` transforms an array of key-value pairs into an associative array, treating single-element arrays as boolean `true`.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_21
  -
    question: 'What is the output of `HeaderUtils::toString([''foo'' => ''abc'', ''bar'' => true, ''baz'' => ''a b c''], '','')`?'
    answers:
      - { value: '''foo=abc, bar, baz="a b c"''', correct: true }
      - { value: '''foo: abc, bar: true, baz: "a b c"''', correct: false }
      - { value: '''foo=abc; bar=true; baz="a b c"''', correct: false }
      - { value: '''foo=abc, bar=1, baz="a b c"''', correct: false }
    help: |
      `HeaderUtils::toString()` converts an associative array into a formatted HTTP header string, quoting values with spaces.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_21
  -
    question: 'What is the output of `HeaderUtils::quote(''foo "bar"'')`?'
    answers:
      - { value: '''"foo \\"bar\\""''', correct: true }
      - { value: '''"foo "bar""''', correct: false }
      - { value: '''foo \"bar\"''', correct: false }
      - { value: '''"foo \\"bar\\""''', correct: false }
    help: |
      `HeaderUtils::quote()` adds quotes and escapes inner quotes for string values used in HTTP headers.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_21
  -
    question: 'Why might you use `$formData->bodyToString()` when sending a streamed request body with Symfony HttpClient?'
    answers:
      - { value: 'To reduce memory consumption for large streams.', correct: false }
      - { value: 'To ensure the `Content-Length` header is present, which can resolve HTTP 411 (Length Required) errors with some servers.', correct: true }
      - { value: 'To convert the body to a JSON string automatically.', correct: false }
      - { value: 'To enable chunked transfer encoding.', correct: false }
    help: |
      Converting a streamed body to a string via `bodyToString()` allows the `Content-Length` header to be set, which is necessary for servers that require it (e.g., to avoid 411 errors), but it increases memory usage for large streams.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_25
  -
    question: 'When was `Symfony\Component\HttpClient\ThrottlingHttpClient` introduced?'
    answers:
      - { value: 'Symfony 6.0', correct: false }
      - { value: 'Symfony 6.4', correct: false }
      - { value: 'Symfony 7.0', correct: false }
      - { value: 'Symfony 7.1', correct: true }
    help: |
      `ThrottlingHttpClient` was introduced in Symfony 7.1 to provide rate limiting capabilities for HTTP requests.
      Source: https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_65
```