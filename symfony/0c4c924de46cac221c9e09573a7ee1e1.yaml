```yaml
category: Routing
questions:
  - question: 'Which of the following correctly defines a route with a parameter `id` and a default value of `1` for the `page` parameter in YAML?'
    answers:
      - { value: 'blog_index: path: /blog/{page} controller: App\Controller\BlogController::index defaults: page: 1', correct: true }
      - { value: 'blog_index: path: /blog/{page?1} controller: App\Controller\BlogController::index', correct: false }
      - { value: 'blog_index: path: /blog/{page} controller: App\Controller\BlogController::index requirements: page: \d+ defaults: page: 1', correct: true }
      - { value: 'blog_index: path: /blog/{page} controller: App\Controller\BlogController::index default_page: 1', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'How can you define a route in a Symfony controller using PHP attributes for the path `/product/{id}` and name `product_show`?'
    answers:
      - { value: '#[Route("/product/{id}", name="product_show")] public function show(): Response { /* ... */ }', correct: true }
      - { value: '@Route("/product/{id}", name="product_show") public function show(): Response { /* ... */ }', correct: false }
      - { value: 'public function show(@Route("/product/{id}", name="product_show")): Response { /* ... */ }', correct: false }
      - { value: '#[Path("/product/{id}"), Name("product_show")] public function show(): Response { /* ... */ }', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-routes'
  - question: 'Which command is used to list all registered routes in a Symfony application?'
    answers:
      - { value: 'php bin/console router:list', correct: false }
      - { value: 'php bin/console debug:router', correct: true }
      - { value: 'php bin/console route:show', correct: false }
      - { value: 'php bin/console routing:debug', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#listing-routes'
  - question: 'In Symfony, how do you define a route requirement for a parameter `page` to ensure it only matches digits in YAML?'
    answers:
      - { value: 'requirements: page: \d+', correct: true }
      - { value: 'constraints: page: \d+', correct: false }
      - { value: 'validate: page: \d+', correct: false }
      - { value: 'format: page: \d+', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the correct way to define a route with an optional `page` parameter that defaults to `1` and requires it to be a digit, using PHP attributes?'
    answers:
      - { value: '#[Route("/blog/{page<\d+>?1}", name: "blog_list")]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1], requirements: ["page" => "\d+"])]', correct: true }
      - { value: '#[Route("/blog/{page?1}", name: "blog_list", requirements: ["page" => "\d+"])]', correct: false }
      - { value: '#[Route("/blog/{page:\d+?1}", name: "blog_list")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you enforce HTTPS for a specific route named `login` with path `/login` in YAML?'
    answers:
      - { value: 'login: path: /login controller: App\Controller\SecurityController::login schemes: [https]', correct: true }
      - { value: 'login: path: /login controller: App\Controller\SecurityController::login secure: true', correct: false }
      - { value: 'login: path: /login controller: App\Controller\SecurityController::login protocol: https', correct: false }
      - { value: 'login: path: /login controller: App\Controller\SecurityController::login require_https: true', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#forcing-https'
  - question: 'Which of the following is a valid way to import routes from a controller directory using PHP attributes in `config/routes.yaml`?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute', correct: true }
      - { value: 'controllers: import: ../../src/Controller/ type: attributes', correct: false }
      - { value: 'controllers: path: ../../src/Controller/ format: attribute', correct: false }
      - { value: 'controllers: from: ../../src/Controller/ as: attributes', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#importing-routes-from-controller-attributes'
  - question: 'To apply a common prefix `/blog` and a name prefix `blog_` to all routes imported from `src/Controller/` using YAML, which configuration is correct?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute prefix: /blog name_prefix: blog_', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute path_prefix: /blog route_prefix: blog_', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute base_path: /blog base_name: blog_', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute namespace: /blog name: blog_', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#adding-a-prefix-to-imported-routes'
  - question: 'How can you define a conditional route that only matches GET or HEAD requests and a Firefox User-Agent in PHP attributes?'
    answers:
      - { value: '#[Route("/contact", name: "contact", condition: "context.getMethod() in [\'GET\', \'HEAD\'] and request.headers.get(\'User-Agent\') matches \'/firefox/i\'")]', correct: true }
      - { value: '#[Route("/contact", name: "contact", methods: ["GET", "HEAD"], headers: ["User-Agent" => "/firefox/i"])]', correct: false }
      - { value: '#[Route("/contact", name: "contact", when: "method in [\'GET\', \'HEAD\'] and user_agent matches \'/firefox/i\'")]', correct: false }
      - { value: '#[Route("/contact", name: "contact", if: "request.isMethod(\'GET\') or request.isMethod(\'HEAD\') and request.headers.get(\'User-Agent\').contains(\'firefox\')")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-conditions'
  - question: 'What is the purpose of the `stateless: true` option on a Symfony route?'
    answers:
      - { value: 'It prevents the session from being started for that specific route, which is useful for HTTP caching.', correct: true }
      - { value: 'It marks the route as not requiring any user authentication.', correct: false }
      - { value: 'It indicates that the route does not store any data in the database.', correct: false }
      - { value: 'It forces the route to always return a JSON response.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#stateless-routes'
  - question: 'Which of the following is the correct way to define localized paths for a route named `about_us` in English (`/about-us`) and Dutch (`/over-ons`) using PHP attributes?'
    answers:
      - { value: '#[Route(path: ["en" => "/about-us", "nl" => "/over-ons"], name: "about_us")]', correct: true }
      - { value: '#[Route("/about-us", name: "about_us", locale: "en")] #[Route("/over-ons", name: "about_us", locale: "nl")]', correct: false }
      - { value: '#[Route(paths: {en: "/about-us", nl: "/over-ons"}, name: "about_us")]', correct: false }
      - { value: '#[Route(localized: ["en" => "/about-us", "nl" => "/over-ons"], name: "about_us")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#localized-routes'
  - question: 'How can you check if a Symfony route exists without regenerating the routing cache, and handle the case where it does not exist?'
    answers:
      - { value: 'try { $url = $this->router->generate($routeName, $routeParameters); } catch (RouteNotFoundException $e) { // route not defined }', correct: true }
      - { value: 'if ($this->router->routeExists($routeName)) { /* ... */ }', correct: false }
      - { value: 'if ($this->router->getRouteCollection()->has($routeName)) { /* ... */ }', correct: false }
      - { value: 'if ($this->router->match($routeName)) { /* ... */ }', correct: false }
    help: |
      'https://symfony.com/doc/current/routing.html#checking-if-a-route-exists'
  - question: 'What is the purpose of the `router:match` command in Symfony?'
    answers:
      - { value: 'To display which route matches a given URL.', correct: true }
      - { value: 'To generate a URL for a given route name.', correct: false }
      - { value: 'To compile the routing cache.', correct: false }
      - { value: 'To list all available routes.', correct: false }
    help: |
      'https://symfony.com/doc/current/routing.html#matching-a-url'
  - question: 'Which of the following correctly defines a route alias `product_details` for an existing route `product_show` in YAML?'
    answers:
      - { value: 'product_details: alias: product_show', correct: true }
      - { value: 'product_details: target: product_show', correct: false }
      - { value: 'product_details: link: product_show', correct: false }
      - { value: 'product_details: reference: product_show', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-aliases'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `page` to `1`?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'What is the significance of `_controller` in route defaults or requirements?'
    answers:
      - { value: 'It specifies the controller and method to execute when the route matches.', correct: true }
      - { value: 'It defines a special parameter that holds the current controller name.', correct: false }
      - { value: 'It is a reserved keyword for internal Symfony routing processes.', correct: false }
      - { value: 'It indicates that the route requires a specific controller service.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you apply a domain name matching requirement to a route in YAML, for example, to match `www.example.com`?'
    answers:
      - { value: 'host: www.example.com', correct: true }
      - { value: 'domain: www.example.com', correct: false }
      - { value: 'server: www.example.com', correct: false }
      - { value: 'hostname: www.example.com', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is a correct way to define a route that only matches POST requests in YAML?'
    answers:
      - { value: 'contact_process: path: /contact controller: App\Controller\DefaultController::process methods: [POST]', correct: true }
      - { value: 'contact_process: path: /contact controller: App\Controller\DefaultController::process method: POST', correct: false }
      - { value: 'contact_process: path: /contact controller: App\Controller\DefaultController::process http_method: POST', correct: false }
      - { value: 'contact_process: path: /contact controller: App\Controller\DefaultController::process request_method: POST', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` parameter in Symfony routing?'
    answers:
      - { value: 'It is a special route parameter used to determine the user''s locale for translation and content negotiation.', correct: true }
      - { value: 'It specifies the default language for the application.', correct: false }
      - { value: 'It is a parameter used for internal caching mechanisms.', correct: false }
      - { value: 'It defines the timezone for the route.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'To debug a specific route named `app_lucky_number`, which command would you use?'
    answers:
      - { value: 'php bin/console debug:router app_lucky_number', correct: true }
      - { value: 'php bin/console router:show app_lucky_number', correct: false }
      - { value: 'php bin/console route:info app_lucky_number', correct: false }
      - { value: 'php bin/console show:route app_lucky_number', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#debugging-routes'
  - question: 'When defining a route in YAML, how do you specify that the `page` parameter should be an integer?'
    answers:
      - { value: 'requirements: page: \d+', correct: true }
      - { value: 'type: page: integer', correct: false }
      - { value: 'format: page: int', correct: false }
      - { value: 'validate: page: is_numeric', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'Which of the following is a valid way to define a route with a default value for a parameter `name` in PHP configuration?'
    answers:
      - { value: '$routes->add(''hello'', ''/hello/{name}'')->defaults([''name'' => ''World'']);', correct: true }
      - { value: '$routes->add(''hello'', ''/hello/{name}'')->default(''name'', ''World'');', correct: false }
      - { value: '$routes->add(''hello'', ''/hello/{name}'', [''name'' => ''World'']);', correct: false }
      - { value: '$routes->add(''hello'', ''/hello/{name}'')->setDefaults([''name'' => ''World'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'What is the correct PHP attribute syntax for defining a route that matches `/blog` and is named `blog_list`?'
    answers:
      - { value: '#[Route("/blog", name: "blog_list")]', correct: true }
      - { value: '#[Route(path: "/blog", id: "blog_list")]', correct: false }
      - { value: '#[Route(url: "/blog", routeName: "blog_list")]', correct: false }
      - { value: '#[Route("/blog", alias: "blog_list")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-routes'
  - question: 'How can you apply a global requirement for `_locale` to be `en|es|fr` for all routes imported from a directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->requirements([''_locale'' => ''en|es|fr'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setRequirement(''_locale'', ''en|es|fr'');', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->globalRequirements([''_locale'' => ''en|es|fr'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->addRequirement(''_locale'', ''en|es|fr'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#adding-a-prefix-to-imported-routes'
  - question: 'Which of the following correctly defines a route with an optional parameter `page` that defaults to `1` in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How do you define a route alias `product_details` for an existing route `product_show` in PHP configuration?'
    answers:
      - { value: '$routes->alias(''product_details'', ''product_show'');', correct: true }
      - { value: '$routes->addAlias(''product_details'', ''product_show'');', correct: false }
      - { value: '$routes->setAlias(''product_details'', ''product_show'');', correct: false }
      - { value: '$routes->link(''product_details'', ''product_show'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-aliases'
  - question: 'What is the purpose of the `_format` parameter in Symfony routing?'
    answers:
      - { value: 'It is a special route parameter used to determine the requested format (e.g., html, json, xml).', correct: true }
      - { value: 'It specifies the default output format for the response.', correct: false }
      - { value: 'It defines the date and time format for route parameters.', correct: false }
      - { value: 'It is used for internal routing optimization.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'When importing routes from controller attributes, how can you exclude specific files like `DebugEmailController.php` in YAML?'
    answers:
      - { value: 'exclude: ../../src/Controller/{Debug*Controller.php}', correct: true }
      - { value: 'ignore: ../../src/Controller/DebugEmailController.php', correct: false }
      - { value: 'skip: ../../src/Controller/DebugEmailController.php', correct: false }
      - { value: 'filter: !DebugEmailController.php', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#excluding-files-when-loading-attributes'
  - question: 'How can you define a route that only matches requests from `www.example.com` using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "homepage", host: "www.example.com")]', correct: true }
      - { value: '#[Route("/", name: "homepage", domain: "www.example.com")]', correct: false }
      - { value: '#[Route("/", name: "homepage", server: "www.example.com")]', correct: false }
      - { value: '#[Route("/", name: "homepage", hostname: "www.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and HEAD HTTP methods in PHP attributes?'
    answers:
      - { value: '#[Route("/contact", name: "contact", methods: ["GET", "HEAD"])]', correct: true }
      - { value: '#[Route("/contact", name: "contact", method: "GET|HEAD")]', correct: false }
      - { value: '#[Route("/contact", name: "contact", httpMethods: ["GET", "HEAD"])]', correct: false }
      - { value: '#[Route("/contact", name: "contact", allowMethods: ["GET", "HEAD"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the primary benefit of using PHP attributes for routing in Symfony?'
    answers:
      - { value: 'Routes are defined directly alongside the controller actions, improving code locality and readability.', correct: true }
      - { value: 'It eliminates the need for any routing configuration files.', correct: false }
      - { value: 'It provides better performance compared to YAML or XML routing.', correct: false }
      - { value: 'It automatically generates all necessary route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-routes'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in YAML?'
    answers:
      - { value: 'defaults: page: 1', correct: true }
      - { value: 'default_values: page: 1', correct: false }
      - { value: 'parameters: page: { default: 1 }', correct: false }
      - { value: 'options: default_page: 1', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` and a requirement that it matches any character in YAML?'
    answers:
      - { value: 'path: /blog/{slug}', correct: true }
      - { value: 'path: /blog/{slug<.*>}', correct: false }
      - { value: 'path: /blog/{slug:any}', correct: false }
      - { value: 'path: /blog/{slug}', requirements: { slug: '.+' }', correct: true }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_fragment` parameter in Symfony routing?'
    answers:
      - { value: 'It is a special route parameter used to specify a URL fragment (hash) for a generated URL.', correct: true }
      - { value: 'It defines a part of the URL that is not matched by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from an old path `/old-blog` to a new path `/new-blog` in Symfony?'
    answers:
      - { value: 'You would typically use a redirect controller or a dedicated redirect route type, not a standard route definition for this.', correct: true }
      - { value: 'old_blog: path: /old-blog redirect_to: /new-blog', correct: false }
      - { value: 'old_blog: path: /old-blog forward_to: new_blog_route', correct: false }
      - { value: 'old_blog: path: /old-blog target: /new-blog', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer, using PHP attributes?'
    answers:
      - { value: '#[Route("/posts/{id}", name: "post_show", requirements: ["id" => "\d+"])]', correct: true }
      - { value: '#[Route("/posts/{id<\d+>}", name: "post_show")]', correct: true }
      - { value: '#[Route("/posts/{id}", name: "post_show", type: ["id" => "int"])]', correct: false }
      - { value: '#[Route("/posts/{id}", name: "post_show", validate: ["id" => "integer"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `blog.example.com` using YAML?'
    answers:
      - { value: 'blog_homepage: path: / controller: App\Controller\BlogController::homepage host: blog.example.com', correct: true }
      - { value: 'blog_homepage: path: / controller: App\Controller\BlogController::homepage domain: blog.example.com', correct: false }
      - { value: 'blog_homepage: path: / controller: App\Controller\BlogController::homepage server: blog.example.com', correct: false }
      - { value: 'blog_homepage: path: / controller: App\Controller\BlogController::homepage hostname: blog.example.com', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'What is the purpose of the `_scheme` parameter in Symfony routing?'
    answers:
      - { value: 'It is a special route parameter used to specify the required URL scheme (e.g., http, https) for a generated URL.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How do you define a route that only matches POST requests using PHP attributes?'
    answers:
      - { value: '#[Route("/contact", name: "contact_process", methods: ["POST"])]', correct: true }
      - { value: '#[Route("/contact", name: "contact_process", method: "POST")]', correct: false }
      - { value: '#[Route("/contact", name: "contact_process", httpMethods: ["POST"])]', correct: false }
      - { value: '#[Route("/contact", name: "contact_process", allowMethods: ["POST"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'Which of the following correctly defines a route with a parameter `page` and a default value of `1` in PHP attributes?'
    answers:
      - { value: '#[Route("/blog/{page}", name: "blog_index", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_index", options: ["default_page" => 1])]', correct: false }
      - { value: '#[Route("/blog/{page?1}", name: "blog_index")]', correct: true }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'What is the purpose of the `_controller` attribute in Symfony routing?'
    answers:
      - { value: 'It specifies the fully qualified class name and method of the controller to execute for a matched route.', correct: true }
      - { value: 'It defines the name of the controller service to be injected.', correct: false }
      - { value: 'It is a placeholder for the current controller name in the URL.', correct: false }
      - { value: 'It indicates that the route is handled by a custom controller factory.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a parameter `id` that must be an integer and a default value of `1` for `page` in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_list'', ''/blog/{page}'')->controller([BlogController::class, ''list''])->defaults([''page'' => 1])->requirements([''page'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page}'', [''page'' => 1], [''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page}'')->setDefault(''page'', 1)->setRequirement(''page'', ''\d+'');', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page<\d+>?1}'')->controller([BlogController::class, ''list'']);', correct: true }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` and a requirement that it matches any character in PHP attributes?'
    answers:
      - { value: '#[Route("/blog/{slug}", name: "blog_show")]', correct: true }
      - { value: '#[Route("/blog/{slug<.*>}", name: "blog_show")]', correct: false }
      - { value: '#[Route("/blog/{slug}", name: "blog_show", requirements: ["slug" => ".+"])]', correct: true }
      - { value: '#[Route("/blog/{slug:any}", name: "blog_show")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_format` special internal routing attribute?'
    answers:
      - { value: 'It allows a route to match different file extensions (e.g., .html, .json) and makes the matched extension available as a parameter.', correct: true }
      - { value: 'It specifies the default response format if none is explicitly requested.', correct: false }
      - { value: 'It forces the route to always return data in a specific format.', correct: false }
      - { value: 'It is used for internal caching of different response formats.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-path` to `/new-path` with a 301 (Moved Permanently) status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `permanent: true` option.', correct: true }
      - { value: 'old_path: path: /old-path redirect: new_path status: 301', correct: false }
      - { value: 'old_path: path: /old-path forward: new_path_route code: 301', correct: false }
      - { value: 'old_path: path: /old-path target: /new-path type: redirect permanent: true', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `title` to "Hello world!"?'
    answers:
      - { value: '#[Route("/blog/{page}", name: "blog_index", defaults: ["title" => "Hello world!"])]', correct: true }
      - { value: 'public function index(int $page, string $title = "Hello world!"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", default_title: "Hello world!")]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_index", options: ["title" => "Hello world!"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in YAML?'
    answers:
      - { value: 'path: /product/{id} requirements: id: \d+', correct: true }
      - { value: 'path: /product/{id<int>}', correct: false }
      - { value: 'path: /product/{id} type: int', correct: false }
      - { value: 'path: /product/{id} validate: integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `admin.example.com` and `api.example.com` using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "admin_homepage", host: "{subdomain}.example.com", requirements: ["subdomain" => "admin|api"])]', correct: true }
      - { value: '#[Route("/", name: "admin_homepage", hosts: ["admin.example.com", "api.example.com"])]', correct: false }
      - { value: '#[Route("/", name: "admin_homepage", domain: "admin.example.com|api.example.com")]', correct: false }
      - { value: '#[Route("/", name: "admin_homepage", server: "admin.example.com,api.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following correctly defines a route that only matches GET and POST HTTP methods in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET, POST]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET|POST', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_methods: [GET, POST]', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_methods: [GET, POST]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It is used internally by Symfony to store the name of the route that was actually matched, especially when dealing with route aliases.', correct: true }
      - { value: 'It defines the preferred route name for SEO purposes.', correct: false }
      - { value: 'It specifies the route that should be used for canonical URLs.', correct: false }
      - { value: 'It is a deprecated attribute for route naming.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` using PHP attributes (Symfony 7.3+)?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", aliases: ["product_details"])]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", link: "product_details")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alternate: "product_details")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_list'', ''/blog/{page<\d+>?1}'')->controller([BlogController::class, ''list'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page}'')->controller([BlogController::class, ''list''])->defaults([''page'' => 1])->requirements([''page'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page?1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page}'')->controller([BlogController::class, ''list''])->optional(''page'', 1)->require(''page'', ''\d+'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that only matches requests from `api.example.com` using YAML?'
    answers:
      - { value: 'api_route: path: / controller: App\Controller\ApiController::index host: api.example.com', correct: true }
      - { value: 'api_route: path: / controller: App\Controller\ApiController::index domain: api.example.com', correct: false }
      - { value: 'api_route: path: / controller: App\Controller\ApiController::index server: api.example.com', correct: false }
      - { value: 'api_route: path: / controller: App\Controller\ApiController::index hostname: api.example.com', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/contact", name: "contact", methods: ["GET"])]', correct: true }
      - { value: '#[Route("/contact", name: "contact", method: "GET")]', correct: false }
      - { value: '#[Route("/contact", name: "contact", httpMethod: "GET")]', correct: false }
      - { value: '#[Route("/contact", name: "contact", allowMethod: "GET")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_format` special parameter in a route path like `/articles/{_locale}/{year}/{title}.{_format}`?'
    answers:
      - { value: 'It allows the route to match different file extensions (e.g., .html, .json, .xml) and makes the matched extension available as a parameter in the controller.', correct: true }
      - { value: 'It specifies the default output format for the response if not explicitly provided.', correct: false }
      - { value: 'It is a mandatory parameter that must always be present in the URL.', correct: false }
      - { value: 'It defines the data serialization format for the route.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you mark a route alias `product_show` as deprecated in YAML, providing a custom message?'
    answers:
      - { value: 'product_show: alias: product_details deprecated: package: acme/package version: 1.2 message: ''The "%alias_id%" route alias is deprecated. Please use "product_details" instead.''', correct: true }
      - { value: 'product_show: alias: product_details deprecate: true message: ''Use product_details instead.''', correct: false }
      - { value: 'product_show: alias: product_details status: deprecated message: ''Use product_details instead.''', correct: false }
      - { value: 'product_show: alias: product_details warning: ''This alias is deprecated.''', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with a parameter `id` that must be an integer in PHP configuration?'
    answers:
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->requirements([''id'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''product_show'', ''/product/{id<int>}'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setRequirement(''id'', ''\d+'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->type(''id'', ''integer'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `subdomain.example.com` where `subdomain` is a dynamic parameter, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "subdomain_homepage", host: "{subdomain}.example.com")]', correct: true }
      - { value: '#[Route("/", name: "subdomain_homepage", domain: "{subdomain}.example.com")]', correct: false }
      - { value: '#[Route("/", name: "subdomain_homepage", server: "{subdomain}.example.com")]', correct: false }
      - { value: '#[Route("/", name: "subdomain_homepage", hostname: "{subdomain}.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PUT HTTP method in YAML?'
    answers:
      - { value: 'item_update: path: /items/{id} controller: App\Controller\ItemController::update methods: [PUT]', correct: true }
      - { value: 'item_update: path: /items/{id} controller: App\Controller\ItemController::update method: PUT', correct: false }
      - { value: 'item_update: path: /items/{id} controller: App\Controller\ItemController::update http_method: PUT', correct: false }
      - { value: 'item_update: path: /items/{id} controller: App\Controller\ItemController::update request_method: PUT', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special parameter in a route path like `/articles/{_locale}/{year}/{title}`?'
    answers:
      - { value: 'It automatically sets the locale for the current request based on the URL segment.', correct: true }
      - { value: 'It is a mandatory parameter that must always be present in the URL for internationalization.', correct: false }
      - { value: 'It defines the default locale for the entire application.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_index'', ''/blog/{page}'')->defaults([''page'' => 1]);', correct: true }
      - { value: '$routes->add(''blog_index'', ''/blog/{page}'')->setDefault(''page'', 1);', correct: false }
      - { value: '$routes->add(''blog_index'', ''/blog/{page}'', [''page'' => 1]);', correct: false }
      - { value: '$routes->add(''blog_index'', ''/blog/{page}'')->setOptions([''default_page'' => 1]);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` and a requirement that it matches any character in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'');', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug<.*>}'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->requirements([''slug'' => ''.+'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug:any}'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the matched route.', correct: true }
      - { value: 'It defines the default route to be used if no other route matches.', correct: false }
      - { value: 'It is used for internal route caching.', correct: false }
      - { value: 'It specifies the route priority.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-product/{id}` to `/new-product/{id}` with a 302 (Found) status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type without the `permanent: true` option.', correct: true }
      - { value: 'old_product: path: /old-product/{id} redirect: new_product status: 302', correct: false }
      - { value: 'old_product: path: /old-product/{id} forward: new_product_route code: 302', correct: false }
      - { value: 'old_product: path: /old-product/{id} target: /new-product/{id} type: redirect', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `1`?'
    answers:
      - { value: 'public function show(int $id = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 1])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 1)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in PHP attributes?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", requirements: ["id" => "\d+"])]', correct: true }
      - { value: '#[Route("/product/{id<\d+>}", name: "product_show")]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", type: "int")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", validate: "integer")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `api.{version}.example.com` where `version` is a dynamic parameter, using YAML?'
    answers:
      - { value: 'api_version_route: path: / controller: App\Controller\ApiController::index host: api.{version}.example.com', correct: true }
      - { value: 'api_version_route: path: / controller: App\Controller\ApiController::index domain: api.{version}.example.com', correct: false }
      - { value: 'api_version_route: path: / controller: App\Controller\ApiController::index server: api.{version}.example.com', correct: false }
      - { value: 'api_version_route: path: / controller: App\Controller\ApiController::index hostname: api.{version}.example.com', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches DELETE HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_delete", methods: ["DELETE"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_delete", method: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", httpMethod: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", allowMethod: "DELETE")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It contains all the parameters extracted from the matched route, including special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the default parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP configuration, and mark it as deprecated?'
    answers:
      - { value: '$routes->alias(''product_details'', ''product_show'')->deprecated(''acme/package'', ''1.2'', ''The "%alias_id%" route alias is deprecated. Please use "product_details" instead.'');', correct: true }
      - { value: '$routes->alias(''product_details'', ''product_show'')->setDeprecated(true, ''Use product_details instead.'');', correct: false }
      - { value: '$routes->alias(''product_details'', ''product_show'')->deprecate(''Use product_details instead.'');', correct: false }
      - { value: '$routes->alias(''product_details'', ''product_show'')->addOption(''deprecated'', true);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.nl` for Dutch content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com nl: www.example.nl', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com nl: www.example.nl', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, nl: www.example.nl }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com nl: www.example.nl', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and POST HTTP methods in PHP configuration?'
    answers:
      - { value: '$routes->add(''contact'', ''/contact'')->methods([''GET'', ''POST'']);', correct: true }
      - { value: '$routes->add(''contact'', ''/contact'')->method(''GET|POST'');', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->setMethods([''GET'', ''POST'']);', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->allowMethods([''GET'', ''POST'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the actual route that was matched, especially useful when route aliases are involved.', correct: true }
      - { value: 'It defines the primary route name for a given URL.', correct: false }
      - { value: 'It is used for generating canonical URLs for SEO.', correct: false }
      - { value: 'It indicates a route that should not be cached.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `id` to `1` in PHP configuration?'
    answers:
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->defaults([''id'' => 1]);', correct: true }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setDefault(''id'', 1);', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'', [''id'' => 1]);', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setOptions([''default_id'' => 1]);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` and a requirement that it matches any character in YAML?'
    answers:
      - { value: 'path: /blog/{slug}', correct: true }
      - { value: 'path: /blog/{slug<.*>}', correct: false }
      - { value: 'path: /blog/{slug} requirements: slug: ".+"', correct: true }
      - { value: 'path: /blog/{slug:any}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_fragment` special internal routing attribute?'
    answers:
      - { value: 'It allows you to generate URLs with a URL fragment (e.g., `#section`).', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-page` to `/new-page` with a 301 status code using PHP attributes?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `permanent: true` option, not a standard route attribute.', correct: true }
      - { value: '#[Route("/old-page", name: "old_page", redirect: "/new-page", status: 301)]', correct: false }
      - { value: '#[Route("/old-page", name: "old_page", forward: "new_page_route", code: 301)]', correct: false }
      - { value: '#[Route("/old-page", name: "old_page", target: "/new-page", type: "redirect", permanent: true)]', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `category` to "uncategorized"?'
    answers:
      - { value: 'public function list(string $category = "uncategorized"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{category}", name: "blog_list", defaults: ["category" => "uncategorized"])]', correct: true }
      - { value: '#[Route("/blog/{category}", name: "blog_list", default: "uncategorized")]', correct: false }
      - { value: '#[Route("/blog/{category}", name: "blog_list", options: ["default_category" => "uncategorized"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `year` that must be a 4-digit number in YAML?'
    answers:
      - { value: 'path: /articles/{year} requirements: year: \d{4}', correct: true }
      - { value: 'path: /articles/{year<4digits>}', correct: false }
      - { value: 'path: /articles/{year} type: year: int(4)', correct: false }
      - { value: 'path: /articles/{year} validate: year: /^\d{4}$/', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `m.example.com` for mobile users, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "mobile_homepage", host: "m.example.com")]', correct: true }
      - { value: '#[Route("/", name: "mobile_homepage", domain: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", server: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", hostname: "m.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and POST HTTP methods in PHP attributes?'
    answers:
      - { value: '#[Route("/contact", name: "contact", methods: ["GET", "POST"])]', correct: true }
      - { value: '#[Route("/contact", name: "contact", method: "GET|POST")]', correct: false }
      - { value: '#[Route("/contact", name: "contact", httpMethods: ["GET", "POST"])]', correct: false }
      - { value: '#[Route("/contact", name: "contact", allowMethods: ["GET", "POST"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It holds an associative array of all parameters matched from the URL, including any default values and special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the required parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP attributes, and mark it as deprecated with a generic message?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecated: ["package" => "acme/package", "version" => "1.2"])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecate: true)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], status: "deprecated")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], warning: "deprecated")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in PHP configuration, using the inline syntax?'
    answers:
      - { value: '$routes->add(''blog_list'', ''/blog/{page<\d+>?1}'')->controller([BlogController::class, ''list'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page?1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page=1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page:\d+:1}'')->controller([BlogController::class, ''list'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `api.example.com` for English content and `api.example.nl` for Dutch content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''api.example.com'', ''nl'' => ''api.example.nl'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''api.example.com'', ''nl'' => ''api.example.nl'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''api.example.com'', ''nl'' => ''api.example.nl'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''api.example.com'', ''nl'' => ''api.example.nl'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_method: GET', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is automatically set by the router if a `_locale` parameter is present in the route path or defaults, and can be used to determine the current locale.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `slug` to "default-slug" in YAML?'
    answers:
      - { value: 'defaults: slug: default-slug', correct: true }
      - { value: 'default_values: slug: default-slug', correct: false }
      - { value: 'parameters: slug: { default: default-slug }', correct: false }
      - { value: 'options: default_slug: default-slug', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_show", requirements: ["id" => "\d+"], condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id<\d+>}", name: "item_show", condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_show", type: "positive_int")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_show", validate: "positive_integer")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `api.example.com` and enforces HTTPS, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "api_homepage", host: "api.example.com", schemes: ["https"])]', correct: true }
      - { value: '#[Route("/", name: "api_homepage", domain: "api.example.com", secure: true)]', correct: false }
      - { value: '#[Route("/", name: "api_homepage", server: "api.example.com", protocol: "https")]', correct: false }
      - { value: '#[Route("/", name: "api_homepage", hostname: "api.example.com", require_https: true)]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches DELETE HTTP method in YAML?'
    answers:
      - { value: 'item_delete: path: /items/{id} controller: App\Controller\ItemController::delete methods: [DELETE]', correct: true }
      - { value: 'item_delete: path: /items/{id} controller: App\Controller\ItemController::delete method: DELETE', correct: false }
      - { value: 'item_delete: path: /items/{id} controller: App\Controller\ItemController::delete http_method: DELETE', correct: false }
      - { value: 'item_delete: path: /items/{id} controller: App\Controller\ItemController::delete request_method: DELETE', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_format` special internal routing attribute?'
    answers:
      - { value: 'It allows the route to match different file extensions (e.g., .html, .json) and makes the matched extension available as a parameter in the controller.', correct: true }
      - { value: 'It specifies the default output format for the response if none is explicitly requested.', correct: false }
      - { value: 'It forces the route to always return data in a specific format.', correct: false }
      - { value: 'It is used for internal caching of different response formats.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-route` to a named route `new_route` with a 301 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: true`.', correct: true }
      - { value: 'old_route: path: /old-route redirect: new_route status: 301', correct: false }
      - { value: 'old_route: path: /old-route forward: new_route code: 301', correct: false }
      - { value: 'old_route: path: /old-route target_route: new_route type: redirect permanent: true', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `0`?'
    answers:
      - { value: 'public function show(int $id = 0): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 0])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 0)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 0])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `uuid` that must be a valid UUID in YAML?'
    answers:
      - { value: 'path: /entity/{uuid} requirements: uuid: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"', correct: true }
      - { value: 'path: /entity/{uuid<uuid>}', correct: false }
      - { value: 'path: /entity/{uuid} type: uuid', correct: false }
      - { value: 'path: /entity/{uuid} validate: uuid_format', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `api.example.com` for English content and `api.example.de` for German content, when importing routes from a controller directory using PHP attributes?'
    answers:
      - { value: '#[Route(host: ["en" => "api.example.com", "de" => "api.example.de"])] class ApiController { /* ... */ }', correct: true }
      - { value: '#[Route(hosts: ["en" => "api.example.com", "de" => "api.example.de"])] class ApiController { /* ... */ }', correct: false }
      - { value: '#[Route(domain: ["en" => "api.example.com", "de" => "api.example.de"])] class ApiController { /* ... */ }', correct: false }
      - { value: '#[Route(locale_host: ["en" => "api.example.com", "de" => "api.example.de"])] class ApiController { /* ... */ }', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PATCH HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_patch", methods: ["PATCH"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_patch", method: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", httpMethod: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", allowMethod: "PATCH")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_scheme` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify the required URL scheme (HTTP or HTTPS) when generating a URL for a route.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in YAML?'
    answers:
      - { value: 'defaults: page: 1', correct: true }
      - { value: 'default_values: page: 1', correct: false }
      - { value: 'parameters: page: { default: 1 }', correct: false }
      - { value: 'options: default_page: 1', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in PHP configuration?'
    answers:
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->requirements([''id'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''product_show'', ''/product/{id<int>}'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setRequirement(''id'', ''\d+'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->type(''id'', ''integer'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_controller` special internal routing attribute?'
    answers:
      - { value: 'It specifies the controller and action that should be executed when the route is matched.', correct: true }
      - { value: 'It defines the name of the controller service to be injected.', correct: false }
      - { value: 'It is a placeholder for the current controller name in the URL.', correct: false }
      - { value: 'It indicates that the route is handled by a custom controller factory.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-blog-post/{slug}` to `/blog/{slug}` with a 301 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: true`.', correct: true }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} redirect: blog_show status: 301', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} forward: blog_show code: 301', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} target_route: blog_show type: redirect permanent: true', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `page` to `1`?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_list", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in YAML?'
    answers:
      - { value: 'path: /items/{id} requirements: id: \d+ condition: "params[\'id\'] > 0"', correct: true }
      - { value: 'path: /items/{id<positive_int>}', correct: false }
      - { value: 'path: /items/{id} type: positive_integer', correct: false }
      - { value: 'path: /items/{id} validate: positive_integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.de` for German content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com de: www.example.de', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com de: www.example.de', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, de: www.example.de }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com de: www.example.de', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PATCH HTTP method in YAML?'
    answers:
      - { value: 'item_patch: path: /items/{id} controller: App\Controller\ItemController::patch methods: [PATCH]', correct: true }
      - { value: 'item_patch: path: /items/{id} controller: App\Controller\ItemController::patch method: PATCH', correct: false }
      - { value: 'item_patch: path: /items/{id} controller: App\Controller\ItemController::patch http_method: PATCH', correct: false }
      - { value: 'item_patch: path: /items/{id} controller: App\Controller\ItemController::patch request_method: PATCH', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_fragment` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify a URL fragment (hash) when generating a URL for a route.', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in YAML, and mark it as deprecated with a generic message?'
    answers:
      - { value: 'product_details: alias: product_show deprecated: package: acme/package version: 1.2', correct: true }
      - { value: 'product_details: alias: product_show deprecate: true', correct: false }
      - { value: 'product_details: alias: product_show status: deprecated', correct: false }
      - { value: 'product_details: alias: product_show warning: ''deprecated''', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in PHP attributes, using the inline syntax?'
    answers:
      - { value: '#[Route("/blog/{page<\d+>?1}", name: "blog_list")]', correct: true }
      - { value: '#[Route("/blog/{page?1}", name: "blog_list", requirements: ["page" => "\d+"])]', correct: false }
      - { value: '#[Route("/blog/{page=1}", name: "blog_list", requirements: ["page" => "\d+"])]', correct: false }
      - { value: '#[Route("/blog/{page:\d+:1}", name: "blog_list")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.fr` for French content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''fr'' => ''www.example.fr'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''fr'' => ''www.example.fr'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''fr'' => ''www.example.fr'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''fr'' => ''www.example.fr'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''contact'', ''/contact'')->methods([''GET'']);', correct: true }
      - { value: '$routes->add(''contact'', ''/contact'')->method(''GET'');', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->setMethods([''GET'']);', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->allowMethod(''GET'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in PHP attributes?'
    answers:
      - { value: '#[Route("/blog/{page}", name: "blog_index", defaults: ["page" => 1])]', correct: true }
      - { value: 'public function index(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_index", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` that must be a string of at least 5 characters in YAML?'
    answers:
      - { value: 'path: /blog/{slug} requirements: slug: ".{5,}"', correct: true }
      - { value: 'path: /blog/{slug<min:5>}', correct: false }
      - { value: 'path: /blog/{slug} type: string(min:5)', correct: false }
      - { value: 'path: /blog/{slug} validate: min_length: 5', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_route` special internal routing attribute?'
    answers:
      - { value: 'It holds the name of the route that was successfully matched.', correct: true }
      - { value: 'It defines the default route to be used if no other route matches.', correct: false }
      - { value: 'It is used for internal route caching.', correct: false }
      - { value: 'It specifies the route priority.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-path` to `/new-path` with a 302 status code using PHP attributes?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type without the `permanent: true` option, not a standard route attribute.', correct: true }
      - { value: '#[Route("/old-path", name: "old_path", redirect: "/new-path", status: 302)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", forward: "new_path_route", code: 302)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", target: "/new-path", type: "redirect")]', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `1`?'
    answers:
      - { value: 'public function show(int $id = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 1])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 1)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in YAML?'
    answers:
      - { value: 'path: /product/{id} requirements: id: \d+', correct: true }
      - { value: 'path: /product/{id<int>}', correct: false }
      - { value: 'path: /product/{id} type: int', correct: false }
      - { value: 'path: /product/{id} validate: integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.es` for Spanish content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com es: www.example.es', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com es: www.example.es', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, es: www.example.es }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com es: www.example.es', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches POST HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''contact_process'', ''/contact'')->methods([''POST'']);', correct: true }
      - { value: '$routes->add(''contact_process'', ''/contact'')->method(''POST'');', correct: false }
      - { value: '$routes->add(''contact_process'', ''/contact'')->setMethods([''POST'']);', correct: false }
      - { value: '$routes->add(''contact_process'', ''/contact'')->allowMethod(''POST'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It contains all the parameters extracted from the matched route, including any default values and special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the required parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP configuration, and mark it as deprecated with a generic message?'
    answers:
      - { value: '$routes->alias(''product_details'', ''product_show'')->deprecated(''acme/package'', ''1.2'');', correct: true }
      - { value: '$routes->alias(''product_details'', ''product_show'')->setDeprecated(true);', correct: false }
      - { value: '$routes->alias(''product_details'', ''product_show'')->deprecate();', correct: false }
      - { value: '$routes->alias(''product_details'', ''product_show'')->addOption(''deprecated'', true);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.it` for Italian content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''it'' => ''www.example.it'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''it'' => ''www.example.it'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''it'' => ''www.example.it'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''it'' => ''www.example.it'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PUT HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_update", methods: ["PUT"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_update", method: "PUT")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_update", httpMethod: "PUT")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_update", allowMethod: "PUT")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_scheme` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify the required URL scheme (HTTP or HTTPS) when generating a URL for a route.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `slug` to "default-slug" in PHP attributes?'
    answers:
      - { value: 'public function show(string $slug = "default-slug"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{slug}", name: "blog_show", defaults: ["slug" => "default-slug"])]', correct: true }
      - { value: '#[Route("/blog/{slug}", name: "blog_show", default: "default-slug")]', correct: false }
      - { value: '#[Route("/blog/{slug}", name: "blog_show", options: ["default_slug" => "default-slug"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in PHP configuration?'
    answers:
      - { value: '$routes->add(''items_show'', ''/items/{id}'')->requirements([''id'' => ''\d+''])->condition(''params[''id''] > 0'');', correct: true }
      - { value: '$routes->add(''items_show'', ''/items/{id<positive_int>}'');', correct: false }
      - { value: '$routes->add(''items_show'', ''/items/{id}'')->type(''id'', ''positive_integer'');', correct: false }
      - { value: '$routes->add(''items_show'', ''/items/{id}'')->validate(''id'', ''positive_integer'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `subdomain.example.com` where `subdomain` is a dynamic parameter, and enforces HTTPS, using YAML?'
    answers:
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index host: "{subdomain}.example.com" schemes: [https]', correct: true }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index domain: "{subdomain}.example.com" secure: true', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index server: "{subdomain}.example.com" protocol: https', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index hostname: "{subdomain}.example.com" require_https: true', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches DELETE HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''item_delete'', ''/items/{id}'')->methods([''DELETE'']);', correct: true }
      - { value: '$routes->add(''item_delete'', ''/items/{id}'')->method(''DELETE'');', correct: false }
      - { value: '$routes->add(''item_delete'', ''/items/{id}'')->setMethods([''DELETE'']);', correct: false }
      - { value: '$routes->add(''item_delete'', ''/items/{id}'')->allowMethod(''DELETE'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_format` special internal routing attribute?'
    answers:
      - { value: 'It allows the route to match different file extensions (e.g., .html, .json) and makes the matched extension available as a parameter in the controller.', correct: true }
      - { value: 'It specifies the default output format for the response if none is explicitly requested.', correct: false }
      - { value: 'It forces the route to always return data in a specific format.', correct: false }
      - { value: 'It is used for internal caching of different response formats.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-product/{id}` to `/new-product/{id}` with a 302 status code using PHP attributes?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type without the `permanent: true` option, not a standard route attribute.', correct: true }
      - { value: '#[Route("/old-product/{id}", name: "old_product", redirect: "/new-product/{id}", status: 302)]', correct: false }
      - { value: '#[Route("/old-product/{id}", name: "old_product", forward: "new_product_route", code: 302)]', correct: false }
      - { value: '#[Route("/old-product/{id}", name: "old_product", target: "/new-product/{id}", type: "redirect")]', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `page` to `1`?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_list", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` that must be a string of at least 5 characters in PHP attributes?'
    answers:
      - { value: '#[Route("/blog/{slug}", name: "blog_show", requirements: ["slug" => ".{5,}"])]', correct: true }
      - { value: '#[Route("/blog/{slug<min:5>}", name: "blog_show")]', correct: false }
      - { value: '#[Route("/blog/{slug}", name: "blog_show", type: "string(min:5)")]', correct: false }
      - { value: '#[Route("/blog/{slug}", name: "blog_show", validate: "min_length:5")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the actual route that was matched, especially useful when route aliases are involved.', correct: true }
      - { value: 'It defines the primary route name for a given URL.', correct: false }
      - { value: 'It is used for generating canonical URLs for SEO.', correct: false }
      - { value: 'It indicates a route that should not be cached.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.jp` for Japanese content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com jp: www.example.jp', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com jp: www.example.jp', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, jp: www.example.jp }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com jp: www.example.jp', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and HEAD HTTP methods in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET, HEAD]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET|HEAD', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_methods: [GET, HEAD]', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_methods: [GET, HEAD]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `id` to `0` in YAML?'
    answers:
      - { value: 'defaults: id: 0', correct: true }
      - { value: 'default_values: id: 0', correct: false }
      - { value: 'parameters: id: { default: 0 }', correct: false }
      - { value: 'options: default_id: 0', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `uuid` that must be a valid UUID in PHP attributes?'
    answers:
      - { value: '#[Route("/entity/{uuid}", name: "entity_show", requirements: ["uuid" => "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"])]', correct: true }
      - { value: '#[Route("/entity/{uuid<uuid>}", name: "entity_show")]', correct: false }
      - { value: '#[Route("/entity/{uuid}", name: "entity_show", type: "uuid")]', correct: false }
      - { value: '#[Route("/entity/{uuid}", name: "entity_show", validate: "uuid_format")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_route` special internal routing attribute?'
    answers:
      - { value: 'It holds the name of the route that was successfully matched.', correct: true }
      - { value: 'It defines the default route to be used if no other route matches.', correct: false }
      - { value: 'It is used for internal route caching.', correct: false }
      - { value: 'It specifies the route priority.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-route` to a named route `new_route` with a 302 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: false`.', correct: true }
      - { value: 'old_route: path: /old-route redirect: new_route status: 302', correct: false }
      - { value: 'old_route: path: /old-route forward: new_route code: 302', correct: false }
      - { value: 'old_route: path: /old-route target_route: new_route type: redirect', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `category` to "uncategorized"?'
    answers:
      - { value: 'public function list(string $category = "uncategorized"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{category}", name: "blog_list", defaults: ["category" => "uncategorized"])]', correct: true }
      - { value: '#[Route("/blog/{category}", name: "blog_list", default: "uncategorized")]', correct: false }
      - { value: '#[Route("/blog/{category}", name: "blog_list", options: ["default_category" => "uncategorized"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `year` that must be a 4-digit number in PHP attributes?'
    answers:
      - { value: '#[Route("/articles/{year}", name: "article_show", requirements: ["year" => "\d{4}"])]', correct: true }
      - { value: '#[Route("/articles/{year<4digits>}", name: "article_show")]', correct: false }
      - { value: '#[Route("/articles/{year}", name: "article_show", type: "int(4)")]', correct: false }
      - { value: '#[Route("/articles/{year}", name: "article_show", validate: "/^\d{4}$/")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `m.example.com` for mobile users, using YAML?'
    answers:
      - { value: 'mobile_homepage: path: / controller: App\Controller\MobileController::homepage host: m.example.com', correct: true }
      - { value: 'mobile_homepage: path: / controller: App\Controller\MobileController::homepage domain: m.example.com', correct: false }
      - { value: 'mobile_homepage: path: / controller: App\Controller\MobileController::homepage server: m.example.com', correct: false }
      - { value: 'mobile_homepage: path: / controller: App\Controller\MobileController::homepage hostname: m.example.com', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PATCH HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''item_patch'', ''/items/{id}'')->methods([''PATCH'']);', correct: true }
      - { value: '$routes->add(''item_patch'', ''/items/{id}'')->method(''PATCH'');', correct: false }
      - { value: '$routes->add(''item_patch'', ''/items/{id}'')->setMethods([''PATCH'']);', correct: false }
      - { value: '$routes->add(''item_patch'', ''/items/{id}'')->allowMethod(''PATCH'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_scheme` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify the required URL scheme (HTTP or HTTPS) when generating a URL for a route.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `slug` to "default-slug" in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->defaults([''slug'' => ''default-slug'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setDefault(''slug'', ''default-slug'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'', [''slug'' => ''default-slug'']);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setOptions([''default_slug'' => ''default-slug'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in YAML?'
    answers:
      - { value: 'path: /items/{id} requirements: id: \d+ condition: "params[\'id\'] > 0"', correct: true }
      - { value: 'path: /items/{id<positive_int>}', correct: false }
      - { value: 'path: /items/{id} type: positive_integer', correct: false }
      - { value: 'path: /items/{id} validate: positive_integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `subdomain.example.com` where `subdomain` is a dynamic parameter, and enforces HTTPS, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "subdomain_homepage", host: "{subdomain}.example.com", schemes: ["https"])]', correct: true }
      - { value: '#[Route("/", name: "subdomain_homepage", domain: "{subdomain}.example.com", secure: true)]', correct: false }
      - { value: '#[Route("/", name: "subdomain_homepage", server: "{subdomain}.example.com", protocol: "https")]', correct: false }
      - { value: '#[Route("/", name: "subdomain_homepage", hostname: "{subdomain}.example.com", require_https: true)]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and POST HTTP methods in PHP attributes?'
    answers:
      - { value: '#[Route("/contact", name: "contact", methods: ["GET", "POST"])]', correct: true }
      - { value: '#[Route("/contact", name: "contact", method: "GET|POST")]', correct: false }
      - { value: '#[Route("/contact", name: "contact", httpMethods: ["GET", "POST"])]', correct: false }
      - { value: '#[Route("/contact", name: "contact", allowMethods: ["GET", "POST"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It contains all the parameters extracted from the matched route, including any default values and special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the required parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP attributes, and mark it as deprecated with a custom message?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecated: ["package" => "acme/package", "version" => "1.2", "message" => "The \"%alias_id%\" route alias is deprecated. Please use \"product_details\" instead."])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecate: true, message: "Use product_details instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], status: "deprecated", message: "Use product_details instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], warning: "This alias is deprecated.")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.cn` for Chinese content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_method: GET', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in PHP attributes?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_list", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` that must be a string of at least 5 characters in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->requirements([''slug'' => ''.{5,}'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug<min:5>}'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->type(''string'', [''min_length'' => 5]);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->validate(''min_length'', 5);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the actual route that was matched, especially useful when route aliases are involved.', correct: true }
      - { value: 'It defines the primary route name for a given URL.', correct: false }
      - { value: 'It is used for generating canonical URLs for SEO.', correct: false }
      - { value: 'It indicates a route that should not be cached.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-blog-post/{slug}` to `/blog/{slug}` with a 302 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: false`.', correct: true }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} redirect: blog_show status: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} forward: blog_show code: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} target_route: blog_show type: redirect', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `1`?'
    answers:
      - { value: 'public function show(int $id = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 1])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 1)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in YAML?'
    answers:
      - { value: 'path: /product/{id} requirements: id: \d+', correct: true }
      - { value: 'path: /product/{id<int>}', correct: false }
      - { value: 'path: /product/{id} type: int', correct: false }
      - { value: 'path: /product/{id} validate: integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.kr` for Korean content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com kr: www.example.kr', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com kr: www.example.kr', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, kr: www.example.kr }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com kr: www.example.kr', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PUT HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->methods([''PUT'']);', correct: true }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->method(''PUT'');', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->setMethods([''PUT'']);', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->allowMethod(''PUT'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_fragment` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify a URL fragment (hash) when generating a URL for a route.', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in YAML, and mark it as deprecated with a custom message?'
    answers:
      - { value: 'product_details: alias: product_show deprecated: package: acme/package version: 1.2 message: ''The "%alias_id%" route alias is deprecated. Please use "product_show" instead.''', correct: true }
      - { value: 'product_details: alias: product_show deprecate: true message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show status: deprecated message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show warning: ''This alias is deprecated.''', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in PHP configuration, using the inline syntax?'
    answers:
      - { value: '$routes->add(''blog_list'', ''/blog/{page<\d+>?1}'')->controller([BlogController::class, ''list'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page?1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page=1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page:\d+:1}'')->controller([BlogController::class, ''list'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.ru` for Russian content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches DELETE HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_delete", methods: ["DELETE"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_delete", method: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", httpMethod: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", allowMethod: "DELETE")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in YAML?'
    answers:
      - { value: 'defaults: page: 1', correct: true }
      - { value: 'default_values: page: 1', correct: false }
      - { value: 'parameters: page: { default: 1 }', correct: false }
      - { value: 'options: default_page: 1', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in PHP configuration?'
    answers:
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->requirements([''id'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''product_show'', ''/product/{id<int>}'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setRequirement(''id'', ''\d+'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->type(''id'', ''integer'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_controller` special internal routing attribute?'
    answers:
      - { value: 'It specifies the controller and action that should be executed when the route is matched.', correct: true }
      - { value: 'It defines the name of the controller service to be injected.', correct: false }
      - { value: 'It is a placeholder for the current controller name in the URL.', correct: false }
      - { value: 'It indicates that the route is handled by a custom controller factory.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-path` to `/new-path` with a 301 status code using PHP attributes?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `permanent: true` option, not a standard route attribute.', correct: true }
      - { value: '#[Route("/old-path", name: "old_path", redirect: "/new-path", status: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", forward: "new_path_route", code: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", target: "/new-path", type: "redirect", permanent: true)]', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `title` to "Hello world!"?'
    answers:
      - { value: 'public function index(int $page, string $title = "Hello world!"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", defaults: ["title" => "Hello world!"])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", default_title: "Hello world!")]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_index", options: ["title" => "Hello world!"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `year` that must be a 4-digit number in YAML?'
    answers:
      - { value: 'path: /articles/{year} requirements: year: \d{4}', correct: true }
      - { value: 'path: /articles/{year<4digits>}', correct: false }
      - { value: 'path: /articles/{year} type: year: int(4)', correct: false }
      - { value: 'path: /articles/{year} validate: year: /^\d{4}$/', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `m.example.com` for mobile users, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "mobile_homepage", host: "m.example.com")]', correct: true }
      - { value: '#[Route("/", name: "mobile_homepage", domain: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", server: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", hostname: "m.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PATCH HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_patch", methods: ["PATCH"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_patch", method: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", httpMethod: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", allowMethod: "PATCH")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_scheme` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify the required URL scheme (HTTP or HTTPS) when generating a URL for a route.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `slug` to "default-slug" in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->defaults([''slug'' => ''default-slug'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setDefault(''slug'', ''default-slug'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'', [''slug'' => ''default-slug'']);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setOptions([''default_slug'' => ''default-slug'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_show", requirements: ["id" => "\d+"], condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id<\d+>}", name: "item_show", condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_show", type: "positive_int")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_show", validate: "positive_integer")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `subdomain.example.com` where `subdomain` is a dynamic parameter, and enforces HTTPS, using YAML?'
    answers:
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index host: "{subdomain}.example.com" schemes: [https]', correct: true }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index domain: "{subdomain}.example.com" secure: true', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index server: "{subdomain}.example.com" protocol: https', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index hostname: "{subdomain}.example.com" require_https: true', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and POST HTTP methods in PHP configuration?'
    answers:
      - { value: '$routes->add(''contact'', ''/contact'')->methods([''GET'', ''POST'']);', correct: true }
      - { value: '$routes->add(''contact'', ''/contact'')->method(''GET|POST'');', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->setMethods([''GET'', ''POST'']);', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->allowMethods([''GET'', ''POST'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It contains all the parameters extracted from the matched route, including any default values and special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the required parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP attributes, and mark it as deprecated with a custom message?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecated: ["package" => "acme/package", "version" => "1.2", "message" => "The \"%alias_id%\" route alias is deprecated. Please use \"product_show\" instead."])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecate: true, message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], status: "deprecated", message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], warning: "This alias is deprecated.")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.cn` for Chinese content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_method: GET', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in PHP attributes?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_list", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` that must be a string of at least 5 characters in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->requirements([''slug'' => ''.{5,}'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug<min:5>}'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->type(''string'', [''min_length'' => 5]);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->validate(''min_length'', 5);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the actual route that was matched, especially useful when route aliases are involved.', correct: true }
      - { value: 'It defines the primary route name for a given URL.', correct: false }
      - { value: 'It is used for generating canonical URLs for SEO.', correct: false }
      - { value: 'It indicates a route that should not be cached.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-blog-post/{slug}` to `/blog/{slug}` with a 302 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: false`.', correct: true }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} redirect: blog_show status: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} forward: blog_show code: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} target_route: blog_show type: redirect', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `1`?'
    answers:
      - { value: 'public function show(int $id = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 1])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 1)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in YAML?'
    answers:
      - { value: 'path: /product/{id} requirements: id: \d+', correct: true }
      - { value: 'path: /product/{id<int>}', correct: false }
      - { value: 'path: /product/{id} type: int', correct: false }
      - { value: 'path: /product/{id} validate: integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.kr` for Korean content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com kr: www.example.kr', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com kr: www.example.kr', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, kr: www.example.kr }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com kr: www.example.kr', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PUT HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->methods([''PUT'']);', correct: true }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->method(''PUT'');', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->setMethods([''PUT'']);', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->allowMethod(''PUT'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_fragment` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify a URL fragment (hash) when generating a URL for a route.', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in YAML, and mark it as deprecated with a custom message?'
    answers:
      - { value: 'product_details: alias: product_show deprecated: package: acme/package version: 1.2 message: ''The "%alias_id%" route alias is deprecated. Please use "product_show" instead.''', correct: true }
      - { value: 'product_details: alias: product_show deprecate: true message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show status: deprecated message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show warning: ''This alias is deprecated.''', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in PHP configuration, using the inline syntax?'
    answers:
      - { value: '$routes->add(''blog_list'', ''/blog/{page<\d+>?1}'')->controller([BlogController::class, ''list'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page?1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page=1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page:\d+:1}'')->controller([BlogController::class, ''list'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.ru` for Russian content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches DELETE HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_delete", methods: ["DELETE"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_delete", method: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", httpMethod: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", allowMethod: "DELETE")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in YAML?'
    answers:
      - { value: 'defaults: page: 1', correct: true }
      - { value: 'default_values: page: 1', correct: false }
      - { value: 'parameters: page: { default: 1 }', correct: false }
      - { value: 'options: default_page: 1', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in PHP configuration?'
    answers:
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->requirements([''id'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''product_show'', ''/product/{id<int>}'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setRequirement(''id'', ''\d+'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->type(''id'', ''integer'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_controller` special internal routing attribute?'
    answers:
      - { value: 'It specifies the controller and action that should be executed when the route is matched.', correct: true }
      - { value: 'It defines the name of the controller service to be injected.', correct: false }
      - { value: 'It is a placeholder for the current controller name in the URL.', correct: false }
      - { value: 'It indicates that the route is handled by a custom controller factory.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-path` to `/new-path` with a 301 status code using PHP attributes?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `permanent: true` option, not a standard route attribute.', correct: true }
      - { value: '#[Route("/old-path", name: "old_path", redirect: "/new-path", status: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", forward: "new_path_route", code: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", target: "/new-path", type: "redirect", permanent: true)]', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `title` to "Hello world!"?'
    answers:
      - { value: 'public function index(int $page, string $title = "Hello world!"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", defaults: ["title" => "Hello world!"])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", default_title: "Hello world!")]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_index", options: ["title" => "Hello world!"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `year` that must be a 4-digit number in YAML?'
    answers:
      - { value: 'path: /articles/{year} requirements: year: \d{4}', correct: true }
      - { value: 'path: /articles/{year<4digits>}', correct: false }
      - { value: 'path: /articles/{year} type: year: int(4)', correct: false }
      - { value: 'path: /articles/{year} validate: year: /^\d{4}$/', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `m.example.com` for mobile users, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "mobile_homepage", host: "m.example.com")]', correct: true }
      - { value: '#[Route("/", name: "mobile_homepage", domain: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", server: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", hostname: "m.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PATCH HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_patch", methods: ["PATCH"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_patch", method: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", httpMethod: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", allowMethod: "PATCH")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_scheme` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify the required URL scheme (HTTP or HTTPS) when generating a URL for a route.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `slug` to "default-slug" in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->defaults([''slug'' => ''default-slug'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setDefault(''slug'', ''default-slug'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'', [''slug'' => ''default-slug'']);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setOptions([''default_slug'' => ''default-slug'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_show", requirements: ["id" => "\d+"], condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id<\d+>}", name: "item_show", condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_show", type: "positive_int")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_show", validate: "positive_integer")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `subdomain.example.com` where `subdomain` is a dynamic parameter, and enforces HTTPS, using YAML?'
    answers:
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index host: "{subdomain}.example.com" schemes: [https]', correct: true }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index domain: "{subdomain}.example.com" secure: true', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index server: "{subdomain}.example.com" protocol: https', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index hostname: "{subdomain}.example.com" require_https: true', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and POST HTTP methods in PHP configuration?'
    answers:
      - { value: '$routes->add(''contact'', ''/contact'')->methods([''GET'', ''POST'']);', correct: true }
      - { value: '$routes->add(''contact'', ''/contact'')->method(''GET|POST'');', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->setMethods([''GET'', ''POST'']);', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->allowMethods([''GET'', ''POST'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It contains all the parameters extracted from the matched route, including any default values and special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the required parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP attributes, and mark it as deprecated with a custom message?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecated: ["package" => "acme/package", "version" => "1.2", "message" => "The \"%alias_id%\" route alias is deprecated. Please use \"product_show\" instead."])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecate: true, message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], status: "deprecated", message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], warning: "This alias is deprecated.")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.cn` for Chinese content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_method: GET', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in PHP attributes?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_list", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` that must be a string of at least 5 characters in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->requirements([''slug'' => ''.{5,}'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug<min:5>}'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->type(''string'', [''min_length'' => 5]);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->validate(''min_length'', 5);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the actual route that was matched, especially useful when route aliases are involved.', correct: true }
      - { value: 'It defines the primary route name for a given URL.', correct: false }
      - { value: 'It is used for generating canonical URLs for SEO.', correct: false }
      - { value: 'It indicates a route that should not be cached.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-blog-post/{slug}` to `/blog/{slug}` with a 302 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: false`.', correct: true }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} redirect: blog_show status: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} forward: blog_show code: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} target_route: blog_show type: redirect', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `1`?'
    answers:
      - { value: 'public function show(int $id = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 1])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 1)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in YAML?'
    answers:
      - { value: 'path: /product/{id} requirements: id: \d+', correct: true }
      - { value: 'path: /product/{id<int>}', correct: false }
      - { value: 'path: /product/{id} type: int', correct: false }
      - { value: 'path: /product/{id} validate: integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.kr` for Korean content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com kr: www.example.kr', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com kr: www.example.kr', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, kr: www.example.kr }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com kr: www.example.kr', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PUT HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->methods([''PUT'']);', correct: true }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->method(''PUT'');', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->setMethods([''PUT'']);', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->allowMethod(''PUT'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_fragment` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify a URL fragment (hash) when generating a URL for a route.', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in YAML, and mark it as deprecated with a custom message?'
    answers:
      - { value: 'product_details: alias: product_show deprecated: package: acme/package version: 1.2 message: ''The "%alias_id%" route alias is deprecated. Please use "product_show" instead.''', correct: true }
      - { value: 'product_details: alias: product_show deprecate: true message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show status: deprecated message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show warning: ''This alias is deprecated.''', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in PHP configuration, using the inline syntax?'
    answers:
      - { value: '$routes->add(''blog_list'', ''/blog/{page<\d+>?1}'')->controller([BlogController::class, ''list'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page?1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page=1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page:\d+:1}'')->controller([BlogController::class, ''list'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.ru` for Russian content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches DELETE HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_delete", methods: ["DELETE"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_delete", method: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", httpMethod: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", allowMethod: "DELETE")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in YAML?'
    answers:
      - { value: 'defaults: page: 1', correct: true }
      - { value: 'default_values: page: 1', correct: false }
      - { value: 'parameters: page: { default: 1 }', correct: false }
      - { value: 'options: default_page: 1', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in PHP configuration?'
    answers:
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->requirements([''id'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''product_show'', ''/product/{id<int>}'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setRequirement(''id'', ''\d+'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->type(''id'', ''integer'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_controller` special internal routing attribute?'
    answers:
      - { value: 'It specifies the controller and action that should be executed when the route is matched.', correct: true }
      - { value: 'It defines the name of the controller service to be injected.', correct: false }
      - { value: 'It is a placeholder for the current controller name in the URL.', correct: false }
      - { value: 'It indicates that the route is handled by a custom controller factory.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-path` to `/new-path` with a 301 status code using PHP attributes?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `permanent: true` option, not a standard route attribute.', correct: true }
      - { value: '#[Route("/old-path", name: "old_path", redirect: "/new-path", status: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", forward: "new_path_route", code: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", target: "/new-path", type: "redirect", permanent: true)]', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `title` to "Hello world!"?'
    answers:
      - { value: 'public function index(int $page, string $title = "Hello world!"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", defaults: ["title" => "Hello world!"])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", default_title: "Hello world!")]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_index", options: ["title" => "Hello world!"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `year` that must be a 4-digit number in YAML?'
    answers:
      - { value: 'path: /articles/{year} requirements: year: \d{4}', correct: true }
      - { value: 'path: /articles/{year<4digits>}', correct: false }
      - { value: 'path: /articles/{year} type: year: int(4)', correct: false }
      - { value: 'path: /articles/{year} validate: year: /^\d{4}$/', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `m.example.com` for mobile users, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "mobile_homepage", host: "m.example.com")]', correct: true }
      - { value: '#[Route("/", name: "mobile_homepage", domain: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", server: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", hostname: "m.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PATCH HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_patch", methods: ["PATCH"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_patch", method: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", httpMethod: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", allowMethod: "PATCH")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_scheme` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify the required URL scheme (HTTP or HTTPS) when generating a URL for a route.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `slug` to "default-slug" in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->defaults([''slug'' => ''default-slug'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setDefault(''slug'', ''default-slug'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'', [''slug'' => ''default-slug'']);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setOptions([''default_slug'' => ''default-slug'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_show", requirements: ["id" => "\d+"], condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id<\d+>}", name: "item_show", condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_show", type: "positive_int")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_show", validate: "positive_integer")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `subdomain.example.com` where `subdomain` is a dynamic parameter, and enforces HTTPS, using YAML?'
    answers:
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index host: "{subdomain}.example.com" schemes: [https]', correct: true }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index domain: "{subdomain}.example.com" secure: true', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index server: "{subdomain}.example.com" protocol: https', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index hostname: "{subdomain}.example.com" require_https: true', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and POST HTTP methods in PHP configuration?'
    answers:
      - { value: '$routes->add(''contact'', ''/contact'')->methods([''GET'', ''POST'']);', correct: true }
      - { value: '$routes->add(''contact'', ''/contact'')->method(''GET|POST'');', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->setMethods([''GET'', ''POST'']);', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->allowMethods([''GET'', ''POST'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It contains all the parameters extracted from the matched route, including any default values and special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the required parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP attributes, and mark it as deprecated with a custom message?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecated: ["package" => "acme/package", "version" => "1.2", "message" => "The \"%alias_id%\" route alias is deprecated. Please use \"product_show\" instead."])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecate: true, message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], status: "deprecated", message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], warning: "This alias is deprecated.")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.cn` for Chinese content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_method: GET', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in PHP attributes?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_list", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` that must be a string of at least 5 characters in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->requirements([''slug'' => ''.{5,}'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug<min:5>}'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->type(''string'', [''min_length'' => 5]);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->validate(''min_length'', 5);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the actual route that was matched, especially useful when route aliases are involved.', correct: true }
      - { value: 'It defines the primary route name for a given URL.', correct: false }
      - { value: 'It is used for generating canonical URLs for SEO.', correct: false }
      - { value: 'It indicates a route that should not be cached.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-blog-post/{slug}` to `/blog/{slug}` with a 302 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: false`.', correct: true }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} redirect: blog_show status: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} forward: blog_show code: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} target_route: blog_show type: redirect', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `1`?'
    answers:
      - { value: 'public function show(int $id = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 1])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 1)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in YAML?'
    answers:
      - { value: 'path: /product/{id} requirements: id: \d+', correct: true }
      - { value: 'path: /product/{id<int>}', correct: false }
      - { value: 'path: /product/{id} type: int', correct: false }
      - { value: 'path: /product/{id} validate: integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.kr` for Korean content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com kr: www.example.kr', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com kr: www.example.kr', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, kr: www.example.kr }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com kr: www.example.kr', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PUT HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->methods([''PUT'']);', correct: true }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->method(''PUT'');', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->setMethods([''PUT'']);', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->allowMethod(''PUT'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_fragment` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify a URL fragment (hash) when generating a URL for a route.', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in YAML, and mark it as deprecated with a custom message?'
    answers:
      - { value: 'product_details: alias: product_show deprecated: package: acme/package version: 1.2 message: ''The "%alias_id%" route alias is deprecated. Please use "product_show" instead.''', correct: true }
      - { value: 'product_details: alias: product_show deprecate: true message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show status: deprecated message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show warning: ''This alias is deprecated.''', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in PHP configuration, using the inline syntax?'
    answers:
      - { value: '$routes->add(''blog_list'', ''/blog/{page<\d+>?1}'')->controller([BlogController::class, ''list'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page?1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page=1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page:\d+:1}'')->controller([BlogController::class, ''list'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.ru` for Russian content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches DELETE HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_delete", methods: ["DELETE"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_delete", method: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", httpMethod: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", allowMethod: "DELETE")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in YAML?'
    answers:
      - { value: 'defaults: page: 1', correct: true }
      - { value: 'default_values: page: 1', correct: false }
      - { value: 'parameters: page: { default: 1 }', correct: false }
      - { value: 'options: default_page: 1', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in PHP configuration?'
    answers:
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->requirements([''id'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''product_show'', ''/product/{id<int>}'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setRequirement(''id'', ''\d+'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->type(''id'', ''integer'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_controller` special internal routing attribute?'
    answers:
      - { value: 'It specifies the controller and action that should be executed when the route is matched.', correct: true }
      - { value: 'It defines the name of the controller service to be injected.', correct: false }
      - { value: 'It is a placeholder for the current controller name in the URL.', correct: false }
      - { value: 'It indicates that the route is handled by a custom controller factory.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-path` to `/new-path` with a 301 status code using PHP attributes?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `permanent: true` option, not a standard route attribute.', correct: true }
      - { value: '#[Route("/old-path", name: "old_path", redirect: "/new-path", status: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", forward: "new_path_route", code: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", target: "/new-path", type: "redirect", permanent: true)]', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `title` to "Hello world!"?'
    answers:
      - { value: 'public function index(int $page, string $title = "Hello world!"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", defaults: ["title" => "Hello world!"])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", default_title: "Hello world!")]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_index", options: ["title" => "Hello world!"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `year` that must be a 4-digit number in YAML?'
    answers:
      - { value: 'path: /articles/{year} requirements: year: \d{4}', correct: true }
      - { value: 'path: /articles/{year<4digits>}', correct: false }
      - { value: 'path: /articles/{year} type: year: int(4)', correct: false }
      - { value: 'path: /articles/{year} validate: year: /^\d{4}$/', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `m.example.com` for mobile users, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "mobile_homepage", host: "m.example.com")]', correct: true }
      - { value: '#[Route("/", name: "mobile_homepage", domain: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", server: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", hostname: "m.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PATCH HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_patch", methods: ["PATCH"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_patch", method: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", httpMethod: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", allowMethod: "PATCH")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_scheme` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify the required URL scheme (HTTP or HTTPS) when generating a URL for a route.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `slug` to "default-slug" in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->defaults([''slug'' => ''default-slug'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setDefault(''slug'', ''default-slug'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'', [''slug'' => ''default-slug'']);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setOptions([''default_slug'' => ''default-slug'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_show", requirements: ["id" => "\d+"], condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id<\d+>}", name: "item_show", condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_show", type: "positive_int")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_show", validate: "positive_integer")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `subdomain.example.com` where `subdomain` is a dynamic parameter, and enforces HTTPS, using YAML?'
    answers:
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index host: "{subdomain}.example.com" schemes: [https]', correct: true }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index domain: "{subdomain}.example.com" secure: true', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index server: "{subdomain}.example.com" protocol: https', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index hostname: "{subdomain}.example.com" require_https: true', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and POST HTTP methods in PHP configuration?'
    answers:
      - { value: '$routes->add(''contact'', ''/contact'')->methods([''GET'', ''POST'']);', correct: true }
      - { value: '$routes->add(''contact'', ''/contact'')->method(''GET|POST'');', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->setMethods([''GET'', ''POST'']);', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->allowMethods([''GET'', ''POST'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It contains all the parameters extracted from the matched route, including any default values and special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the required parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP attributes, and mark it as deprecated with a custom message?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecated: ["package" => "acme/package", "version" => "1.2", "message" => "The \"%alias_id%\" route alias is deprecated. Please use \"product_show\" instead."])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecate: true, message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], status: "deprecated", message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], warning: "This alias is deprecated.")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.cn` for Chinese content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_method: GET', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in PHP attributes?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_list", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` that must be a string of at least 5 characters in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->requirements([''slug'' => ''.{5,}'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug<min:5>}'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->type(''string'', [''min_length'' => 5]);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->validate(''min_length'', 5);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the actual route that was matched, especially useful when route aliases are involved.', correct: true }
      - { value: 'It defines the primary route name for a given URL.', correct: false }
      - { value: 'It is used for generating canonical URLs for SEO.', correct: false }
      - { value: 'It indicates a route that should not be cached.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-blog-post/{slug}` to `/blog/{slug}` with a 302 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: false`.', correct: true }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} redirect: blog_show status: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} forward: blog_show code: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} target_route: blog_show type: redirect', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `1`?'
    answers:
      - { value: 'public function show(int $id = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 1])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 1)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in YAML?'
    answers:
      - { value: 'path: /product/{id} requirements: id: \d+', correct: true }
      - { value: 'path: /product/{id<int>}', correct: false }
      - { value: 'path: /product/{id} type: int', correct: false }
      - { value: 'path: /product/{id} validate: integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.kr` for Korean content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com kr: www.example.kr', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com kr: www.example.kr', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, kr: www.example.kr }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com kr: www.example.kr', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PUT HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->methods([''PUT'']);', correct: true }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->method(''PUT'');', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->setMethods([''PUT'']);', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->allowMethod(''PUT'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_fragment` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify a URL fragment (hash) when generating a URL for a route.', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in YAML, and mark it as deprecated with a custom message?'
    answers:
      - { value: 'product_details: alias: product_show deprecated: package: acme/package version: 1.2 message: ''The "%alias_id%" route alias is deprecated. Please use "product_show" instead.''', correct: true }
      - { value: 'product_details: alias: product_show deprecate: true message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show status: deprecated message: ''Use product_show instead.''', correct: false }
      - { value: 'product_details: alias: product_show warning: ''This alias is deprecated.''', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in PHP configuration, using the inline syntax?'
    answers:
      - { value: '$routes->add(''blog_list'', ''/blog/{page<\d+>?1}'')->controller([BlogController::class, ''list'']);', correct: true }
      - { value: '$routes->add(''blog_list'', ''/blog/{page?1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page=1}'')->controller([BlogController::class, ''list''])->requirements([''page'' => ''\d+'']);', correct: false }
      - { value: '$routes->add(''blog_list'', ''/blog/{page:\d+:1}'')->controller([BlogController::class, ''list'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.ru` for Russian content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''ru'' => ''www.example.ru'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches DELETE HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_delete", methods: ["DELETE"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_delete", method: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", httpMethod: "DELETE")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_delete", allowMethod: "DELETE")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in YAML?'
    answers:
      - { value: 'defaults: page: 1', correct: true }
      - { value: 'default_values: page: 1', correct: false }
      - { value: 'parameters: page: { default: 1 }', correct: false }
      - { value: 'options: default_page: 1', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in PHP configuration?'
    answers:
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->requirements([''id'' => ''\d+'']);', correct: true }
      - { value: '$routes->add(''product_show'', ''/product/{id<int>}'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->setRequirement(''id'', ''\d+'');', correct: false }
      - { value: '$routes->add(''product_show'', ''/product/{id}'')->type(''id'', ''integer'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_controller` special internal routing attribute?'
    answers:
      - { value: 'It specifies the controller and action that should be executed when the route is matched.', correct: true }
      - { value: 'It defines the name of the controller service to be injected.', correct: false }
      - { value: 'It is a placeholder for the current controller name in the URL.', correct: false }
      - { value: 'It indicates that the route is handled by a custom controller factory.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-path` to `/new-path` with a 301 status code using PHP attributes?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `permanent: true` option, not a standard route attribute.', correct: true }
      - { value: '#[Route("/old-path", name: "old_path", redirect: "/new-path", status: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", forward: "new_path_route", code: 301)]', correct: false }
      - { value: '#[Route("/old-path", name: "old_path", target: "/new-path", type: "redirect", permanent: true)]', correct: false }
    help: |
      'https://symfony.com/doc/current/routing.html#redirect-routes'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `title` to "Hello world!"?'
    answers:
      - { value: 'public function index(int $page, string $title = "Hello world!"): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", defaults: ["title" => "Hello world!"])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_index", default_title: "Hello world!")]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_index", options: ["title" => "Hello world!"])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `year` that must be a 4-digit number in YAML?'
    answers:
      - { value: 'path: /articles/{year} requirements: year: \d{4}', correct: true }
      - { value: 'path: /articles/{year<4digits>}', correct: false }
      - { value: 'path: /articles/{year} type: year: int(4)', correct: false }
      - { value: 'path: /articles/{year} validate: year: /^\d{4}$/', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `m.example.com` for mobile users, using PHP attributes?'
    answers:
      - { value: '#[Route("/", name: "mobile_homepage", host: "m.example.com")]', correct: true }
      - { value: '#[Route("/", name: "mobile_homepage", domain: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", server: "m.example.com")]', correct: false }
      - { value: '#[Route("/", name: "mobile_homepage", hostname: "m.example.com")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PATCH HTTP method in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_patch", methods: ["PATCH"])]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_patch", method: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", httpMethod: "PATCH")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_patch", allowMethod: "PATCH")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_scheme` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify the required URL scheme (HTTP or HTTPS) when generating a URL for a route.', correct: true }
      - { value: 'It defines the default security protocol for the route.', correct: false }
      - { value: 'It is used to determine the HTTP method of the request.', correct: false }
      - { value: 'It specifies the URL encoding scheme.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route with a default value for a parameter `slug` to "default-slug" in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->defaults([''slug'' => ''default-slug'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setDefault(''slug'', ''default-slug'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'', [''slug'' => ''default-slug'']);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->setOptions([''default_slug'' => ''default-slug'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be a positive integer in PHP attributes?'
    answers:
      - { value: '#[Route("/items/{id}", name: "item_show", requirements: ["id" => "\d+"], condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id<\d+>}", name: "item_show", condition: "params[\'id\'] > 0")]', correct: true }
      - { value: '#[Route("/items/{id}", name: "item_show", type: "positive_int")]', correct: false }
      - { value: '#[Route("/items/{id}", name: "item_show", validate: "positive_integer")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `subdomain.example.com` where `subdomain` is a dynamic parameter, and enforces HTTPS, using YAML?'
    answers:
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index host: "{subdomain}.example.com" schemes: [https]', correct: true }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index domain: "{subdomain}.example.com" secure: true', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index server: "{subdomain}.example.com" protocol: https', correct: false }
      - { value: 'subdomain_route: path: / controller: App\Controller\SubdomainController::index hostname: "{subdomain}.example.com" require_https: true', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET and POST HTTP methods in PHP configuration?'
    answers:
      - { value: '$routes->add(''contact'', ''/contact'')->methods([''GET'', ''POST'']);', correct: true }
      - { value: '$routes->add(''contact'', ''/contact'')->method(''GET|POST'');', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->setMethods([''GET'', ''POST'']);', correct: false }
      - { value: '$routes->add(''contact'', ''/contact'')->allowMethods([''GET'', ''POST'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_route_params` special internal routing attribute?'
    answers:
      - { value: 'It contains all the parameters extracted from the matched route, including any default values and special parameters like `_controller` and `_locale`.', correct: true }
      - { value: 'It defines the required parameters for a route.', correct: false }
      - { value: 'It is used for internal route parameter validation.', correct: false }
      - { value: 'It specifies the order of route parameters.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in PHP attributes, and mark it as deprecated with a custom message?'
    answers:
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecated: ["package" => "acme/package", "version" => "1.2", "message" => "The \"%alias_id%\" route alias is deprecated. Please use \"product_show\" instead."])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], deprecate: true, message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], status: "deprecated", message: "Use product_show instead.")]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", alias: ["product_details"], warning: "This alias is deprecated.")]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#deprecating-route-aliases'
  - question: 'Which of the following correctly defines a route with an optional `page` parameter that defaults to `1` and requires it to be a digit in YAML, using the inline syntax?'
    answers:
      - { value: 'path: /blog/{page<\d+>?1}', correct: true }
      - { value: 'path: /blog/{page?1}', correct: false }
      - { value: 'path: /blog/{page=1}', correct: false }
      - { value: 'path: /blog/{page:\d+:1}', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#optional-parameters'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.cn` for Chinese content, when importing routes from a controller directory using PHP configuration?'
    answers:
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->host([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: true }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->setHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->domain([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
      - { value: '$routes->import(''../../src/Controller/'', ''attribute'')->localeHost([''en'' => ''www.example.com'', ''cn'' => ''www.example.cn'']);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches GET HTTP method in YAML?'
    answers:
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact methods: [GET]', correct: true }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact http_method: GET', correct: false }
      - { value: 'contact: path: /contact controller: App\Controller\DefaultController::contact request_method: GET', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_locale` special internal routing attribute?'
    answers:
      - { value: 'It is used to automatically set the locale for the current request based on a parameter in the URL.', correct: true }
      - { value: 'It defines the default locale for the application if no other locale is specified.', correct: false }
      - { value: 'It is used for internal caching of localized content.', correct: false }
      - { value: 'It specifies the language of the route definition itself.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#user-s-locale-guessing'
  - question: 'How can you define a route with a default value for a parameter `page` to `1` in PHP attributes?'
    answers:
      - { value: 'public function list(int $page = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", defaults: ["page" => 1])]', correct: true }
      - { value: '#[Route("/blog/{page}", name: "blog_list", default: 1)]', correct: false }
      - { value: '#[Route("/blog/{page}", name: "blog_list", options: ["default_page" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `slug` that must be a string of at least 5 characters in PHP configuration?'
    answers:
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->requirements([''slug'' => ''.{5,}'']);', correct: true }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug<min:5>}'');', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->type(''string'', [''min_length'' => 5]);', correct: false }
      - { value: '$routes->add(''blog_show'', ''/blog/{slug}'')->validate(''min_length'', 5);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'What is the purpose of the `_canonical_route` special internal routing attribute?'
    answers:
      - { value: 'It stores the name of the actual route that was matched, especially useful when route aliases are involved.', correct: true }
      - { value: 'It defines the primary route name for a given URL.', correct: false }
      - { value: 'It is used for generating canonical URLs for SEO.', correct: false }
      - { value: 'It indicates a route that should not be cached.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route that redirects from `/old-blog-post/{slug}` to `/blog/{slug}` with a 302 status code in Symfony?'
    answers:
      - { value: 'You would typically use a RedirectController or a dedicated redirect route type with the `route` option and `permanent: false`.', correct: true }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} redirect: blog_show status: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} forward: blog_show code: 302', correct: false }
      - { value: 'old_blog_post: path: /old-blog-post/{slug} target_route: blog_show type: redirect', correct: false }
    help: |
      'https://symfony.com/doc/current/routing/redirect_routes.html'
  - question: 'When defining a route with PHP attributes, how can you set a default value for a parameter `id` to `1`?'
    answers:
      - { value: 'public function show(int $id = 1): Response { /* ... */ }', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", defaults: ["id" => 1])]', correct: true }
      - { value: '#[Route("/product/{id}", name: "product_show", default: 1)]', correct: false }
      - { value: '#[Route("/product/{id}", name: "product_show", options: ["default_id" => 1])]', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#defining-defaults'
  - question: 'Which of the following is a valid way to define a route with a parameter `id` that must be an integer in YAML?'
    answers:
      - { value: 'path: /product/{id} requirements: id: \d+', correct: true }
      - { value: 'path: /product/{id<int>}', correct: false }
      - { value: 'path: /product/{id} type: int', correct: false }
      - { value: 'path: /product/{id} validate: integer', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#route-requirements'
  - question: 'How can you define a route that matches requests from `www.example.com` for English content and `www.example.kr` for Korean content, when importing routes from a controller directory using YAML?'
    answers:
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute host: en: www.example.com kr: www.example.kr', correct: true }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute domain: en: www.example.com kr: www.example.kr', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute hosts: { en: www.example.com, kr: www.example.kr }', correct: false }
      - { value: 'controllers: resource: ../../src/Controller/ type: attribute locale_host: en: www.example.com kr: www.example.kr', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#domain-name-matching'
  - question: 'Which of the following is the correct way to define a route that only matches PUT HTTP method in PHP configuration?'
    answers:
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->methods([''PUT'']);', correct: true }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->method(''PUT'');', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->setMethods([''PUT'']);', correct: false }
      - { value: '$routes->add(''item_update'', ''/items/{id}'')->allowMethod(''PUT'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#http-method-matching'
  - question: 'What is the purpose of the `_fragment` special internal routing attribute?'
    answers:
      - { value: 'It is used to specify a URL fragment (hash) when generating a URL for a route.', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It is used for internal routing optimization related to ESI.', correct: false }
      - { value: 'It specifies a default template fragment to render.', correct: false }
    help: |
      'https://symfony.com/doc/current/book/routing.html#special-internal-routing-attributes'
  - question: 'How can you define a route alias `product_details` for an existing route `product_show` in YAML, and mark it as deprecated with a custom message?'
    answers:
      - { value: 'product_details: alias: product_show deprecated: package: acme/package version: 1.2 message: ''The "%alias_id%" route alias is deprecated. Please use "product_show" instead.''', correct: true }
      - { value: 'product_details: alias: product_show deprecate: true message: ''Use product_show instead.''', correct: false }