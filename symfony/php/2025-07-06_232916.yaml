category: PHP
questions:
  -
    question: 'Which of the following are valid ways to define a class in PHP?'
    answers:
      - { value: '```php
class MyClass {}
```', correct: true }
      - { value: '```php
interface MyClass {}
```', correct: false }
      - { value: '```php
final class MyClass {}
```', correct: true }
      - { value: '```php
abstract class MyClass {}
```', correct: true }
    help: |
      'Classes are defined using the `class` keyword. They can be `final` (cannot be extended) or `abstract` (cannot be instantiated directly and may contain abstract methods).
      https://www.php.net/manual/en/language.oop5.basic.php'
  -
    question: 'In PHP, what is the primary purpose of the `final` keyword when applied to a class or a method?'
    answers:
      - { value: 'To prevent the class from being instantiated.', correct: false }
      - { value: 'To prevent a class from being inherited.', correct: true }
      - { value: 'To prevent a method from being overridden by child classes.', correct: true }
      - { value: 'To mark a class or method as deprecated.', correct: false }
    help: |
      'The `final` keyword prevents child classes from overriding a method or prevents a class from being inherited.
      https://www.php.net/manual/en/language.oop5.final.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello World!', correct: true }
      - { value: 'Fatal error: Cannot override final method ParentClass::sayHello()', correct: false }
      - { value: 'Parse error: syntax error, unexpected ''final'' (T_FINAL)', correct: false }
      - { value: 'Hello', correct: false }
    help: |
      'The `final` keyword on a method prevents it from being overridden. In this case, the `sayHello` method in `ChildClass` does not override the `final` method in `ParentClass`, it simply calls it.
      https://www.php.net/manual/en/language.oop5.final.php'
    question: '```php
<?php

class ParentClass {
    final public function sayHello() {
        echo "Hello World!";
    }
}

class ChildClass extends ParentClass {
    // This method will not override the final method
    public function anotherMethod() {
        $this->sayHello();
    }
}

$obj = new ChildClass();
$obj->anotherMethod();
?>
```'
  -
    question: 'Which of the following statements about abstract classes in PHP are true?'
    answers:
      - { value: 'An abstract class can be instantiated directly.', correct: false }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'A class extending an abstract class must implement all its abstract methods.', correct: true }
      - { value: 'Abstract methods in an abstract class must not have a body.', correct: true }
    help: |
      'Abstract classes cannot be instantiated and may contain abstract methods (methods without a body). Any non-abstract class extending an abstract class must implement all inherited abstract methods. An abstract class is not required to have abstract methods.
      https://www.php.net/manual/en/language.oop5.abstract.php'
  -
    question: 'What is the correct way to define an abstract method in an abstract class?'
    answers:
      - { value: '```php
abstract public function myMethod();
```', correct: true }
      - { value: '```php
public abstract function myMethod() {}
```', correct: false }
      - { value: '```php
abstract function myMethod();
```', correct: true }
      - { value: '```php
private abstract function myMethod();
```', correct: false }
    help: |
      'Abstract methods are declared with the `abstract` keyword and must not define a body. They can be `public` or `protected`, but not `private`.
      https://www.php.net/manual/en/language.oop5.abstract.php'
  -
    question: 'Which of the following are valid characteristics of PHP interfaces?'
    answers:
      - { value: 'Interfaces can contain properties.', correct: false }
      - { value: 'All methods declared in an interface must be public.', correct: true }
      - { value: 'A class can implement multiple interfaces.', correct: true }
      - { value: 'Interfaces can extend other interfaces.', correct: true }
    help: |
      'Interfaces define a contract for classes. They cannot contain properties, but can contain constants. All methods must be public. A class can implement multiple interfaces, and interfaces can extend other interfaces.
      https://www.php.net/manual/en/language.oop5.interfaces.php'
  -
    question: 'Consider the following PHP code. Which line will cause a fatal error?'
    answers:
      - { value: 'Line 5: `interface MyInterface {`', correct: false }
      - { value: 'Line 8: `public function myMethod();`', correct: false }
      - { value: 'Line 13: `public function myMethod() {`', correct: false }
      - { value: 'Line 14: `private $property;`', correct: true }
    help: |
      'Interfaces cannot contain properties. Declaring a property within an interface will result in a fatal error.
      https://www.php.net/manual/en/language.oop5.interfaces.php'
    question: '```php
<?php

// Line 5
interface MyInterface {
    public const MY_CONSTANT = 123;
    public function myMethod(); // Line 8
    // Line 9
    private $property; // Line 10 - This line will cause an error
}

class MyClass implements MyInterface {
    public function myMethod() { // Line 13
        echo "Method implemented.";
    }
}

?>
```'
  -
    question: 'What is the primary purpose of Traits in PHP?'
    answers:
      - { value: 'To enable multiple inheritance of state and behavior.', correct: true }
      - { value: 'To define a contract that classes must adhere to.', correct: false }
      - { value: 'To provide a mechanism for code reuse in single inheritance languages.', correct: true }
      - { value: 'To create singleton patterns easily.', correct: false }
    help: |
      'Traits are a mechanism for code reuse in single inheritance languages like PHP. They allow a developer to reuse sets of methods freely in several independent classes.
      https://www.php.net/manual/en/language.oop5.traits.php'
  -
    question: 'How can method conflicts be resolved when using multiple traits in a single class?'
    answers:
      - { value: 'By using the `insteadof` operator.', correct: true }
      - { value: 'By using the `as` operator to alias methods.', correct: true }
      - { value: 'By defining the conflicting method directly in the class, which takes precedence.', correct: true }
      - { value: 'PHP automatically resolves conflicts by choosing the method from the first trait listed.', correct: false }
    help: |
      'When multiple traits used in a class define methods with the same name, a fatal error occurs unless the conflict is explicitly resolved using the `insteadof` operator, or by aliasing methods with `as`. A method defined in the class itself will always override a method from a trait.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict'
  -
    question: 'Which of the following statements about PHP namespaces are true?'
    answers:
      - { value: 'Namespaces provide a way to group related classes, interfaces, functions, and constants.', correct: true }
      - { value: 'The `use` keyword is used to import classes, interfaces, or functions from other namespaces.', correct: true }
      - { value: 'Namespace declarations must be the very first statement in a PHP file, excluding the opening `<?php` tag.', correct: true }
      - { value: 'Global functions and classes can be accessed directly without any prefix, even when inside a namespace.', correct: false }
    help: |
      'Namespaces are used to avoid name collisions. The `use` keyword imports elements. Namespace declarations must be the first statement. To access global functions/classes from within a namespace, you must prefix them with `\` (e.g., `\strlen()`).
      https://www.php.net/manual/en/language.namespaces.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello from App\Controller', correct: true }
      - { value: 'Hello from Global', correct: false }
      - { value: 'Fatal error: Class ''MyClass'' not found', correct: false }
      - { value: 'Parse error: syntax error, unexpected ''namespace'' (T_NAMESPACE)', correct: false }
    help: |
      'The `use` statement imports the `MyClass` from the `App\Controller` namespace, making it accessible by its short name.
      https://www.php.net/manual/en/language.namespaces.importing.php'
    question: '```php
<?php

namespace App\Service;

use App\Controller\MyClass;

class MyService {
    public function doSomething() {
        $obj = new MyClass();
        $obj->greet();
    }
}

namespace App\Controller;

class MyClass {
    public function greet() {
        echo "Hello from App\\Controller";
    }
}

$service = new \App\Service\MyService();
$service->doSomething();

?>
```'
  -
    question: 'Which of the following are valid ways to define an anonymous function (closure) in PHP?'
    answers:
      - { value: '```php
$func = function() { return "Hello"; };
```', correct: true }
      - { value: '```php
$func = () => "Hello";
```', correct: true }
      - { value: '```php
function() { return "Hello"; };
```', correct: false }
      - { value: '```php
$func = new Closure(function() { return "Hello"; });
```', correct: false }
    help: |
      'Anonymous functions are defined using the `function` keyword without a name, or as arrow functions (`fn`).
      https://www.php.net/manual/en/functions.anonymous.php'
  -
    question: 'How can variables from the parent scope be passed into an anonymous function in PHP?'
    answers:
      - { value: 'Using the `use` keyword in the closure definition.', correct: true }
      - { value: 'By passing them as arguments to the anonymous function.', correct: false }
      - { value: 'Anonymous functions automatically inherit all variables from the parent scope.', correct: false }
      - { value: 'Using the `global` keyword inside the closure.', correct: false }
    help: |
      'To use variables from the parent scope within an anonymous function, they must be imported using the `use` keyword.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.variables'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello World', correct: true }
      - { value: 'Hello', correct: false }
      - { value: 'Undefined variable: message', correct: false }
      - { value: 'Fatal error: Cannot use $message in closure without use keyword', correct: false }
    help: |
      'The `use` keyword is used to import variables from the parent scope into the closure.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.variables'
    question: '```php
<?php

$message = "World";

$greet = function() use ($message) {
    echo "Hello " . $message;
};

$greet();

?>
```'
  -
    question: 'Which of the following statements about `static` anonymous functions (static closures) in PHP 8.2 are true?'
    answers:
      - { value: 'They cannot access `$this`.', correct: true }
      - { value: 'They are faster than non-static closures.', correct: false }
      - { value: 'They can be created using the `static fn` syntax.', correct: true }
      - { value: 'They automatically bind to the class they are defined in.', correct: false }
    help: |
      'Static closures do not have access to `$this` and are not bound to any object. They can be defined using `static function () {}` or `static fn () => {}`. Their primary benefit is preventing accidental `$this` binding, not performance.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.static'
  -
    question: 'Which of the following are valid ways to handle errors and exceptions in PHP?'
    answers:
      - { value: 'Using `try...catch` blocks for exceptions.', correct: true }
      - { value: 'Using `set_error_handler()` to convert errors into exceptions.', correct: true }
      - { value: 'Using `register_shutdown_function()` to catch fatal errors.', correct: true }
      - { value: 'Using `die()` to gracefully exit the script on any error.', correct: false }
    help: |
      'PHP provides `try...catch` for exceptions. `set_error_handler()` allows custom handling of non-fatal errors. `register_shutdown_function()` can be used to catch fatal errors that occur during script execution. `die()` terminates the script abruptly.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/function.set-error-handler.php
      https://www.php.net/manual/en/function.register-shutdown-function.php'
  -
    question: 'What is the base interface for all throwables in PHP 7 and later?'
    answers:
      - { value: '`Exception`', correct: false }
      - { value: '`Error`', correct: false }
      - { value: '`Throwable`', correct: true }
      - { value: '`RuntimeException`', correct: false }
    help: |
      'In PHP 7, the `Throwable` interface was introduced as the base interface for all objects that can be thrown via the `throw` statement, including `Error` and `Exception`.
      https://www.php.net/manual/en/class.throwable.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Caught an exception: Division by zeroFinally block executed', correct: true }
      - { value: 'Fatal error: Division by zero', correct: false }
      - { value: 'Finally block executedCaught an exception: Division by zero', correct: false }
      - { value: 'No output, script terminates silently.', correct: false }
    help: |
      'The `try` block attempts the division. When a `DivisionByZeroError` occurs, it is caught by the `catch (Throwable $e)` block because `Error` implements `Throwable`. The `finally` block always executes, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php'
    question: '```php
<?php

try {
    $result = 10 / 0;
    echo "This will not be executed.";
} catch (Throwable $e) {
    echo "Caught an exception: " . $e->getMessage();
} finally {
    echo "Finally block executed";
}

?>
```'
  -
    question: 'Which of the following statements about `Error` and `Exception` in PHP 7+ are true?'
    answers:
      - { value: '`Error` represents internal PHP errors, while `Exception` represents programmer-defined errors.', correct: true }
      - { value: 'Both `Error` and `Exception` implement the `Throwable` interface.', correct: true }
      - { value: '`Error` can be caught by a `catch (Exception $e)` block.', correct: false }
      - { value: 'It is generally recommended to catch `Throwable` to handle both `Error` and `Exception` types.', correct: true }
    help: |
      '`Error` classes are used for internal PHP errors (e.g., `TypeError`, `ParseError`), while `Exception` classes are for user-defined exceptions. Both implement `Throwable`. To catch both, you must catch `Throwable`.
      https://www.php.net/manual/en/language.errors.php7.php'
  -
    question: 'Which of the following are valid uses of the Standard PHP Library (SPL)?'
    answers:
      - { value: 'Using `SplStack` for LIFO data structures.', correct: true }
      - { value: 'Using `SplQueue` for FIFO data structures.', correct: true }
      - { value: 'Implementing `IteratorAggregate` to provide an external iterator.', correct: true }
      - { value: 'Using `SplFileObject` for object-oriented file handling.', correct: true }
    help: |
      'SPL provides a collection of interfaces and classes for common data structures (e.g., `SplStack`, `SplQueue`), iterators (`Iterator`, `IteratorAggregate`), and file handling (`SplFileObject`).
      https://www.php.net/manual/en/book.spl.php'
  -
    question: 'Which SPL interface allows an object to be iterated over using `foreach` without implementing `Iterator` directly?'
    answers:
      - { value: '`Countable`', correct: false }
      - { value: '`ArrayAccess`', correct: false }
      - { value: '`IteratorAggregate`', correct: true }
      - { value: '`Serializable`', correct: false }
    help: |
      'The `IteratorAggregate` interface allows objects to provide an external iterator to be used with `foreach`. It requires the `getIterator()` method.
      https://www.php.net/manual/en/class.iteratoraggregate.php'
  -
    question: 'What is the purpose of the `__autoload()` function or `spl_autoload_register()` in PHP?'
    answers:
      - { value: 'To automatically load class files when they are first used.', correct: true }
      - { value: 'To register a function that will be called when a script finishes execution.', correct: false }
      - { value: 'To include all PHP files in a directory at once.', correct: false }
      - { value: 'To define a global error handler.', correct: false }
    help: |
      '`__autoload()` (deprecated) and `spl_autoload_register()` are used for autoloading classes, meaning PHP will automatically include the file containing a class definition when that class is first referenced. `spl_autoload_register()` is the modern and recommended approach.
      https://www.php.net/manual/en/language.oop5.autoload.php'
  -
    question: 'Which of the following are new features or significant changes introduced in PHP 8.2?'
    answers:
      - { value: 'Readonly properties in traits.', correct: true }
      - { value: 'New `true`, `false`, and `null` standalone types.', correct: true }
      - { value: 'Deprecation of dynamic properties.', correct: true }
      - { value: 'Introduction of `match` expression.', correct: false }
    help: |
      'PHP 8.2 introduced readonly properties in traits, new standalone types (`true`, `false`, `null`), and deprecated dynamic properties. The `match` expression was introduced in PHP 8.0.
      https://www.php.net/manual/en/migration82.php'
  -
    question: 'Consider the following PHP 8.2 code. What will be the outcome?'
    answers:
      - { value: 'Fatal error: Cannot declare readonly property MyClass::$name in trait MyTrait as it is already declared in class MyClass', correct: false }
      - { value: 'Fatal error: Cannot use dynamic properties in PHP 8.2', correct: true }
      - { value: 'Hello World', correct: false }
      - { value: 'Deprecated: Creation of dynamic property MyClass::$dynamicProperty is deprecated', correct: true }
    help: |
      'In PHP 8.2, dynamic properties are deprecated. Assigning a property that has not been declared in the class will trigger a deprecation notice, and in PHP 9.0, it will become a fatal error.
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties'
    question: '```php
<?php

class MyClass {
    public function __construct() {
        $this->dynamicProperty = "Hello World";
    }
}

$obj = new MyClass();
echo $obj->dynamicProperty;

?>
```'
  -
    question: 'What is the purpose of the `__call()` magic method in PHP?'
    answers:
      - { value: 'It is invoked when invoking inaccessible methods in an object context.', correct: true }
      - { value: 'It is invoked when calling static inaccessible methods.', correct: false }
      - { value: 'It is invoked when a script is shut down.', correct: false }
      - { value: 'It is invoked when an object is cloned.', correct: false }
    help: |
      'The `__call()` method is triggered when invoking inaccessible or non-existent methods in an object context. For static inaccessible methods, `__callStatic()` is used.
      https://www.php.net/manual/en/language.oop5.overloading.php#object.call'
  -
    question: 'Which magic method is automatically called when an object is converted to a string?'
    answers:
      - { value: '`__toString()`', correct: true }
      - { value: '`__convert()`', correct: false }
      - { value: '`__serialize()`', correct: false }
      - { value: '`__dump()`', correct: false }
    help: |
      'The `__toString()` method allows a class to decide how it will react when it is treated as a string. For example, what `echo $obj;` will print.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring'
  -
    question: 'What is the purpose of the `__get()` and `__set()` magic methods?'
    answers:
      - { value: 'To define getters and setters for all properties in a class.', correct: false }
      - { value: 'To handle reading from inaccessible or non-existent properties.', correct: true }
      - { value: 'To handle writing to inaccessible or non-existent properties.', correct: true }
      - { value: 'To control property visibility.', correct: false }
    help: |
      '`__get()` is used for reading data from inaccessible (protected or private) or non-existent properties. `__set()` is used for writing data to inaccessible or non-existent properties.
      https://www.php.net/manual/en/language.oop5.overloading.php#object.get'
  -
    question: 'Which of the following are valid type declarations in PHP 8.2?'
    answers:
      - { value: '`string`', correct: true }
      - { value: '`array`', correct: true }
      - { value: '`object`', correct: true }
      - { value: '`callable`', correct: true }
      - { value: '`resource`', correct: false }
    help: |
      'PHP supports various type declarations including scalar types (`string`, `int`, `float`, `bool`), compound types (`array`, `object`, `callable`), and class/interface names. `resource` is not a valid type declaration.
      https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'Consider the following PHP 8.2 code. What will be the output?'
    answers:
      - { value: 'Hello World!', correct: true }
      - { value: 'Fatal error: Uncaught TypeError: Argument 1 passed to greet() must be of type string, int given', correct: true }
      - { value: 'Fatal error: Uncaught TypeError: Return value of greet() must be of type string, null returned', correct: false }
      - { value: 'No output, script terminates silently.', correct: false }
    help: |
      'The `greet` function expects a `string` argument. When an `int` is passed, a `TypeError` is thrown.
      https://www.php.net/manual/en/language.types.declarations.php'
    question: '```php
<?php

function greet(string $name): string {
    return "Hello " . $name . "!";
}

echo greet(123);

?>
```'
  -
    question: 'What is the purpose of the `declare(strict_types=1);` directive in PHP?'
    answers:
      - { value: 'To enable strict mode for type declarations in the current file.', correct: true }
      - { value: 'To prevent type juggling and enforce exact type matching.', correct: true }
      - { value: 'It applies globally to all PHP files in the project.', correct: false }
      - { value: 'It must be the very first statement in a file, even before the `<?php` tag.', correct: false }
    help: |
      'The `declare(strict_types=1);` directive enables strict mode for type declarations for the current file. It must be the first statement after the opening `<?php` tag. It enforces exact type matching, preventing PHP from performing implicit type conversions.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict'
  -
    question: 'Which of the following are valid uses of `static` properties and methods in PHP?'
    answers:
      - { value: 'Accessing a `static` property using `$this->propertyName`.', correct: false }
      - { value: 'Calling a `static` method using `self::methodName()`.', correct: true }
      - { value: 'Calling a `static` method using `ClassName::methodName()`.', correct: true }
      - { value: 'Overriding a `static` method in a child class.', correct: true }
    help: |
      'Static properties and methods belong to the class itself, not to an instance. They are accessed using the `self::` or `ClassName::` syntax. While `static` methods can be overridden, it\'s generally not recommended as it can lead to confusion.
      https://www.php.net/manual/en/language.oop5.static.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Parent static valueChild static value', correct: true }
      - { value: 'Child static valueChild static value', correct: false }
      - { value: 'Fatal error: Access to undeclared static property ParentClass::$staticProperty', correct: false }
      - { value: 'Parent static valueParent static value', correct: false }
    help: |
      'When `ChildClass::getStaticProperty()` is called, `self::$staticProperty` refers to `ChildClass::$staticProperty`. When `ParentClass::getStaticProperty()` is called, `self::$staticProperty` refers to `ParentClass::$staticProperty`.
      https://www.php.net/manual/en/language.oop5.static.php'
    question: '```php
<?php

class ParentClass {
    public static $staticProperty = "Parent static value";

    public static function getStaticProperty() {
        echo self::$staticProperty;
    }
}

class ChildClass extends ParentClass {
    public static $staticProperty = "Child static value";
}

ParentClass::getStaticProperty();
ChildClass::getStaticProperty();

?>
```'
  -
    question: 'What is Late Static Bindings in PHP, and how is it achieved?'
    answers:
      - { value: 'It refers to the ability to reference the called class in a static context.', correct: true }
      - { value: 'It is achieved using the `static::` keyword.', correct: true }
      - { value: 'It allows `self::` to refer to the class that was initially called at runtime.', correct: false }
      - { value: 'It is only applicable to non-static methods.', correct: false }
    help: |
      'Late Static Bindings provide a way to reference the called class in a static context. This is achieved using the `static::` keyword, which refers to the class that was initially called at runtime, unlike `self::` which refers to the class where the method was defined.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
  -
    question: 'Consider the following PHP code using Late Static Bindings. What will be the output?'
    answers:
      - { value: 'Parent valueChild value', correct: true }
      - { value: 'Parent valueParent value', correct: false }
      - { value: 'Child valueChild value', correct: false }
      - { value: 'Fatal error: Access to undeclared static property ChildClass::$value', correct: false }
    help: |
      'When `ParentClass::getValue()` is called, `static::$value` refers to `ParentClass::$value`. When `ChildClass::getValue()` is called, `static::$value` refers to `ChildClass::$value` due to Late Static Bindings.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
    question: '```php
<?php

class ParentClass {
    protected static $value = "Parent value";

    public static function getValue() {
        echo static::$value;
    }
}

class ChildClass extends ParentClass {
    protected static $value = "Child value";
}

ParentClass::getValue();
ChildClass::getValue();

?>
```'
  -
    question: 'Which of the following are valid ways to define constants in PHP classes and interfaces?'
    answers:
      - { value: '```php
class MyClass {
    const MY_CONSTANT = 123;
}
```', correct: true }
      - { value: '```php
interface MyInterface {
    public const MY_CONSTANT = "abc";
}
```', correct: true }
      - { value: '```php
class MyClass {
    public static $MY_CONSTANT = 456;
}
```', correct: false }
      - { value: '```php
define("MY_CONSTANT", 789);
```', correct: false }
    help: |
      'Class constants are defined using the `const` keyword within a class or interface. `define()` creates global constants, not class constants. Static properties (`static $MY_CONSTANT`) are variables, not constants.
      https://www.php.net/manual/en/language.oop5.constants.php'
  -
    question: 'How are class constants accessed in PHP?'
    answers:
      - { value: 'Using the `self::` keyword followed by the constant name.', correct: true }
      - { value: 'Using the class name followed by the scope resolution operator (`::`) and the constant name.', correct: true }
      - { value: 'Using `$this->CONSTANT_NAME`.', correct: false }
      - { value: 'Using `ClassName->CONSTANT_NAME`.', correct: false }
    help: |
      'Class constants are accessed using the `self::CONSTANT_NAME` or `ClassName::CONSTANT_NAME` syntax. They are not accessed via object instances.
      https://www.php.net/manual/en/language.oop5.constants.php'
  -
    question: 'What is the purpose of the `instanceof` operator in PHP?'
    answers:
      - { value: 'To check if an object is an instance of a particular class.', correct: true }
      - { value: 'To check if an object implements a specific interface.', correct: true }
      - { value: 'To check if an object is a child of a particular class.', correct: true }
      - { value: 'To compare the values of two objects.', correct: false }
    help: |
      'The `instanceof` operator is used to determine if an object is an instance of a particular class, a subclass of that class, or implements a specific interface.
      https://www.php.net/manual/en/language.operators.type.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Object is MyClassObject is MyInterfaceObject is ParentClass', correct: true }
      - { value: 'Object is MyClass', correct: false }
      - { value: 'Fatal error: Class ''MyClass'' not found', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      'The `instanceof` operator correctly identifies that `$obj` is an instance of `MyClass`, implements `MyInterface`, and extends `ParentClass`.
      https://www.php.net/manual/en/language.operators.type.php'
    question: '```php
<?php

interface MyInterface {}

class ParentClass {}

class MyClass extends ParentClass implements MyInterface {}

$obj = new MyClass();

if ($obj instanceof MyClass) {
    echo "Object is MyClass";
}

if ($obj instanceof MyInterface) {
    echo "Object is MyInterface";
}

if ($obj instanceof ParentClass) {
    echo "Object is ParentClass";
}

?>
```'
  -
    question: 'Which of the following are valid ways to define a constructor in a PHP class?'
    answers:
      - { value: '```php
public function __construct() {}
```', correct: true }
      - { value: '```php
function MyClass() {} // For class MyClass
```', correct: false }
      - { value: '```php
public function __init() {}
```', correct: false }
      - { value: '```php
public function __construct(public string $name) {}
```', correct: true }
    help: |
      'The modern way to define a constructor is using `__construct()`. PHP 8 introduced constructor property promotion, allowing properties to be declared directly in the constructor signature. The old PHP 4 style constructor (method with the same name as the class) is deprecated and will be removed.
      https://www.php.net/manual/en/language.oop5.decon.php'
  -
    question: 'What is the purpose of the `__destruct()` magic method?'
    answers:
      - { value: 'It is called when an object is destroyed or the script ends.', correct: true }
      - { value: 'It is used to clean up resources held by the object.', correct: true }
      - { value: 'It is called before the constructor.', correct: false }
      - { value: 'It is only called when an exception occurs.', correct: false }
    help: |
      'The destructor method `__destruct()` is called as soon as there are no other references to a particular object, or in any shutdown sequence. It is often used for cleanup tasks.
      https://www.php.net/manual/en/language.oop5.decon.php'
  -
    question: 'Which of the following are considered "magic methods" in PHP?'
    answers:
      - { value: '`__construct()`', correct: true }
      - { value: '`__toString()`', correct: true }
      - { value: '`__clone()`', correct: true }
      - { value: '`__serialize()` (PHP 8.1+)', correct: true }
      - { value: '`__init()`', correct: false }
    help: |
      'Magic methods are special methods that start with `__` (double underscore) and have specific behaviors. Common ones include `__construct()`, `__destruct()`, `__call()`, `__callStatic()`, `__get()`, `__set()`, `__isset()`, `__unset()`, `__sleep()`, `__wakeup()`, `__toString()`, `__invoke()`, `__set_state()`, `__clone()`, `__debugInfo()`, `__serialize()`, and `__unserialize()`.
      https://www.php.net/manual/en/language.oop5.magic.php'
  -
    question: 'What is the purpose of the `__invoke()` magic method?'
    answers:
      - { value: 'It is called when an object is used as a function.', correct: true }
      - { value: 'It is called when an object is converted to a string.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is created.', correct: false }
    help: |
      'The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello World', correct: true }
      - { value: 'Fatal error: Call to undefined method MyCallableClass::call()', correct: false }
      - { value: 'Object of class MyCallableClass could not be converted to string', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      'When an object with an `__invoke()` method is treated as a function, the `__invoke()` method is executed.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke'
    question: '```php
<?php

class MyCallableClass {
    public function __invoke($name) {
        echo "Hello " . $name;
    }
}

$obj = new MyCallableClass();
$obj("World");

?>
```'
  -
    question: 'Which of the following are true about PHP extensions?'
    answers:
      - { value: 'They are typically written in C and compiled into PHP.', correct: true }
      - { value: 'They provide additional functionality not available in core PHP.', correct: true }
      - { value: 'They are always enabled by default in a standard PHP installation.', correct: false }
      - { value: 'They can be enabled or disabled via the `php.ini` configuration file.', correct: true }
    help: |
      'PHP extensions are compiled modules that extend PHP\'s functionality. They are usually written in C and can be enabled/disabled in `php.ini`. Not all extensions are enabled by default.
      https://www.php.net/manual/en/install.php'
  -
    question: 'How can you check which PHP extensions are currently loaded?'
    answers:
      - { value: 'By running `php -m` from the command line.', correct: true }
      - { value: 'By calling `phpinfo()` and inspecting the output.', correct: true }
      - { value: 'By checking the `extension` directory in the PHP installation path.', correct: false }
      - { value: 'By looking at the `composer.json` file.', correct: false }
    help: |
      'The `php -m` command lists loaded modules. `phpinfo()` provides comprehensive information about the PHP configuration, including loaded extensions.
      https://www.php.net/manual/en/function.phpinfo.php'
  -
    question: 'What is the purpose of the `ReflectionClass` class in PHP SPL?'
    answers:
      - { value: 'To get information about a class, such as its methods, properties, and constants.', correct: true }
      - { value: 'To create new instances of a class dynamically.', correct: true }
      - { value: 'To modify the structure of a class at runtime.', correct: false }
      - { value: 'To inspect the call stack of a function.', correct: false }
    help: |
      'The Reflection API, including `ReflectionClass`, allows introspection of classes, interfaces, functions, methods, and extensions. It can be used to retrieve information about them and even create new instances.
      https://www.php.net/manual/en/book.reflection.php'
  -
    question: 'Which of the following are valid ways to create an object in PHP?'
    answers:
      - { value: '`$obj = new MyClass();`', correct: true }
      - { value: '`$obj = MyClass::create();` (if a static factory method exists)', correct: true }
      - { value: '`$obj = clone $anotherObject;`', correct: true }
      - { value: '`$obj = MyClass;`', correct: false }
    help: |
      'Objects are typically created using the `new` keyword. They can also be created via static factory methods or by cloning existing objects.
      https://www.php.net/manual/en/language.oop5.basic.php'
  -
    question: 'What is the difference between `public`, `protected`, and `private` visibility in PHP classes?'
    answers:
      - { value: '`public` members can be accessed from anywhere.', correct: true }
      - { value: '`protected` members can be accessed only from within the class itself.', correct: false }
      - { value: '`private` members can be accessed only from within the class itself.', correct: true }
      - { value: '`protected` members can be accessed from within the class and by its child classes.', correct: true }
    help: |
      '`public` members are accessible from anywhere. `protected` members are accessible from within the class itself and by its descendants. `private` members are accessible only from within the class that defines them.
      https://www.php.net/manual/en/language.oop5.visibility.php'
  -
    question: 'Consider the following PHP code. Which line will cause a fatal error?'
    answers:
      - { value: 'Line 5: `private $privateProperty = "Private";`', correct: false }
      - { value: 'Line 8: `echo $this->publicProperty;`', correct: false }
      - { value: 'Line 9: `echo $this->protectedProperty;`', correct: false }
      - { value: 'Line 10: `echo $this->privateProperty;`', correct: true }
    help: |
      'Private properties are only accessible from within the class where they are defined. Attempting to access `$privateProperty` from `ChildClass` (even though it inherits from `ParentClass`) will result in a fatal error.
      https://www.php.net/manual/en/language.oop5.visibility.php'
    question: '```php
<?php

class ParentClass {
    public $publicProperty = "Public";
    protected $protectedProperty = "Protected";
    private $privateProperty = "Private"; // Line 5
}

class ChildClass extends ParentClass {
    public function showProperties() {
        echo $this->publicProperty; // Line 8
        echo $this->protectedProperty; // Line 9
        echo $this->privateProperty; // Line 10 - Fatal Error
    }
}

$obj = new ChildClass();
$obj->showProperties();

?>
```'
  -
    question: 'What is polymorphism in Object-Oriented Programming (OOP) in PHP?'
    answers:
      - { value: 'The ability of an object to take on many forms.', correct: true }
      - { value: 'The ability to use a single interface to represent different underlying forms (data types).', correct: true }
      - { value: 'The ability of a child class to override methods of its parent class.', correct: true }
      - { value: 'The concept of bundling data and methods that work on that data within one unit.', correct: false }
    help: |
      'Polymorphism means "many forms". In OOP, it refers to the ability of objects of different classes to be treated as objects of a common type (e.g., an interface or parent class), and for methods with the same name to behave differently based on the actual object type. Method overriding is a form of polymorphism.
      https://www.php.net/manual/en/language.oop5.polymorphism.php'
  -
    question: 'Which of the following PHP features support polymorphism?'
    answers:
      - { value: 'Interfaces', correct: true }
      - { value: 'Abstract classes', correct: true }
      - { value: 'Method overriding', correct: true }
      - { value: 'Traits', correct: false }
    help: |
      'Interfaces and abstract classes define contracts that allow different classes to be treated uniformly. Method overriding allows child classes to provide their own implementation of a parent method, demonstrating polymorphism. Traits are for code reuse, not directly for polymorphism.
      https://www.php.net/manual/en/language.oop5.polymorphism.php'
  -
    question: 'What is encapsulation in OOP, and how is it achieved in PHP?'
    answers:
      - { value: 'Bundling data and methods that operate on the data within a single unit (class).', correct: true }
      - { value: 'Restricting direct access to some of an object''s components.', correct: true }
      - { value: 'Using `private` and `protected` visibility modifiers.', correct: true }
      - { value: 'Inheriting properties and methods from a parent class.', correct: false }
    help: |
      'Encapsulation is the bundling of data (properties) and methods that operate on the data into a single unit (class), and restricting direct access to some of the object\'s components. This is achieved using visibility modifiers (`private`, `protected`).
      https://www.php.net/manual/en/language.oop5.visibility.php'
  -
    question: 'Which of the following are valid ways to define and use constants in PHP globally (outside of classes)?'
    answers:
      - { value: '`define("MY_GLOBAL_CONSTANT", "value");`', correct: true }
      - { value: '`const MY_GLOBAL_CONSTANT = "value";`', correct: true }
      - { value: '`$MY_GLOBAL_CONSTANT = "value";`', correct: false }
      - { value: '`define MY_GLOBAL_CONSTANT = "value";`', correct: false }
    help: |
      'Global constants can be defined using `define()` or the `const` keyword. The `const` keyword can only be used at the top-level scope.
      https://www.php.net/manual/en/language.constants.php'
  -
    question: 'What is the purpose of the `__serialize()` and `__unserialize()` magic methods introduced in PHP 8.1?'
    answers:
      - { value: 'To provide custom serialization/unserialization logic for objects.', correct: true }
      - { value: 'To replace the deprecated `__sleep()` and `__wakeup()` methods.', correct: true }
      - { value: 'To convert an object to a string representation.', correct: false }
      - { value: 'To handle object cloning.', correct: false }
    help: |
      'The `__serialize()` and `__unserialize()` methods were introduced in PHP 8.1 as a more robust and flexible alternative to `__sleep()` and `__wakeup()` for custom object serialization.
      https://www.php.net/manual/en/language.oop5.serialization.php#object.serialize'
  -
    question: 'Which of the following are valid ways to declare a property as `readonly` in PHP 8.1+?'
    answers:
      - { value: '```php
class MyClass {
    public readonly string $name;
}
```', correct: true }
      - { value: '```php
class MyClass {
    private readonly int $id;
}
```', correct: true }
      - { value: '```php
class MyClass {
    readonly public string $name; // Order doesn''t matter
}
```', correct: true }
      - { value: '```php
class MyClass {
    const readonly MY_CONSTANT = 123;
}
```', correct: false }
    help: |
      'The `readonly` keyword can be applied to typed properties (public, protected, or private) to make them immutable after initialization. It cannot be applied to constants.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'Consider the following PHP 8.1+ code. What will be the outcome?'
    answers:
      - { value: 'Fatal error: Readonly property MyClass::$name cannot be modified outside of its declaring class constructor.', correct: true }
      - { value: 'Fatal error: Readonly property MyClass::$name cannot be modified.', correct: false }
      - { value: 'John', correct: false }
      - { value: 'No error, output: John', correct: false }
    help: |
      'Readonly properties can only be initialized once, either during declaration or in the constructor of the declaring class. Any subsequent attempt to modify them will result in a `Fatal error`.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
    question: '```php
<?php

class MyClass {
    public readonly string $name;

    public function __construct(string $name) {
        $this->name = $name;
    }
}

$obj = new MyClass("John");
$obj->name = "Jane"; // Attempt to modify readonly property

?>
```'
  -
    question: 'What is the purpose of the `match` expression introduced in PHP 8.0?'
    answers:
      - { value: 'It is a control structure similar to `switch` but with stricter comparisons and return values.', correct: true }
      - { value: 'It uses strict comparison (`===`) by default.', correct: true }
      - { value: 'It can return a value.', correct: true }
      - { value: 'It allows fall-through behavior like `switch` statements.', correct: false }
    help: |
      'The `match` expression is similar to `switch` but provides stricter comparisons (`===`), can return a value, and does not have fall-through behavior.
      https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'Consider the following PHP 8.0+ code. What will be the output?'
    answers:
      - { value: 'One', correct: true }
      - { value: 'Two', correct: false }
      - { value: 'Something else', correct: false }
      - { value: 'Fatal error: Uncaught MatchError', correct: false }
    help: |
      'The `match` expression uses strict comparison. `1` (integer) strictly matches `1` (integer), so "One" is returned.
      https://www.php.net/manual/en/control-structures.match.php'
    question: '```php
<?php

$value = 1;

$result = match ($value) {
    0 => "Zero",
    1 => "One",
    "1" => "String One",
    default => "Something else",
};

echo $result;

?>
```'
  -
    question: 'What is the purpose of the `nullsafe operator` (`?->`) introduced in PHP 8.0?'
    answers:
      - { value: 'To prevent errors when attempting to access properties or methods on a `null` object.', correct: true }
      - { value: 'To return `null` if the left-hand side of the expression is `null`.', correct: true }
      - { value: 'To chain method calls without explicit `null` checks.', correct: true }
      - { value: 'To assign a default value if a variable is `null`.', correct: false }
    help: |
      'The nullsafe operator `?->` allows chaining method calls and property access where the intermediate value might be `null`. If the value before `?->` is `null`, the entire expression evaluates to `null` and no error is thrown.
      https://www.php.net/manual/en/language.operators.nullsafe.php'
  -
    question: 'Consider the following PHP 8.0+ code. What will be the output?'
    answers:
      - { value: 'Hello', correct: true }
      - { value: 'Fatal error: Call to a member function getName() on null', correct: false }
      - { value: 'Fatal error: Uncaught Error: Call to a member function getName() on null', correct: false }
      - { value: 'No output, script terminates silently.', correct: false }
    help: |
      'When `$user` is `null`, `$user?->getProfile()?->getName()` evaluates to `null` due to the nullsafe operator, and no error is thrown. `var_dump(null)` outputs `NULL`.
      https://www.php.net/manual/en/language.operators.nullsafe.php'
    question: '```php
<?php

class User {
    public function getProfile(): ?Profile {
        return new Profile();
    }
}

class Profile {
    public function getName(): string {
        return "Hello";
    }
}

$user = new User();
echo $user?->getProfile()?->getName();

$user = null;
var_dump($user?->getProfile()?->getName());

?>
```'
  -
    question: 'Which of the following are valid uses of the `fn` (arrow function) syntax introduced in PHP 7.4?'
    answers:
      - { value: '```php
$add = fn($a, $b) => $a + $b;
```', correct: true }
      - { value: '```php
$multiply = fn($a, $b) { return $a * $b; };
```', correct: false }
      - { value: 'They automatically capture variables from the parent scope by value.', correct: true }
      - { value: 'They can contain multiple expressions.', correct: false }
    help: |
      'Arrow functions (`fn`) provide a concise syntax for anonymous functions. They are limited to a single expression that is implicitly returned. They automatically capture variables from the parent scope by value.
      https://www.php.net/manual/en/functions.arrow.php'
  -
    question: 'Consider the following PHP 7.4+ code. What will be the output?'
    answers:
      - { value: 'Result: 15', correct: true }
      - { value: 'Result: 10', correct: false }
      - { value: 'Undefined variable: factor', correct: false }
      - { value: 'Fatal error: Cannot use $factor in arrow function without use keyword', correct: false }
    help: |
      'Arrow functions automatically capture variables from the parent scope by value, so `$factor` is accessible inside the arrow function.
      https://www.php.net/manual/en/functions.arrow.php'
    question: '```php
<?php

$factor = 5;

$numbers = [1, 2, 3];

$multipliedNumbers = array_map(fn($n) => $n * $factor, $numbers);

echo "Result: " . array_sum($multipliedNumbers);

?>
```'
  -
    question: 'What is the purpose of the `yield` keyword in PHP?'
    answers:
      - { value: 'To create generator functions.', correct: true }
      - { value: 'To return a value from a function without terminating its execution.', correct: true }
      - { value: 'To pause function execution and return a value, resuming from where it left off on the next iteration.', correct: true }
      - { value: 'To define an anonymous function.', correct: false }
    help: |
      'The `yield` keyword is used to create generator functions. Generators are simple iterators that can be written much like a normal function, but instead of returning a final value, they `yield` a value as needed, pausing execution and resuming on the next iteration.
      https://www.php.net/manual/en/language.generators.php'
  -
    question: 'Consider the following PHP code using a generator. What will be the output?'
    answers:
      - { value: '01234', correct: true }
      - { value: '012345', correct: false }
      - { value: 'Fatal error: Cannot redeclare generatorFunction()', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      'The `generatorFunction` yields values from 0 to 4. The `foreach` loop iterates over these yielded values.
      https://www.php.net/manual/en/language.generators.php'
    question: '```php
<?php

function generatorFunction() {
    for ($i = 0; $i < 5; $i++) {
        yield $i;
    }
}

foreach (generatorFunction() as $number) {
    echo $number;
}

?>
```'
  -
    question: 'Which of the following are valid ways to define typed properties in PHP 7.4+?'
    answers:
      - { value: '```php
class MyClass {
    public string $name;
}
```', correct: true }
      - { value: '```php
class MyClass {
    protected ?int $age;
}
```', correct: true }
      - { value: '```php
class MyClass {
    private array $items = [];
}
```', correct: true }
      - { value: '```php
class MyClass {
    public $data: mixed;
}
```', correct: false }
    help: |
      'PHP 7.4 introduced typed properties, allowing type declarations for class properties. They can be nullable using the `?` prefix. `mixed` is a valid type, but the syntax `data: mixed` is incorrect.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.typed'
  -
    question: 'What is the purpose of the `declare(ticks=N);` directive in PHP?'
    answers:
      - { value: 'To execute a low-level operation every `N` statements.', correct: true }
      - { value: 'To enable strict type checking for `N` lines of code.', correct: false }
      - { value: 'To set the maximum execution time of the script to `N` seconds.', correct: false }
      - { value: 'To define a custom error handler for `N` types of errors.', correct: false }
    help: |
      'A tick is an event that occurs for every `N` low-level statements executed by the parser within the `declare` block. It is typically used for debugging, profiling, or handling shutdown tasks.
      https://www.php.net/manual/en/control-structures.declare.php#control-structures.declare.ticks'
  -
    question: 'Which of the following are valid ways to define a constant in PHP using the `const` keyword?'
    answers:
      - { value: '`const MY_CONSTANT = 123;`', correct: true }
      - { value: '`class MyClass { const CLASS_CONSTANT = "abc"; }`', correct: true }
      - { value: '`function myFunc() { const FUNC_CONSTANT = 456; }`', correct: false }
      - { value: '`const MY_ARRAY = [1, 2, 3];`', correct: true }
    help: |
      'The `const` keyword can be used to define global constants and class constants. It cannot be used inside functions. As of PHP 5.6, scalar expressions are allowed in `const` declarations. As of PHP 7, array constants are allowed.
      https://www.php.net/manual/en/language.constants.php'
  -
    question: 'What is the purpose of the `__debugInfo()` magic method?'
    answers:
      - { value: 'To customize the output of `var_dump()` when an object is dumped.', correct: true }
      - { value: 'To provide debugging information for a class.', correct: true }
      - { value: 'To log errors to a file.', correct: false }
      - { value: 'To define a custom error handler.', correct: false }
    help: |
      'The `__debugInfo()` method is called when `var_dump()` is used on an object. It allows you to customize what information is displayed about the object during debugging.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo'
  -
    question: 'Which of the following are valid uses of the `yield from` expression in PHP generators?'
    answers:
      - { value: 'To delegate to another generator or traversable object.', correct: true }
      - { value: 'To return a value from a generator and terminate its execution.', correct: false }
      - { value: 'To combine the output of multiple generators seamlessly.', correct: true }
      - { value: 'To pass values into a generator from the outside.', correct: false }
    help: |
      'The `yield from` expression allows a generator to delegate to another generator or to any traversable object. It effectively flattens the iteration, yielding all values from the delegated generator.
      https://www.php.net/manual/en/language.generators.php#language.generators.delegating'
  -
    question: 'Consider the following PHP code using `yield from`. What will be the output?'
    answers:
      - { value: '123456', correct: true }
      - { value: '12345', correct: false }
      - { value: '123', correct: false }
      - { value: 'Fatal error: Cannot use yield from with an array', correct: false }
    help: |
      'The `yield from` expression iterates over the array and yields each element, effectively combining the output of the two `yield` statements.
      https://www.php.net/manual/en/language.generators.php#language.generators.delegating'
    question: '```php
<?php

function numbersGenerator() {
    yield 1;
    yield from [2, 3, 4];
    yield 5;
}

foreach (numbersGenerator() as $number) {
    echo $number;
}

?>
```'
  -
    question: 'What is the purpose of the `WeakReference` class introduced in PHP 7.4?'
    answers:
      - { value: 'To hold a reference to an object without preventing its garbage collection.', correct: true }
      - { value: 'To create a strong reference that prevents an object from being destroyed.', correct: false }
      - { value: 'To serialize objects more efficiently.', correct: false }
      - { value: 'To manage memory allocation for objects.', correct: false }
    help: |
      'A `WeakReference` allows you to keep a reference to an object, but it does not prevent the object from being garbage collected. If the object is garbage collected, the weak reference becomes invalid.
      https://www.php.net/manual/en/class.weakreference.php'
  -
    question: 'Consider the following PHP 7.4+ code. What will be the output?'
    answers:
      - { value: 'Object exists.NULL', correct: true }
      - { value: 'Object exists.Object exists.', correct: false }
      - { value: 'Fatal error: Call to a member function get() on null', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      'Initially, the object exists, so `get()` returns the object. After `unset($obj)`, the original object is garbage collected because there are no more strong references. The `WeakReference` then returns `null`.
      https://www.php.net/manual/en/class.weakreference.php'
    question: '```php
<?php

$obj = new stdClass();
$obj->name = "Test";

$weakRef = WeakReference::create($obj);

if ($weakRef->get()) {
    echo "Object exists.";
}

unset($obj); // Remove the strong reference

var_dump($weakRef->get()); // Check the weak reference

?>
```'
  -
    question: 'Which of the following are valid ways to define a function in PHP?'
    answers:
      - { value: '```php
function myFunction() {}
```', correct: true }
      - { value: '```php
$myFunction = function() {};
```', correct: true }
      - { value: '```php
fn() => null;
```', correct: true }
      - { value: '```php
def myFunction():
    pass
```', correct: false }
    help: |
      'Functions can be defined using the `function` keyword, as anonymous functions (closures), or as arrow functions (`fn`).
      https://www.php.net/manual/en/language.functions.php'
  -
    question: 'What is the purpose of the `declare(encoding="UTF-8");` directive in PHP?'
    answers:
      - { value: 'To specify the character encoding of the current script.', correct: true }
      - { value: 'To convert all string literals in the script to UTF-8.', correct: false }
      - { value: 'To set the default character encoding for all output.', correct: false }
      - { value: 'To ensure that all input is treated as UTF-8.', correct: false }
    help: |
      'The `declare(encoding="...");` directive specifies the encoding of the script itself. This is useful when the script contains non-ASCII characters and the file encoding is not explicitly set or differs from the default.
      https://www.php.net/manual/en/control-structures.declare.php#control-structures.declare.encoding'
  -
    question: 'Which of the following are valid ways to include or require files in PHP?'
    answers:
      - { value: '`include 'file.php';`', correct: true }
      - { value: '`require 'file.php';`', correct: true }
      - { value: '`include_once 'file.php';`', correct: true }
      - { value: '`import 'file.php';`', correct: false }
    help: |
      '`include` and `require` are used to include files. `_once` variants ensure the file is included only once. `require` throws a fatal error if the file is not found, while `include` only issues a warning. `import` is not a PHP keyword for file inclusion.
      https://www.php.net/manual/en/function.include.php'
  -
    question: 'What is the difference between `include` and `require` in PHP?'
    answers:
      - { value: '`require` produces a fatal error if the file is not found, while `include` produces a warning.', correct: true }
      - { value: '`include` is used for optional files, `require` for essential files.', correct: true }
      - { value: '`require` is faster than `include`.', correct: false }
      - { value: '`include` can be used inside functions, `require` cannot.', correct: false }
    help: |
      'The main difference lies in error handling: `require` stops script execution on failure, `include` only issues a warning and continues. Both can be used inside functions.
      https://www.php.net/manual/en/function.include.php'
  -
    question: 'Which of the following are superglobal variables in PHP?'
    answers:
      - { value: '`$_GET`', correct: true }
      - { value: '`$_POST`', correct: true }
      - { value: '`$_SESSION`', correct: true }
      - { value: '`$_REQUEST`', correct: true }
      - { value: '`$_VAR`', correct: false }
    help: |
      'Superglobals are built-in variables that are always available in all scopes. Examples include `$_GET`, `$_POST`, `$_REQUEST`, `$_SERVER`, `$_FILES`, `$_ENV`, `$_COOKIE`, `$_SESSION`.
      https://www.php.net/manual/en/language.variables.superglobals.php'
  -
    question: 'What is the purpose of the `array_map()` function?'
    answers:
      - { value: 'To apply a callback function to each element of an array.', correct: true }
      - { value: 'To filter elements of an array based on a callback function.', correct: false }
      - { value: 'To reduce an array to a single value using a callback function.', correct: false }
      - { value: 'To sort an array using a user-defined comparison function.', correct: false }
    help: |
      'The `array_map()` function applies the callback to the elements of the given arrays.
      https://www.php.net/manual/en/function.array-map.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: '246', correct: true }
      - { value: '123', correct: false }
      - { value: 'Fatal error: Uncaught TypeError', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      'The `array_map()` function applies the anonymous function to each element of the `$numbers` array, doubling each value.
      https://www.php.net/manual/en/function.array-map.php'
    question: '```php
<?php

$numbers = [1, 2, 3];

$doubledNumbers = array_map(function($n) {
    return $n * 2;
}, $numbers);

foreach ($doubledNumbers as $num) {
    echo $num;
}

?>
```'
  -
    question: 'What is the purpose of the `array_filter()` function?'
    answers:
      - { value: 'To filter elements of an array using a callback function.', correct: true }
      - { value: 'To apply a callback function to each element of an array.', correct: false }
      - { value: 'To reduce an array to a single value using a callback function.', correct: false }
      - { value: 'To remove duplicate values from an array.', correct: false }
    help: |
      'The `array_filter()` function iterates over each value in the `array`, passing them to the `callback` function. If the callback function returns `true`, the current value from `array` is returned into the result array. Array keys are preserved.
      https://www.php.net/manual/en/function.array-filter.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: '24', correct: true }
      - { value: '135', correct: false }
      - { value: 'No output.', correct: false }
      - { value: 'Fatal error: Uncaught TypeError', correct: false }
    help: |
      'The `array_filter()` function keeps only the even numbers from the array.
      https://www.php.net/manual/en/function.array-filter.php'
    question: '```php
<?php

$numbers = [1, 2, 3, 4, 5];

$evenNumbers = array_filter($numbers, function($n) {
    return $n % 2 === 0;
});

foreach ($evenNumbers as $num) {
    echo $num;
}

?>
```'
  -
    question: 'What is the purpose of the `array_reduce()` function?'
    answers:
      - { value: 'To iteratively reduce the array to a single value using a callback function.', correct: true }
      - { value: 'To apply a callback function to each element of an array.', correct: false }
      - { value: 'To filter elements of an array based on a callback function.', correct: false }
      - { value: 'To merge multiple arrays into one.', correct: false }
    help: |
      'The `array_reduce()` function applies a callback function to each element in the array, in turn, to reduce the array to a single value.
      https://www.php.net/manual/en/function.array-reduce.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Sum: 15', correct: true }
      - { value: 'Sum: 0', correct: false }
      - { value: 'Sum: 10', correct: false }
      - { value: 'Fatal error: Uncaught TypeError', correct: false }
    help: |
      'The `array_reduce()` function sums all elements in the array, starting with an initial value of 0.
      https://www.php.net/manual/en/function.array-reduce.php'
    question: '```php
<?php

$numbers = [1, 2, 3, 4, 5];

$sum = array_reduce($numbers, function($carry, $item) {
    return $carry + $item;
}, 0);

echo "Sum: " . $sum;

?>
```'
  -
    question: 'What is the purpose of the `isset()` function?'
    answers:
      - { value: 'To determine if a variable is declared and is not `null`.', correct: true }
      - { value: 'To check if a variable is empty.', correct: false }
      - { value: 'To check if a variable has a boolean `true` value.', correct: false }
      - { value: 'To check if a variable is an integer.', correct: false }
    help: |
      'The `isset()` function checks if a variable is set, meaning it is declared and is not `null`.
      https://www.php.net/manual/en/function.isset.php'
  -
    question: 'What is the purpose of the `empty()` function?'
    answers:
      - { value: 'To determine if a variable is considered empty.', correct: true }
      - { value: 'To check if a variable is `null`.', correct: false }
      - { value: 'To check if a variable is declared.', correct: false }
      - { value: 'To check if a variable has a value of 0.', correct: false }
    help: |
      'The `empty()` function checks if a variable is empty. A variable is considered empty if it does not exist or if its value equals `false`. The following values are considered empty: `""` (empty string), `0` (integer zero), `0.0` (float zero), `"0"` (string zero), `null`, `false`, `array()` (empty array), and `[]` (empty array).
      https://www.php.net/manual/en/function.empty.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Var is set and not empty.Var is empty.', correct: true }
      - { value: 'Var is set and not empty.Var is set and not empty.', correct: false }
      - { value: 'Var is empty.Var is empty.', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      '`isset($var)` returns `true` for `"Hello"`. `empty($var)` returns `false` for `"Hello"`. For `null`, `isset($var)` returns `false` and `empty($var)` returns `true`.
      https://www.php.net/manual/en/function.isset.php
      https://www.php.net/manual/en/function.empty.php'
    question: '```php
<?php

$var = "Hello";
if (isset($var) && !empty($var)) {
    echo "Var is set and not empty.";
}

$var = null;
if (empty($var)) {
    echo "Var is empty.";
}

?>
```'
  -
    question: 'What is the purpose of the `null coalescing operator` (`??`) introduced in PHP 7?'
    answers:
      - { value: 'To return the first operand if it exists and is not `null`, otherwise return the second operand.', correct: true }
      - { value: 'To check if a variable is `null` and assign a default value if it is.', correct: true }
      - { value: 'To perform a strict comparison between two variables.', correct: false }
      - { value: 'To concatenate two strings, handling `null` values gracefully.', correct: false }
    help: |
      'The null coalescing operator `??` returns its first operand if it exists and is not `null`; otherwise it returns its second operand. It is a shorthand for `isset()`.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce'
  -
    question: 'Consider the following PHP 7+ code. What will be the output?'
    answers:
      - { value: 'Default ValueExisting Value', correct: true }
      - { value: 'Existing ValueDefault Value', correct: false }
      - { value: 'Default ValueDefault Value', correct: false }
      - { value: 'Fatal error: Undefined variable: value', correct: false }
    help: |
      'In the first case, `$value` is not set, so `??` returns "Default Value". In the second case, `$value` is set and not `null`, so `??` returns "Existing Value".
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce'
    question: '```php
<?php

echo $value ?? "Default Value";

$value = "Existing Value";
echo $value ?? "Another Default";

?>
```'
  -
    question: 'What is the purpose of the `spaceship operator` (`<=>`) introduced in PHP 7?'
    answers:
      - { value: 'To perform a three-way comparison.', correct: true }
      - { value: 'To return -1 if the left operand is less than the right, 0 if they are equal, and 1 if the left is greater.', correct: true }
      - { value: 'To compare two arrays element by element.', correct: false }
      - { value: 'To check for strict equality between two values.', correct: false }
    help: |
      'The spaceship operator `(a <=> b)` returns an integer less than, equal to, or greater than zero when `a` is respectively less than, equal to, or greater than `b`. It is useful for sorting functions.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.spaceship'
  -
    question: 'Consider the following PHP 7+ code. What will be the output?'
    answers:
      - { value: '-101', correct: true }
      - { value: '000', correct: false }
      - { value: '10-1', correct: false }
      - { value: 'Fatal error: Cannot use spaceship operator with strings', correct: false }
    help: |
      'The spaceship operator correctly performs a three-way comparison, returning -1, 0, or 1.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.spaceship'
    question: '```php
<?php

echo 5 <=> 10;
echo 10 <=> 10;
echo 15 <=> 10;

?>
```'
  -
    question: 'Which of the following are valid ways to define an array in PHP?'
    answers:
      - { value: '`$arr = array(1, 2, 3);`', correct: true }
      - { value: '`$arr = [1, 2, 3];`', correct: true }
      - { value: '`$arr = new Array(1, 2, 3);`', correct: false }
      - { value: '`$arr = {};`', correct: false }
    help: |
      'Arrays can be defined using the `array()` construct or the short array syntax `[]`.
      https://www.php.net/manual/en/language.types.array.php'
  -
    question: 'What is the purpose of the `foreach` loop in PHP?'
    answers:
      - { value: 'To iterate over arrays and objects.', correct: true }
      - { value: 'To execute a block of code a specified number of times.', correct: false }
      - { value: 'To iterate over a range of numbers.', correct: false }
      - { value: 'To execute a block of code as long as a condition is true.', correct: false }
    help: |
      'The `foreach` construct provides an easy way to iterate over arrays and objects.
      https://www.php.net/manual/en/control-structures.foreach.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Key: a, Value: 1Key: b, Value: 2Key: c, Value: 3', correct: true }
      - { value: '123', correct: false }
      - { value: 'Key: 0, Value: 1Key: 1, Value: 2Key: 2, Value: 3', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      'The `foreach` loop iterates over the associative array, providing both the key and the value for each element.
      https://www.php.net/manual/en/control-structures.foreach.php'
    question: '```php
<?php

$data = ['a' => 1, 'b' => 2, 'c' => 3];

foreach ($data as $key => $value) {
    echo "Key: " . $key . ", Value: " . $value;
}

?>
```'
  -
    question: 'Which of the following are valid ways to define a variable in PHP?'
    answers:
      - { value: '`$name = "John";`', correct: true }
      - { value: '`var $age = 30;`', correct: false }
      - { value: '`let $city = "New York";`', correct: false }
      - { value: '`$is_active = true;`', correct: true }
    help: |
      'Variables in PHP are denoted with a leading dollar sign (`$`). There is no need to declare the type of a variable before assigning a value to it.
      https://www.php.net/manual/en/language.variables.basics.php'
  -
    question: 'What is the purpose of the `use` keyword when defining a closure (anonymous function)?'
    answers:
      - { value: 'To import variables from the parent scope into the closure.', correct: true }
      - { value: 'To define the namespace for the closure.', correct: false }
      - { value: 'To specify the return type of the closure.', correct: false }
      - { value: 'To make the closure available globally.', correct: false }
    help: |
      'The `use` keyword in a closure definition allows the closure to access variables from the scope in which it was defined. These variables are passed by value unless explicitly passed by reference.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.variables'
  -
    question: 'Which of the following are valid ways to define a constant using the `define()` function?'
    answers:
      - { value: '`define("MY_CONST", "value");`', correct: true }
      - { value: '`define("ANOTHER_CONST", 123, true);` (case-insensitive, deprecated in PHP 7.3)', correct: true }
      - { value: '`define(MY_CONST, "value");`', correct: false }
      - { value: '`define("MY_ARRAY_CONST", [1, 2, 3]);`', correct: true }
    help: |
      'The `define()` function defines a constant. The first argument is the constant name (string), the second is the value. The third argument (case-insensitive) is deprecated since PHP 7.3. Array values are supported.
      https://www.php.net/manual/en/function.define.php'
  -
    question: 'What is the purpose of the `try...catch...finally` block in PHP?'
    answers:
      - { value: 'To handle exceptions gracefully.', correct: true }
      - { value: 'To ensure that certain code is always executed, regardless of whether an exception occurred.', correct: true }
      - { value: 'To define a block of code that will only run if no errors occur.', correct: false }
      - { value: 'To convert all warnings into errors.', correct: false }
    help: |
      'The `try` block contains code that might throw an exception. The `catch` block catches and handles specific exceptions. The `finally` block (introduced in PHP 5.5) always executes, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php'
  -
    question: 'Which of the following are valid ways to declare return types for functions in PHP 7.0+?'
    answers:
      - { value: '`function myFunc(): string {}`', correct: true }
      - { value: '`function myFunc(): ?int {}`', correct: true }
      - { value: '`function myFunc(): array|null {}` (union types PHP 8.0+)', correct: true }
      - { value: '`function myFunc(): void {}`', correct: true }
      - { value: '`function myFunc(): any {}`', correct: false }
    help: |
      'PHP supports various return type declarations, including scalar types, class/interface names, `void`, nullable types (`?Type`), and union types (PHP 8.0+). `any` is not a valid type.
      https://www.php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration'
  -
    question: 'What is the purpose of the `declare(encoding="UTF-8");` directive in PHP?'
    answers:
      - { value: 'To specify the character encoding of the current script.', correct: true }
      - { value: 'To convert all string literals in the script to UTF-8.', correct: false }
      - { value: 'To set the default character encoding for all output.', correct: false }
      - { value: 'To ensure that all input is treated as UTF-8.', correct: false }
    help: |
      'The `declare(encoding="...");` directive specifies the encoding of the script itself. This is useful when the script contains non-ASCII characters and the file encoding is not explicitly set or differs from the default.
      https://www.php.net/manual/en/control-structures.declare.php#control-structures.declare.encoding'
  -
    question: 'Which of the following are valid ways to include or require files in PHP?'
    answers:
      - { value: '`include 'file.php';`', correct: true }
      - { value: '`require 'file.php';`', correct: true }
      - { value: '`include_once 'file.php';`', correct: true }
      - { value: '`import 'file.php';`', correct: false }
    help: |
      '`include` and `require` are used to include files. `_once` variants ensure the file is included only once. `require` throws a fatal error if the file is not found, while `include` only issues a warning. `import` is not a PHP keyword for file inclusion.
      https://www.php.net/manual/en/function.include.php'
  -
    question: 'What is the difference between `include` and `require` in PHP?'
    answers:
      - { value: '`require` produces a fatal error if the file is not found, while `include` produces a warning.', correct: true }
      - { value: '`include` is used for optional files, `require` for essential files.', correct: true }
      - { value: '`require` is faster than `include`.', correct: false }
      - { value: '`include` can be used inside functions, `require` cannot.', correct: false }
    help: |
      'The main difference lies in error handling: `require` stops script execution on failure, `include` only issues a warning and continues. Both can be used inside functions.
      https://www.php.net/manual/en/function.include.php'
  -
    question: 'Which of the following are superglobal variables in PHP?'
    answers:
      - { value: '`$_GET`', correct: true }
      - { value: '`$_POST`', correct: true }
      - { value: '`$_SESSION`', correct: true }
      - { value: '`$_REQUEST`', correct: true }
      - { value: '`$_VAR`', correct: false }
    help: |
      'Superglobals are built-in variables that are always available in all scopes. Examples include `$_GET`, `$_POST`, `$_REQUEST`, `$_SERVER`, `$_FILES`, `$_ENV`, `$_COOKIE`, `$_SESSION`.
      https://www.php.net/manual/en/language.variables.superglobals.php'
  -
    question: 'What is the purpose of the `array_map()` function?'
    answers:
      - { value: 'To apply a callback function to each element of an array.', correct: true }
      - { value: 'To filter elements of an array based on a callback function.', correct: false }
      - { value: 'To reduce an array to a single value using a callback function.', correct: false }
      - { value: 'To sort an array using a user-defined comparison function.', correct: false }
    help: |
      'The `array_map()` function applies the callback to the elements of the given arrays.
      https://www.php.net/manual/en/function.array-map.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: '246', correct: true }
      - { value: '123', correct: false }
      - { value: 'Fatal error: Uncaught TypeError', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      'The `array_map()` function applies the anonymous function to each element of the `$numbers` array, doubling each value.
      https://www.php.net/manual/en/function.array-map.php'
    question: '```php
<?php

$numbers = [1, 2, 3];

$doubledNumbers = array_map(function($n) {
    return $n * 2;
}, $numbers);

foreach ($doubledNumbers as $num) {
    echo $num;
}

?>
```'
  -
    question: 'What is the purpose of the `array_filter()` function?'
    answers:
      - { value: 'To filter elements of an array using a callback function.', correct: true }
      - { value: 'To apply a callback function to each element of an array.', correct: false }
      - { value: 'To reduce an array to a single value using a callback function.', correct: false }
      - { value: 'To remove duplicate values from an array.', correct: false }
    help: |
      'The `array_filter()` function iterates over each value in the `array`, passing them to the `callback` function. If the callback function returns `true`, the current value from `array` is returned into the result array. Array keys are preserved.
      https://www.php.net/manual/en/function.array-filter.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: '24', correct: true }
      - { value: '135', correct: false }
      - { value: 'No output.', correct: false }
      - { value: 'Fatal error: Uncaught TypeError', correct: false }
    help: |
      'The `array_filter()` function keeps only the even numbers from the array.
      https://www.php.net/manual/en/function.array-filter.php'
    question: '```php
<?php

$numbers = [1, 2, 3, 4, 5];

$evenNumbers = array_filter($numbers, function($n) {
    return $n % 2 === 0;
});

foreach ($evenNumbers as $num) {
    echo $num;
}

?>
```'
  -
    question: 'What is the purpose of the `array_reduce()` function?'
    answers:
      - { value: 'To iteratively reduce the array to a single value using a callback function.', correct: true }
      - { value: 'To apply a callback function to each element of an array.', correct: false }
      - { value: 'To filter elements of an array based on a callback function.', correct: false }
      - { value: 'To merge multiple arrays into one.', correct: false }
    help: |
      'The `array_reduce()` function applies a callback function to each element in the array, in turn, to reduce the array to a single value.
      https://www.php.net/manual/en/function.array-reduce.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Sum: 15', correct: true }
      - { value: 'Sum: 0', correct: false }
      - { value: 'Sum: 10', correct: false }
      - { value: 'Fatal error: Uncaught TypeError', correct: false }
    help: |
      'The `array_reduce()` function sums all elements in the array, starting with an initial value of 0.
      https://www.php.net/manual/en/function.array-reduce.php'
    question: '```php
<?php

$numbers = [1, 2, 3, 4, 5];

$sum = array_reduce($numbers, function($carry, $item) {
    return $carry + $item;
}, 0);

echo "Sum: " . $sum;

?>
```'
  -
    question: 'What is the purpose of the `isset()` function?'
    answers:
      - { value: 'To determine if a variable is declared and is not `null`.', correct: true }
      - { value: 'To check if a variable is empty.', correct: false }
      - { value: 'To check if a variable has a boolean `true` value.', correct: false }
      - { value: 'To check if a variable is an integer.', correct: false }
    help: |
      'The `isset()` function checks if a variable is set, meaning it is declared and is not `null`.
      https://www.php.net/manual/en/function.isset.php'
  -
    question: 'What is the purpose of the `empty()` function?'
    answers:
      - { value: 'To determine if a variable is considered empty.', correct: true }
      - { value: 'To check if a variable is `null`.', correct: false }
      - { value: 'To check if a variable is declared.', correct: false }
      - { value: 'To check if a variable has a value of 0.', correct: false }
    help: |
      'The `empty()` function checks if a variable is empty. A variable is considered empty if it does not exist or if its value equals `false`. The following values are considered empty: `""` (empty string), `0` (integer zero), `0.0` (float zero), `"0"` (string zero), `null`, `false`, `array()` (empty array), and `[]` (empty array).
      https://www.php.net/manual/en/function.empty.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Var is set and not empty.Var is empty.', correct: true }
      - { value: 'Var is set and not empty.Var is set and not empty.', correct: false }
      - { value: 'Var is empty.Var is empty.', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      '`isset($var)` returns `true` for `"Hello"`. `empty($var)` returns `false` for `"Hello"`. For `null`, `isset($var)` returns `false` and `empty($var)` returns `true`.
      https://www.php.net/manual/en/function.isset.php
      https://www.php.net/manual/en/function.empty.php'
    question: '```php
<?php

$var = "Hello";
if (isset($var) && !empty($var)) {
    echo "Var is set and not empty.";
}

$var = null;
if (empty($var)) {
    echo "Var is empty.";
}

?>
```'
  -
    question: 'What is the purpose of the `null coalescing operator` (`??`) introduced in PHP 7?'
    answers:
      - { value: 'To return the first operand if it exists and is not `null`, otherwise return the second operand.', correct: true }
      - { value: 'To check if a variable is `null` and assign a default value if it is.', correct: true }
      - { value: 'To perform a strict comparison between two variables.', correct: false }
      - { value: 'To concatenate two strings, handling `null` values gracefully.', correct: false }
    help: |
      'The null coalescing operator `??` returns its first operand if it exists and is not `null`; otherwise it returns its second operand. It is a shorthand for `isset()`.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce'
  -
    question: 'Consider the following PHP 7+ code. What will be the output?'
    answers:
      - { value: 'Default ValueExisting Value', correct: true }
      - { value: 'Existing ValueDefault Value', correct: false }
      - { value: 'Default ValueDefault Value', correct: false }
      - { value: 'Fatal error: Undefined variable: value', correct: false }
    help: |
      'In the first case, `$value` is not set, so `??` returns "Default Value". In the second case, `$value` is set and not `null`, so `??` returns "Existing Value".
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce'
    question: '```php
<?php

echo $value ?? "Default Value";

$value = "Existing Value";
echo $value ?? "Another Default";

?>
```'
  -
    question: 'What is the purpose of the `spaceship operator` (`<=>`) introduced in PHP 7?'
    answers:
      - { value: 'To perform a three-way comparison.', correct: true }
      - { value: 'To return -1 if the left operand is less than the right, 0 if they are equal, and 1 if the left is greater.', correct: true }
      - { value: 'To compare two arrays element by element.', correct: false }
      - { value: 'To check for strict equality between two values.', correct: false }
    help: |
      'The spaceship operator `(a <=> b)` returns an integer less than, equal to, or greater than zero when `a` is respectively less than, equal to, or greater than `b`. It is useful for sorting functions.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.spaceship'
  -
    question: 'Consider the following PHP 7+ code. What will be the output?'
    answers:
      - { value: '-101', correct: true }
      - { value: '000', correct: false }
      - { value: '10-1', correct: false }
      - { value: 'Fatal error: Cannot use spaceship operator with strings', correct: false }
    help: |
      'The spaceship operator correctly performs a three-way comparison, returning -1, 0, or 1.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.spaceship'
    question: '```php
<?php

echo 5 <=> 10;
echo 10 <=> 10;
echo 15 <=> 10;

?>
```'
  -
    question: 'Which of the following are valid ways to define an array in PHP?'
    answers:
      - { value: '`$arr = array(1, 2, 3);`', correct: true }
      - { value: '`$arr = [1, 2, 3];`', correct: true }
      - { value: '`$arr = new Array(1, 2, 3);`', correct: false }
      - { value: '`$arr = {};`', correct: false }
    help: |
      'Arrays can be defined using the `array()` construct or the short array syntax `[]`.
      https://www.php.net/manual/en/language.types.array.php'
  -
    question: 'What is the purpose of the `foreach` loop in PHP?'
    answers:
      - { value: 'To iterate over arrays and objects.', correct: true }
      - { value: 'To execute a block of code a specified number of times.', correct: false }
      - { value: 'To iterate over a range of numbers.', correct: false }
      - { value: 'To execute a block of code as long as a condition is true.', correct: false }
    help: |
      'The `foreach` construct provides an easy way to iterate over arrays and objects.
      https://www.php.net/manual/en/control-structures.foreach.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Key: a, Value: 1Key: b, Value: 2Key: c, Value: 3', correct: true }
      - { value: '123', correct: false }
      - { value: 'Key: 0, Value: 1Key: 1, Value: 2Key: 2, Value: 3', correct: false }
      - { value: 'No output.', correct: false }
    help: |
      'The `foreach` loop iterates over the associative array, providing both the key and the value for each element.
      https://www.php.net/manual/en/control-structures.foreach.php'
    question: '```php
<?php

$data = ['a' => 1, 'b' => 2, 'c' => 3];

foreach ($data as $key => $value) {
    echo "Key: " . $key . ", Value: " . $value;
}

?>
```'
  -
    question: 'Which of the following are valid ways to define a variable in PHP?'
    answers:
      - { value: '`$name = "John";`', correct: true }
      - { value: '`var $age = 30;`', correct: false }
      - { value: '`let $city = "New York";`', correct: false }
      - { value: '`$is_active = true;`', correct: true }
    help: |
      'Variables in PHP are denoted with a leading dollar sign (`$`). There is no need to declare the type of a variable before assigning a value to it.
      https://www.php.net/manual/en/language.variables.basics.php'
  -
    question: 'What is the purpose of the `use` keyword when defining a closure (anonymous function)?'
    answers:
      - { value: 'To import variables from the parent scope into the closure.', correct: true }
      - { value: 'To define the namespace for the closure.', correct: false }
      - { value: 'To specify the return type of the closure.', correct: false }
      - { value: 'To make the closure available globally.', correct: false }
    help: |
      'The `use` keyword in a closure definition allows the closure to access variables from the scope in which it was defined. These variables are passed by value unless explicitly passed by reference.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.variables'
  -
    question: 'Which of the following are valid ways to define a constant using the `define()` function?'
    answers:
      - { value: '`define("MY_CONST", "value");`', correct: true }
      - { value: '`define("ANOTHER_CONST", 123, true);` (case-insensitive, deprecated in PHP 7.3)', correct: true }
      - { value: '`define(MY_CONST, "value");`', correct: false }
      - { value: '`define("MY_ARRAY_CONST", [1, 2, 3]);`', correct: true }
    help: |
      'The `define()` function defines a constant. The first argument is the constant name (string), the second is the value. The third argument (case-insensitive) is deprecated since PHP 7.3. Array values are supported.
      https://www.php.net/manual/en/function.define.php'
  -
    question: 'What is the purpose of the `try...catch...finally` block in PHP?'
    answers:
      - { value: 'To handle exceptions gracefully.', correct: true }
      - { value: 'To ensure that certain code is always executed, regardless of whether an exception occurred.', correct: true }
      - { value: 'To define a block of code that will only run if no errors occur.', correct: false }
      - { value: 'To convert all warnings into errors.', correct: false }
    help: |
      'The `try` block contains code that might throw an exception. The `catch` block catches and handles specific exceptions. The `finally` block (introduced in PHP 5.5) always executes, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php'
  -
    question: 'Which of the following are valid ways to declare return types for functions in PHP 7.0+?'
    answers:
      - { value: '`function myFunc(): string {}`', correct: true }
      - { value: '`function myFunc(): ?int {}`', correct: true }
      - { value: '`function myFunc(): array|null {}` (union types PHP 8.0+)', correct: true }
      - { value: '`function myFunc(): void {}`', correct: true }
      - { value: '`function myFunc(): any {}`', correct: false }
    help: |
      'PHP supports various return type declarations, including scalar types, class/interface names, `void`, nullable types (`?Type`), and union types (PHP 8.0+). `any` is not a valid type.
      https://www.php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration'