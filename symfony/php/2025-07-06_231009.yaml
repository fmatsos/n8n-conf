```yaml
category: PHP
questions:
  -
    question: 'Which of the following is true about abstract classes in PHP?'
    answers:
      - { value: 'Abstract classes can be instantiated directly.', correct: false }
      - { value: 'Abstract classes must contain at least one abstract method.', correct: false }
      - { value: 'Classes extending an abstract class must implement all its abstract methods.', correct: true }
      - { value: 'Abstract classes cannot have concrete methods.', correct: false }
      - { value: 'A class can extend multiple abstract classes.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.abstract.php'
  -
    question: 'In PHP 8.2, what is the correct way to define a read-only property in a class?'
    answers:
      - { value: 'public readonly string $name;', correct: true }
      - { value: 'public const string $name;', correct: false }
      - { value: 'public immutable string $name;', correct: false }
      - { value: 'public static readonly string $name;', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'Which magic method is automatically called when an object is created?'
    answers:
      - { value: '__init()', correct: false }
      - { value: '__construct()', correct: true }
      - { value: '__create()', correct: false }
      - { value: '__new()', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php'
  -
    question: 'What is the purpose of the `final` keyword when applied to a class in PHP?'
    answers:
      - { value: 'It prevents the class from being instantiated.', correct: false }
      - { value: 'It prevents the class from being extended.', correct: true }
      - { value: 'It makes all methods in the class final.', correct: false }
      - { value: 'It makes the class a singleton.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.final.php'
  -
    question: 'Consider the following PHP code:
```php
class MyClass {
    public static $staticProperty = "Hello";

    public static function staticMethod() {
        return self::$staticProperty . " World!";
    }
}

echo MyClass::staticMethod();
```
What will be the output?'
    answers:
      - { value: 'Hello', correct: false }
      - { value: 'Hello World!', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined property error', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.static.php'
  -
    question: 'Which of the following statements about interfaces in PHP is true?'
    answers:
      - { value: 'Interfaces can contain properties.', correct: false }
      - { value: 'A class can implement only one interface.', correct: false }
      - { value: 'All methods declared in an interface must be public.', correct: true }
      - { value: 'Interfaces can define concrete methods.', correct: false }
      - { value: 'Interfaces can extend classes.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.interfaces.php'
  -
    question: 'What is the correct way to declare a constant within a class in PHP?'
    answers:
      - { value: 'const MY_CONSTANT = "value";', correct: true }
      - { value: 'define("MY_CONSTANT", "value");', correct: false }
      - { value: 'public $MY_CONSTANT = "value";', correct: false }
      - { value: 'static $MY_CONSTANT = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.constants.php'
  -
    question: 'Which PHP feature allows you to reuse methods from multiple classes without using inheritance?'
    answers:
      - { value: 'Interfaces', correct: false }
      - { value: 'Abstract classes', correct: false }
      - { value: 'Traits', correct: true }
      - { value: 'Mixins', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.traits.php'
  -
    question: 'What is the purpose of the `__call()` magic method in PHP?'
    answers:
      - { value: 'It is called when an object is treated as a function.', correct: false }
      - { value: 'It is called when invoking inaccessible methods in an object context.', correct: true }
      - { value: 'It is called when a non-existent static method is called.', correct: false }
      - { value: 'It is called when an object is cloned.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.overloading.php#object.call'
  -
    question: 'How do you prevent a method from being overridden by a child class in PHP?'
    answers:
      - { value: 'Declare the method as `private`.', correct: false }
      - { value: 'Declare the method as `static`.', correct: false }
      - { value: 'Declare the method as `final`.', correct: true }
      - { value: 'Declare the method as `abstract`.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.final.php'
  -
    question: 'Which of the following best describes encapsulation in OOP?'
    answers:
      - { value: 'The ability of an object to take on many forms.', correct: false }
      - { value: 'Hiding the internal state and functionality of an object and exposing only what is necessary.', correct: true }
      - { value: 'Creating new classes from existing classes.', correct: false }
      - { value: 'Defining a contract for classes to implement.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.basic.php'
  -
    question: 'What is the correct way to access a private property from within the same class in PHP?'
    answers:
      - { value: '$this->propertyName', correct: true }
      - { value: 'self::$propertyName', correct: false }
      - { value: 'MyClass::propertyName', correct: false }
      - { value: 'propertyName', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.visibility.php'
  -
    question: 'In PHP, what is the purpose of the `parent::` keyword?'
    answers:
      - { value: 'To call a method or access a property of the current object.', correct: false }
      - { value: 'To call a method or access a property of the parent class.', correct: true }
      - { value: 'To call a static method of the current class.', correct: false }
      - { value: 'To call a method of an interface.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php'
  -
    question: 'Which of the following is a valid way to define a namespace in PHP?'
    answers:
      - { value: 'namespace MyProject/SubModule;', correct: false }
      - { value: 'namespace MyProject\\SubModule;', correct: true }
      - { value: 'using namespace MyProject\\SubModule;', correct: false }
      - { value: 'namespace MyProject.SubModule;', correct: false }
    help: |
      'https://www.php.net/manual/en/language.namespaces.definition.php'
  -
    question: 'What is the primary benefit of using namespaces in PHP?'
    answers:
      - { value: 'To improve performance of PHP applications.', correct: false }
      - { value: 'To prevent naming collisions between classes, functions, and constants.', correct: true }
      - { value: 'To enable multiple inheritance.', correct: false }
      - { value: 'To define global variables.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.namespaces.rationale.php'
  -
    question: 'Consider the following code:
```php
namespace App\\Controller;

class HomeController {
    public function index() {
        return "Home Page";
    }
}

// In another file:
// use App\\Controller\\HomeController;
// $controller = new HomeController();
// echo $controller->index();
```
If the `use` statement is missing, how would you instantiate `HomeController` from the global namespace?'
    answers:
      - { value: '$controller = new \\HomeController();', correct: false }
      - { value: '$controller = new App\\Controller\\HomeController();', correct: true }
      - { value: '$controller = new Controller\\HomeController();', correct: false }
      - { value: '$controller = new \\App\\Controller\\HomeController();', correct: true }
    help: |
      'https://www.php.net/manual/en/language.namespaces.importing.php'
  -
    question: 'Which of the following is true about anonymous functions (closures) in PHP?'
    answers:
      - { value: 'They can access variables from the parent scope without using the `use` keyword.', correct: false }
      - { value: 'They are always assigned to a variable.', correct: false }
      - { value: 'They can be passed as arguments to other functions.', correct: true }
      - { value: 'They cannot be returned from functions.', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.anonymous.php'
  -
    question: 'Consider the following PHP code:
```php
$message = "Hello";
$greet = function ($name) use ($message) {
    echo "$message $name!";
};
$message = "Hi";
$greet("Alice");
```
What will be the output?'
    answers:
      - { value: 'Hello Alice!', correct: true }
      - { value: 'Hi Alice!', correct: false }
      - { value: 'Undefined variable $message', correct: false }
      - { value: 'Fatal error', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.anonymous.php#example-265'
  -
    question: 'Which of the following is the correct way to catch multiple types of exceptions in a single `catch` block in PHP 8.2?'
    answers:
      - { value: 'catch (ExceptionTypeA, ExceptionTypeB $e)', correct: false }
      - { value: 'catch (ExceptionTypeA | ExceptionTypeB $e)', correct: true }
      - { value: 'catch (ExceptionTypeA or ExceptionTypeB $e)', correct: false }
      - { value: 'catch (ExceptionTypeA and ExceptionTypeB $e)', correct: false }
    help: |
      'https://www.php.net/manual/en/language.exceptions.php#language.exceptions.multicatch'
  -
    question: 'What is the purpose of the `finally` block in a `try...catch...finally` statement?'
    answers:
      - { value: 'It is executed only if an exception is thrown.', correct: false }
      - { value: 'It is executed only if no exception is thrown.', correct: false }
      - { value: 'It is always executed, regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'It is used to re-throw exceptions.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally'
  -
    question: 'Which of the following is the base class for all user-defined exceptions in PHP?'
    answers:
      - { value: 'Error', correct: false }
      - { value: 'Throwable', correct: false }
      - { value: 'Exception', correct: true }
      - { value: 'RuntimeException', correct: false }
    help: |
      'https://www.php.net/manual/en/class.exception.php'
  -
    question: 'In PHP 8.2, what is the purpose of the `match` expression?'
    answers:
      - { value: 'It is a new loop construct similar to `for` or `while`.', correct: false }
      - { value: 'It is a new control flow construct for conditional branching, similar to `switch` but with stricter comparisons and return values.', correct: true }
      - { value: 'It is used for pattern matching in strings.', correct: false }
      - { value: 'It replaces the `if-else if-else` statement.', correct: false }
    help: |
      'https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'Which of the following is a new feature introduced in PHP 8.0 related to function arguments?'
    answers:
      - { value: 'Variadic arguments with `...`', correct: false }
      - { value: 'Named arguments', correct: true }
      - { value: 'Argument unpacking', correct: false }
      - { value: 'Default argument values', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments'
  -
    question: 'What does the `#[AllowDynamicProperties]` attribute do in PHP 8.2?'
    answers:
      - { value: 'It allows a class to have dynamic properties, suppressing the deprecation warning for classes without a `__get()` or `__set()` method.', correct: true }
      - { value: 'It enables JIT compilation for dynamic properties.', correct: false }
      - { value: 'It restricts the creation of dynamic properties.', correct: false }
      - { value: 'It defines a dynamic property at runtime.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.allowdynamicproperties'
  -
    question: 'Which of the following is a valid return type declaration for a function that does not return any value?'
    answers:
      - { value: 'void', correct: true }
      - { value: 'null', correct: false }
      - { value: 'empty', correct: false }
      - { value: 'none', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.void'
  -
    question: 'What is the purpose of the `declare(strict_types=1);` statement in PHP?'
    answers:
      - { value: 'It enables strict type checking for all PHP files in the project.', correct: false }
      - { value: 'It enables strict type checking for scalar type declarations within the current file.', correct: true }
      - { value: 'It enforces strict comparison operators (===).', correct: false }
      - { value: 'It enables strict error reporting.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict'
  -
    question: 'Which of the following is a valid way to define an anonymous class in PHP?'
    answers:
      - { value: '$obj = new class {};', correct: true }
      - { value: '$obj = new anonymous class {};', correct: false }
      - { value: '$obj = class {};', correct: false }
      - { value: '$obj = new ClassName(); // where ClassName is not defined', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.anonymous.php'
  -
    question: 'What is the output of the following PHP code?
```php
$data = [1, 2, 3];
list($a, $b, $c) = $data;
echo $a + $b + $c;
```'
    answers:
      - { value: '6', correct: true }
      - { value: '123', correct: false }
      - { value: 'Error', correct: false }
      - { value: 'Undefined variable', correct: false }
    help: |
      'https://www.php.net/manual/en/function.list.php'
  -
    question: 'Which PHP function is used to convert a string to an array?'
    answers:
      - { value: 'explode()', correct: true }
      - { value: 'implode()', correct: false }
      - { value: 'split()', correct: false }
      - { value: 'str_to_array()', correct: false }
    help: |
      'https://www.php.net/manual/en/function.explode.php'
  -
    question: 'What is the difference between `include` and `require` in PHP?'
    answers:
      - { value: '`include` generates a fatal error if the file is not found, while `require` generates a warning.', correct: false }
      - { value: '`require` generates a fatal error if the file is not found, while `include` generates a warning.', correct: true }
      - { value: '`include` is used for functions, `require` for classes.', correct: false }
      - { value: 'There is no functional difference; they are aliases.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.include.php'
  -
    question: 'Which superglobal variable contains information about headers, paths, and script locations?'
    answers:
      - { value: '$_GET', correct: false }
      - { value: '$_POST', correct: false }
      - { value: '$_SERVER', correct: true }
      - { value: '$_REQUEST', correct: false }
    help: |
      'https://www.php.net/manual/en/reserved.variables.server.php'
  -
    question: 'What is the purpose of the `isset()` function in PHP?'
    answers:
      - { value: 'To check if a variable is empty.', correct: false }
      - { value: 'To check if a variable has been declared and is not null.', correct: true }
      - { value: 'To check if a variable is a string.', correct: false }
      - { value: 'To check if a variable is a number.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.isset.php'
  -
    question: 'Which PHP function is used to remove whitespace and other predefined characters from both sides of a string?'
    answers:
      - { value: 'trim()', correct: true }
      - { value: 'strip()', correct: false }
      - { value: 'clean()', correct: false }
      - { value: 'chop()', correct: false }
    help: |
      'https://www.php.net/manual/en/function.trim.php'
  -
    question: 'What is the correct way to define a constant in PHP (outside of a class)?'
    answers:
      - { value: 'const MY_CONST = "value";', correct: false }
      - { value: 'define("MY_CONST", "value");', correct: true }
      - { value: '$MY_CONST = "value";', correct: false }
      - { value: '#define MY_CONST "value"', correct: false }
    help: |
      'https://www.php.net/manual/en/function.define.php'
  -
    question: 'Which of the following data types can be used as array keys in PHP 8.2?'
    answers:
      - { value: 'Integers and strings', correct: true }
      - { value: 'Integers, strings, and booleans', correct: false }
      - { value: 'Integers, strings, and objects', correct: false }
      - { value: 'Any scalar type', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.array.php'
  -
    question: 'What is the output of `var_dump(0 == "a");` in PHP?'
    answers:
      - { value: 'bool(true)', correct: true }
      - { value: 'bool(false)', correct: false }
      - { value: 'int(0)', correct: false }
      - { value: 'string(1) "a"', correct: false }
    help: |
      'https://www.php.net/manual/en/language.operators.comparison.php'
  -
    question: 'Which operator is used for strict comparison (value and type) in PHP?'
    answers:
      - { value: '==', correct: false }
      - { value: '!=', correct: false }
      - { value: '===', correct: true }
      - { value: '!==', correct: false }
    help: |
      'https://www.php.net/manual/en/language.operators.comparison.php'
  -
    question: 'What is the purpose of the `use` keyword when importing namespaces?'
    answers:
      - { value: 'To define a new namespace.', correct: false }
      - { value: 'To include a file from another directory.', correct: false }
      - { value: 'To import classes, interfaces, functions, or constants from other namespaces into the current scope.', correct: true }
      - { value: 'To declare a variable as global.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.namespaces.importing.php'
  -
    question: 'Which of the following is a valid way to import a function from a namespace?'
    answers:
      - { value: 'use function MyNamespace\\myFunction;', correct: true }
      - { value: 'use MyNamespace\\myFunction();', correct: false }
      - { value: 'import function MyNamespace\\myFunction;', correct: false }
      - { value: 'use MyNamespace\\myFunction as myFunction;', correct: true }
    help: |
      'https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.functions'
  -
    question: 'What is the purpose of the `__autoload()` function (deprecated in PHP 7.2, replaced by PSR-4 autoloading)?'
    answers:
      - { value: 'To automatically load classes when they are first used.', correct: true }
      - { value: 'To automatically include all files in a directory.', correct: false }
      - { value: 'To automatically register functions.', correct: false }
      - { value: 'To automatically execute code on script shutdown.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.autoload.php'
  -
    question: 'Which SPL class provides an interface for iterating over objects (like arrays or objects implementing `Traversable`)?'
    answers:
      - { value: 'SplObjectStorage', correct: false }
      - { value: 'ArrayIterator', correct: true }
      - { value: 'SplQueue', correct: false }
      - { value: 'SplStack', correct: false }
    help: |
      'https://www.php.net/manual/en/class.arrayiterator.php'
  -
    question: 'What is the purpose of the `SplFixedArray` class in SPL?'
    answers:
      - { value: 'It provides an array that can only store objects.', correct: false }
      - { value: 'It provides an array that can grow or shrink dynamically.', correct: false }
      - { value: 'It provides an array that has a fixed size and is generally faster than a regular PHP array for certain use cases.', correct: true }
      - { value: 'It provides an array that stores elements in a sorted order.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.splfixedarray.php'
  -
    question: 'Which SPL interface should a class implement to be traversable using `foreach`?'
    answers:
      - { value: 'Countable', correct: false }
      - { value: 'Serializable', correct: false }
      - { value: 'Iterator', correct: true }
      - { value: 'ArrayAccess', correct: false }
    help: |
      'https://www.php.net/manual/en/class.iterator.php'
  -
    question: 'What is the purpose of the `ArrayAccess` interface in SPL?'
    answers:
      - { value: 'To allow objects to be used with `foreach` loops.', correct: false }
      - { value: 'To allow objects to be accessed as arrays (e.g., `$obj[key]`).', correct: true }
      - { value: 'To allow objects to be serialized and unserialized.', correct: false }
      - { value: 'To allow objects to be compared.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.arrayaccess.php'
  -
    question: 'Which SPL class is useful for implementing a stack (LIFO) data structure?'
    answers:
      - { value: 'SplQueue', correct: false }
      - { value: 'SplStack', correct: true }
      - { value: 'SplPriorityQueue', correct: false }
      - { value: 'SplDoublyLinkedList', correct: true }
    help: |
      'https://www.php.net/manual/en/class.splstack.php'
  -
    question: 'What is the primary function of the `SplObjectStorage` class?'
    answers:
      - { value: 'To store objects as keys and associate data with them, allowing objects to be used as array keys.', correct: true }
      - { value: 'To store a fixed number of objects.', correct: false }
      - { value: 'To store objects in a sorted order.', correct: false }
      - { value: 'To serialize and deserialize objects.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.splobjectstorage.php'
  -
    question: 'Which of the following is a valid way to define a trait in PHP?'
    answers:
      - { value: 'trait MyTrait { /* ... */ }', correct: true }
      - { value: 'interface MyTrait { /* ... */ }', correct: false }
      - { value: 'abstract trait MyTrait { /* ... */ }', correct: false }
      - { value: 'class MyTrait { /* ... */ }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.traits.php'
  -
    question: 'How do you use a trait within a class in PHP?'
    answers:
      - { value: 'include MyTrait;', correct: false }
      - { value: 'use MyTrait;', correct: true }
      - { value: 'implements MyTrait;', correct: false }
      - { value: 'extends MyTrait;', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.using'
  -
    question: 'What happens if a class uses two traits that define a method with the same name?'
    answers:
      - { value: 'PHP automatically merges the methods.', correct: false }
      - { value: 'A fatal error occurs unless the conflict is explicitly resolved using `insteadof` or `as` operators.', correct: true }
      - { value: 'The method from the first trait used takes precedence.', correct: false }
      - { value: 'The method from the last trait used takes precedence.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict'
  -
    question: 'Which of the following is true about traits and inheritance?'
    answers:
      - { value: 'Traits can extend other traits.', correct: true }
      - { value: 'Classes can inherit from traits.', correct: false }
      - { value: 'Traits can implement interfaces.', correct: false }
      - { value: 'Traits can have abstract methods.', correct: true }
    help: |
      'https://www.php.net/manual/en/language.oop5.traits.php'
  -
    question: 'What is the purpose of the `__debugInfo()` magic method in PHP 8.2?'
    answers:
      - { value: 'It is called when `var_dump()` is used on an object, allowing custom debug information to be displayed.', correct: true }
      - { value: 'It is used to log debug messages to a file.', correct: false }
      - { value: 'It is called when an object is serialized for debugging.', correct: false }
      - { value: 'It provides information about the object''s memory usage.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo'
  -
    question: 'Which of the following is a valid way to define a constant in an interface?'
    answers:
      - { value: 'public const MY_CONST = "value";', correct: true }
      - { value: 'const MY_CONST = "value";', correct: true }
      - { value: 'define("MY_CONST", "value");', correct: false }
      - { value: 'static MY_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants'
  -
    question: 'What is the output of the following code snippet?
```php
class A {
    public function foo() {
        echo "A";
    }
}

class B extends A {
    public function foo() {
        echo "B";
    }
}

$obj = new B();
$obj->foo();
```'
    answers:
      - { value: 'A', correct: false }
      - { value: 'B', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.inheritance.php'
  -
    question: 'Which of the following is a valid way to check if a class exists in PHP?'
    answers:
      - { value: 'class_exists("MyClass")', correct: true }
      - { value: 'isset(MyClass)', correct: false }
      - { value: 'defined("MyClass")', correct: false }
      - { value: 'MyClass::exists()', correct: false }
    help: |
      'https://www.php.net/manual/en/function.class-exists.php'
  -
    question: 'What is the purpose of the `instanceof` operator in PHP?'
    answers:
      - { value: 'To check if a variable is an instance of a specific class or implements a specific interface.', correct: true }
      - { value: 'To create a new instance of a class.', correct: false }
      - { value: 'To compare two objects for equality.', correct: false }
      - { value: 'To check the type of a variable (e.g., string, int).', correct: false }
    help: |
      'https://www.php.net/manual/en/language.operators.type.php'
  -
    question: 'Which of the following is a valid way to define a static method in a class?'
    answers:
      - { value: 'public function staticMethod() {}', correct: false }
      - { value: 'public static function staticMethod() {}', correct: true }
      - { value: 'static public function staticMethod() {}', correct: true }
      - { value: 'function staticMethod() {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.static.php'
  -
    question: 'What is the purpose of the `__clone()` magic method?'
    answers:
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is duplicated using the `clone` keyword.', correct: true }
      - { value: 'It is called when an object is destroyed.', correct: false }
      - { value: 'It is used to create a new instance of a class.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.cloning.php'
  -
    question: 'Which of the following is true about late static binding in PHP?'
    answers:
      - { value: 'It refers to the class where the method was originally defined.', correct: false }
      - { value: 'It refers to the class that was initially called at runtime.', correct: true }
      - { value: 'It is achieved using the `self::` keyword.', correct: false }
      - { value: 'It is only applicable to non-static methods.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
  -
    question: 'What is the purpose of the `callable` type declaration in PHP?'
    answers:
      - { value: 'It indicates that a function expects an array as an argument.', correct: false }
      - { value: 'It indicates that a function expects a string as an argument.', correct: false }
      - { value: 'It indicates that a function expects a callback (a function or method that can be called).', correct: true }
      - { value: 'It indicates that a function returns a boolean value.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.callable.php'
  -
    question: 'Which of the following is a valid way to get the class name of an object?'
    answers:
      - { value: 'get_class($obj)', correct: true }
      - { value: '$obj->className', correct: false }
      - { value: 'typeof($obj)', correct: false }
      - { value: '$obj::class', correct: true }
    help: |
      'https://www.php.net/manual/en/function.get-class.php'
  -
    question: 'What is the purpose of the `__invoke()` magic method?'
    answers:
      - { value: 'It is called when an object is used in a string context.', correct: false }
      - { value: 'It is called when an object is called as a function.', correct: true }
      - { value: 'It is called when an object is accessed as an array.', correct: false }
      - { value: 'It is called when an object is compared.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.invoke'
  -
    question: 'Which of the following is true about PHP 8.2 enums?'
    answers:
      - { value: 'Enums can have methods.', correct: true }
      - { value: 'Enums can implement interfaces.', correct: true }
      - { value: 'Enums can extend classes.', correct: false }
      - { value: 'Enums can be instantiated using `new`.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.enumerations.php'
  -
    question: 'What is the purpose of the `readonly` modifier for classes in PHP 8.2?'
    answers:
      - { value: 'It makes all properties of the class readonly.', correct: true }
      - { value: 'It prevents the class from being extended.', correct: false }
      - { value: 'It makes all methods of the class readonly.', correct: false }
      - { value: 'It prevents the class from being instantiated.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes'
  -
    question: 'Which of the following is a correct way to define a union type in PHP 8.2?'
    answers:
      - { value: 'function foo(int|string $param) {}', correct: true }
      - { value: 'function foo(int or string $param) {}', correct: false }
      - { value: 'function foo(int, string $param) {}', correct: false }
      - { value: 'function foo(int & string $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union'
  -
    question: 'What is the purpose of the `#[Deprecated]` attribute in PHP 8.0+?'
    answers:
      - { value: 'It marks a function, class, or property as deprecated, causing a deprecation notice when used.', correct: true }
      - { value: 'It prevents a function from being called.', correct: false }
      - { value: 'It removes a function from the codebase.', correct: false }
      - { value: 'It indicates that a function is experimental.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.deprecated'
  -
    question: 'Which of the following is a valid way to define a short closure (arrow function) in PHP?'
    answers:
      - { value: 'fn($x) => $x * 2;', correct: true }
      - { value: 'function($x) => $x * 2;', correct: false }
      - { value: '($x) => $x * 2;', correct: false }
      - { value: 'lambda($x) => $x * 2;', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.arrow.php'
  -
    question: 'What is the main difference between `throw new Exception()` and `throw new Error()` in PHP?'
    answers:
      - { value: '`Exception` is for recoverable errors, while `Error` is for internal PHP errors that are generally unrecoverable.', correct: true }
      - { value: '`Exception` is for syntax errors, while `Error` is for runtime errors.', correct: false }
      - { value: '`Error` can be caught, while `Exception` cannot.', correct: false }
      - { value: 'There is no practical difference; they are interchangeable.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.throwable.php'
  -
    question: 'Which of the following is a valid way to define a constant in a trait?'
    answers:
      - { value: 'public const MY_TRAIT_CONST = "value";', correct: true }
      - { value: 'const MY_TRAIT_CONST = "value";', correct: true }
      - { value: 'define("MY_TRAIT_CONST", "value");', correct: false }
      - { value: 'static MY_TRAIT_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.constants'
  -
    question: 'What is the purpose of the `__sleep()` magic method?'
    answers:
      - { value: 'It is called when an object is unserialized.', correct: false }
      - { value: 'It is called prior to serialization, allowing you to return an array of property names to be serialized.', correct: true }
      - { value: 'It is called when the script is paused.', correct: false }
      - { value: 'It is used to put the script into a low-power state.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.sleep'
  -
    question: 'What is the purpose of the `__wakeup()` magic method?'
    answers:
      - { value: 'It is called after an object is serialized.', correct: false }
      - { value: 'It is called after an object is unserialized, allowing you to re-establish any resources.', correct: true }
      - { value: 'It is called when the script resumes execution.', correct: false }
      - { value: 'It is used to wake up a sleeping script.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.wakeup'
  -
    question: 'Which of the following functions can be used to check if a variable is an array?'
    answers:
      - { value: 'is_array()', correct: true }
      - { value: 'is_collection()', correct: false }
      - { value: 'is_list()', correct: false }
      - { value: 'gettype() == "array"', correct: true }
    help: |
      'https://www.php.net/manual/en/function.is-array.php'
  -
    question: 'What is the output of the following PHP code?
```php
$a = 5;
$b = &$a;
$b = 10;
echo $a;
```'
    answers:
      - { value: '5', correct: false }
      - { value: '10', correct: true }
      - { value: 'Error', correct: false }
      - { value: 'Undefined variable', correct: false }
    help: |
      'https://www.php.net/manual/en/language.references.whatdo.php'
  -
    question: 'Which of the following is a valid way to define a constructor property promotion in PHP 8.0+?'
    answers:
      - { value: 'class MyClass { public function __construct(public string $name) {} }', correct: true }
      - { value: 'class MyClass { public string $name; public function __construct($name) { $this->name = $name; } }', correct: false }
      - { value: 'class MyClass { public function __construct(string $name) { public $this->name = $name; } }', correct: false }
      - { value: 'class MyClass { public function __construct(string $name) use ($name) {} }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion'
  -
    question: 'What is the purpose of the `nullsafe` operator (`?->`) in PHP 8.0+?'
    answers:
      - { value: 'It allows calling methods or accessing properties on a null object without throwing an error, returning null instead.', correct: true }
      - { value: 'It checks if a variable is null before performing an operation.', correct: false }
      - { value: 'It assigns a default value if a variable is null.', correct: false }
      - { value: 'It performs a null check and then throws an exception if the object is null.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.operators.nullsafe.php'
  -
    question: 'Which of the following is true about `static` properties and methods?'
    answers:
      - { value: 'They belong to the object instance.', correct: false }
      - { value: 'They belong to the class itself, not a specific instance.', correct: true }
      - { value: 'They can be accessed using `$this->`.', correct: false }
      - { value: 'They can be overridden by non-static methods in child classes.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.static.php'
  -
    question: 'What is the purpose of the `__toString()` magic method?'
    answers:
      - { value: 'It is called when an object is converted to a string.', correct: true }
      - { value: 'It is called when an object is cast to an integer.', correct: false }
      - { value: 'It is used to define the string representation of a class.', correct: false }
      - { value: 'It is called when `var_dump()` is used on an object.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.tostring'
  -
    question: 'Which of the following is a valid way to define a constant in PHP 8.2 that is accessible globally?'
    answers:
      - { value: 'define("APP_VERSION", "1.0");', correct: true }
      - { value: 'const APP_VERSION = "1.0";', correct: false }
      - { value: 'global $APP_VERSION = "1.0";', correct: false }
      - { value: 'static APP_VERSION = "1.0";', correct: false }
    help: |
      'https://www.php.net/manual/en/function.define.php'
  -
    question: 'What is the purpose of the `empty()` function in PHP?'
    answers:
      - { value: 'To check if a variable exists and is not null.', correct: false }
      - { value: 'To check if a variable has an empty value (e.g., "", 0, false, null, empty array).', correct: true }
      - { value: 'To remove a variable from memory.', correct: false }
      - { value: 'To check if a string is empty.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.empty.php'
  -
    question: 'Which of the following is a valid way to define a typed array in PHP 8.2?'
    answers:
      - { value: 'array<string> $names;', correct: false }
      - { value: 'array $names;', correct: false }
      - { value: 'No direct syntax for typed arrays; use PHPDoc or a wrapper class.', correct: true }
      - { value: 'string[] $names;', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'What is the purpose of the `fn` keyword in PHP 7.4+?'
    answers:
      - { value: 'To define a regular function.', correct: false }
      - { value: 'To define an anonymous function with a concise syntax (arrow function).', correct: true }
      - { value: 'To define a generator function.', correct: false }
      - { value: 'To define a function that returns a boolean.', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.arrow.php'
  -
    question: 'Which of the following is a valid way to define a read-only class in PHP 8.2?'
    answers:
      - { value: 'readonly class MyClass {}', correct: true }
      - { value: 'final class MyClass {}', correct: false }
      - { value: 'abstract readonly class MyClass {}', correct: false }
      - { value: 'class MyClass implements Readonly {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes'
  -
    question: 'What is the purpose of the `#[SensitiveParameter]` attribute in PHP 8.2?'
    answers:
      - { value: 'It marks a parameter as sensitive, causing its value to be redacted from stack traces and other debug outputs.', correct: true }
      - { value: 'It makes a parameter optional.', correct: false }
      - { value: 'It encrypts the parameter value.', correct: false }
      - { value: 'It restricts the type of the parameter.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.sensitiveparameter'
  -
    question: 'Which of the following is a valid way to define a class that cannot be extended?'
    answers:
      - { value: 'final class MyClass {}', correct: true }
      - { value: 'sealed class MyClass {}', correct: false }
      - { value: 'private class MyClass {}', correct: false }
      - { value: 'static class MyClass {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.final.php'
  -
    question: 'What is the purpose of the `__get()` magic method?'
    answers:
      - { value: 'It is called when writing data to inaccessible properties.', correct: false }
      - { value: 'It is called when reading data from inaccessible properties.', correct: true }
      - { value: 'It is called when checking if an inaccessible property is set.', correct: false }
      - { value: 'It is called when unsetting an inaccessible property.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.overloading.php#object.get'
  -
    question: 'What is the purpose of the `__set()` magic method?'
    answers:
      - { value: 'It is called when reading data from inaccessible properties.', correct: false }
      - { value: 'It is called when writing data to inaccessible properties.', correct: true }
      - { value: 'It is called when checking if an inaccessible property is set.', correct: false }
      - { value: 'It is called when unsetting an inaccessible property.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.overloading.php#object.set'
  -
    question: 'Which of the following is true about PHP 8.2 JIT compiler?'
    answers:
      - { value: 'It compiles PHP code to JavaScript for faster execution in browsers.', correct: false }
      - { value: 'It compiles PHP code to native machine code at runtime, potentially improving performance for CPU-bound applications.', correct: true }
      - { value: 'It is enabled by default in all PHP 8.2 installations.', correct: false }
      - { value: 'It replaces the Zend Engine completely.', correct: false }
    help: |
      'https://www.php.net/manual/en/features.jit.php'
  -
    question: 'What is the purpose of the `match` expression in PHP 8.0+?'
    answers:
      - { value: 'It is a new loop construct.', correct: false }
      - { value: 'It is a new control flow construct that provides stricter comparisons and can return a value, unlike `switch`.', correct: true }
      - { value: 'It is used for regular expression matching.', correct: false }
      - { value: 'It is a shorthand for `if/else` statements.', correct: false }
    help: |
      'https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'Which of the following is a valid way to define a named argument when calling a function in PHP 8.0+?'
    answers:
      - { value: 'myFunction(name: "Alice");', correct: true }
      - { value: 'myFunction("Alice", name);', correct: false }
      - { value: 'myFunction(name = "Alice");', correct: false }
      - { value: 'myFunction(param_name: "Alice");', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments'
  -
    question: 'What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.1+?'
    answers:
      - { value: 'It indicates that a function''s return type will change in a future PHP version, suppressing deprecation warnings for incompatible return types in inherited methods.', correct: true }
      - { value: 'It enforces a specific return type for a function.', correct: false }
      - { value: 'It allows a function to return multiple types.', correct: false }
      - { value: 'It defines a default return value for a function.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.returntypewillchange'
  -
    question: 'Which of the following is a new feature in PHP 8.1 related to class properties?'
    answers:
      - { value: 'Readonly properties', correct: true }
      - { value: 'Static properties', correct: false }
      - { value: 'Abstract properties', correct: false }
      - { value: 'Private properties', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'What is the purpose of the `#[Pure]` attribute (from attributes RFC, not built-in PHP, but commonly used by static analyzers)?'
    answers:
      - { value: 'It indicates that a function has no side effects and its output depends only on its inputs.', correct: true }
      - { value: 'It indicates that a function is purely mathematical.', correct: false }
      - { value: 'It indicates that a function is thread-safe.', correct: false }
      - { value: 'It indicates that a function is deprecated.', correct: false }
    help: |
      'https://php.watch/articles/php-attributes#pure'
  -
    question: 'Which of the following is a valid way to define a constructor in PHP 8.2?'
    answers:
      - { value: 'function __construct() {}', correct: true }
      - { value: 'public function __construct() {}', correct: true }
      - { value: 'private function __construct() {}', correct: true }
      - { value: 'static function __construct() {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php'
  -
    question: 'What is the purpose of the `#[Override]` attribute in PHP 8.3 (though the question is for 8.2, it''s good to know upcoming features)?'
    answers:
      - { value: 'It explicitly marks a method as overriding a parent method, causing a compile-time error if it does not.', correct: true }
      - { value: 'It prevents a method from being overridden.', correct: false }
      - { value: 'It allows a method to be overridden even if it is `final`.', correct: false }
      - { value: 'It redefines a method from an interface.', correct: false }
    help: |
      'https://wiki.php.net/rfc/override_attribute'
  -
    question: 'Which of the following is a valid way to define a constant in an enum in PHP 8.1+?'
    answers:
      - { value: 'const MY_ENUM_CONST = "value";', correct: true }
      - { value: 'public const MY_ENUM_CONST = "value";', correct: true }
      - { value: 'define("MY_ENUM_CONST", "value");', correct: false }
      - { value: 'static MY_ENUM_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.enumerations.php#language.enumerations.constants'
  -
    question: 'What is the purpose of the `WeakMap` class in PHP 8.0+?'
    answers:
      - { value: 'It allows objects to be used as keys, but unlike `SplObjectStorage`, it does not prevent the garbage collector from collecting the key objects if they are no longer referenced elsewhere.', correct: true }
      - { value: 'It stores key-value pairs where both keys and values are weak references.', correct: false }
      - { value: 'It is a map that can only store weak references to objects.', correct: false }
      - { value: 'It is a map that stores only primitive types.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.weakmap.php'
  -
    question: 'Which of the following is a valid way to define a `__construct` method with promoted properties in PHP 8.0+?'
    answers:
      - { value: 'class User { public function __construct(public string $name, private int $age) {} }', correct: true }
      - { value: 'class User { public string $name; private int $age; public function __construct($name, $age) { $this->name = $name; $this->age = $age; } }', correct: false }
      - { value: 'class User { public function __construct(string $name, int $age) { $this->name = $name; $this->age = $age; } }', correct: false }
      - { value: 'class User { public function __construct(public $name, private $age) {} }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion'
  -
    question: 'What is the purpose of the `#[NoReturn]` attribute in PHP 8.1+?'
    answers:
      - { value: 'It indicates that a function will never return, either by throwing an exception or terminating the script.', correct: true }
      - { value: 'It prevents a function from returning any value.', correct: false }
      - { value: 'It ensures a function always returns `null`.', correct: false }
      - { value: 'It indicates that a function is a generator.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.noreturn'
  -
    question: 'Which of the following is a valid way to declare a DNF (Disjunctive Normal Form) type in PHP 8.2?'
    answers:
      - { value: 'function foo((A&B)|null $param) {}', correct: true }
      - { value: 'function foo(A&B|null $param) {}', correct: false }
      - { value: 'function foo(A and B or null $param) {}', correct: false }
      - { value: 'function foo(A, B, null $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.dnf'
  -
    question: 'What is the output of the following code?
```php
function greet(string $name): string {
    return "Hello, " . $name;
}
echo greet("World");
```'
    answers:
      - { value: 'Hello, World', correct: true }
      - { value: 'Hello, World!', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'Which of the following is a valid way to define a private constant in a class in PHP 8.2?'
    answers:
      - { value: 'private const MY_CONST = "value";', correct: true }
      - { value: 'const private MY_CONST = "value";', correct: false }
      - { value: 'define("MY_CONST", "value", true);', correct: false }
      - { value: 'static private const MY_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.constants.php'
  -
    question: 'What is the purpose of the `__serialize()` and `__unserialize()` magic methods (introduced in PHP 7.4)?'
    answers:
      - { value: 'They replace `__sleep()` and `__wakeup()` for object serialization/unserialization, offering more control and better handling of private/protected properties.', correct: true }
      - { value: 'They are used for JSON serialization/deserialization.', correct: false }
      - { value: 'They are used for XML serialization/deserialization.', correct: false }
      - { value: 'They are used for database serialization/deserialization.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.serialize'
  -
    question: 'Which of the following is true about `match` expression compared to `switch` statement?'
    answers:
      - { value: '`match` uses loose comparison (==) while `switch` uses strict comparison (===).', correct: false }
      - { value: '`match` uses strict comparison (===) while `switch` uses loose comparison (==).', correct: true }
      - { value: '`match` requires `break` statements, while `switch` does not.', correct: false }
      - { value: '`match` cannot return a value, while `switch` can.', correct: false }
    help: |
      'https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'What is the purpose of the `str_contains()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string starts with a specific substring.', correct: false }
      - { value: 'To check if a string ends with a specific substring.', correct: false }
      - { value: 'To check if a string contains a specific substring.', correct: true }
      - { value: 'To replace a substring within a string.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-contains.php'
  -
    question: 'What is the purpose of the `str_starts_with()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string contains a specific substring.', correct: false }
      - { value: 'To check if a string starts with a specific substring.', correct: true }
      - { value: 'To check if a string ends with a specific substring.', correct: false }
      - { value: 'To find the first occurrence of a substring.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-starts-with.php'
  -
    question: 'What is the purpose of the `str_ends_with()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string contains a specific substring.', correct: false }
      - { value: 'To check if a string starts with a specific substring.', correct: false }
      - { value: 'To check if a string ends with a specific substring.', correct: true }
      - { value: 'To find the last occurrence of a substring.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-ends-with.php'
  -
    question: 'Which of the following is a valid way to define a function with a return type declaration of `mixed` (PHP 8.0+)?'
    answers:
      - { value: 'function foo(): mixed {}', correct: true }
      - { value: 'function foo(): any {}', correct: false }
      - { value: 'function foo(): * {}', correct: false }
      - { value: 'function foo(): dynamic {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.mixed'
  -
    question: 'What is the purpose of the `get_debug_type()` function (PHP 8.0+)?'
    answers:
      - { value: 'It returns the type of a variable, similar to `gettype()`, but provides more precise names for objects and resources.', correct: true }
      - { value: 'It returns the memory address of a variable.', correct: false }
      - { value: 'It returns the size of a variable in bytes.', correct: false }
      - { value: 'It returns the debug information of a variable.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.get-debug-type.php'
  -
    question: 'Which of the following is a valid way to define a class that implements multiple interfaces?'
    answers:
      - { value: 'class MyClass implements InterfaceA, InterfaceB {}', correct: true }
      - { value: 'class MyClass implements InterfaceA and InterfaceB {}', correct: false }
      - { value: 'class MyClass implements InterfaceA implements InterfaceB {}', correct: false }
      - { value: 'class MyClass implements [InterfaceA, InterfaceB] {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.implementing'
  -
    question: 'What is the purpose of the `static` keyword when used in a method within a class (late static binding context)?'
    answers:
      - { value: 'It refers to the class in which the method was defined.', correct: false }
      - { value: 'It refers to the class that was called at runtime.', correct: true }
      - { value: 'It refers to the parent class.', correct: false }
      - { value: 'It refers to the current object instance.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
  -
    question: 'Which of the following is a valid way to define a function that accepts a nullable type in PHP 7.1+?'
    answers:
      - { value: 'function foo(?string $param) {}', correct: true }
      - { value: 'function foo(string|null $param) {}', correct: true }
      - { value: 'function foo(string? $param) {}', correct: false }
      - { value: 'function foo(string or null $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable'
  -
    question: 'What is the purpose of the `WeakReference` class in PHP 7.4+?'
    answers:
      - { value: 'It allows you to hold a reference to an object without preventing the object from being garbage collected.', correct: true }
      - { value: 'It creates a strong reference to an object.', correct: false }
      - { value: 'It is used for serialization of objects.', correct: false }
      - { value: 'It is used to check if an object is still in memory.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.weakreference.php'
  -
    question: 'Which of the following is a valid way to define a function that returns `never` (PHP 8.1+)?'
    answers:
      - { value: 'function terminate(): never { exit(); }', correct: true }
      - { value: 'function terminate(): void { exit(); }', correct: false }
      - { value: 'function terminate(): null { exit(); }', correct: false }
      - { value: 'function terminate(): bool { exit(); }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never'
  -
    question: 'What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?'
    answers:
      - { value: 'It explicitly allows dynamic properties on a class, suppressing the deprecation warning that would otherwise be issued when assigning to an undeclared property.', correct: true }
      - { value: 'It makes all properties of a class dynamic.', correct: false }
      - { value: 'It prevents dynamic properties from being created.', correct: false }
      - { value: 'It enables a JIT compiler for dynamic properties.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.allowdynamicproperties'
  -
    question: 'Which of the following is a valid way to define a function with a variadic argument in PHP?'
    answers:
      - { value: 'function sum(...$numbers) {}', correct: true }
      - { value: 'function sum($numbers...) {}', correct: false }
      - { value: 'function sum(array $numbers) {}', correct: false }
      - { value: 'function sum(params $numbers) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.variable-arg-list.php'
  -
    question: 'What is the purpose of the `array_is_list()` function (PHP 8.1+)?'
    answers:
      - { value: 'It checks if an array is a list (i.e., its keys are 0-indexed and sequential).', correct: true }
      - { value: 'It checks if an array contains only numeric values.', correct: false }
      - { value: 'It checks if an array is empty.', correct: false }
      - { value: 'It converts an associative array to a list.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.array-is-list.php'
  -
    question: 'Which of the following is a valid way to define a function that accepts a `string` or `int` type?'
    answers:
      - { value: 'function foo(string|int $param) {}', correct: true }
      - { value: 'function foo(string or int $param) {}', correct: false }
      - { value: 'function foo(string, int $param) {}', correct: false }
      - { value: 'function foo(string & int $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union'
  -
    question: 'What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.1+?'
    answers:
      - { value: 'It indicates that a function''s return type will change in a future PHP version, suppressing deprecation warnings for incompatible return types in inherited methods.', correct: true }
      - { value: 'It enforces a specific return type for a function.', correct: false }
      - { value: 'It allows a function to return multiple types.', correct: false }
      - { value: 'It defines a default return value for a function.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.returntypewillchange'
  -
    question: 'Which of the following is a new feature in PHP 8.1 related to class properties?'
    answers:
      - { value: 'Readonly properties', correct: true }
      - { value: 'Static properties', correct: false }
      - { value: 'Abstract properties', correct: false }
      - { value: 'Private properties', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'What is the purpose of the `#[Pure]` attribute (from attributes RFC, not built-in PHP, but commonly used by static analyzers)?'
    answers:
      - { value: 'It indicates that a function has no side effects and its output depends only on its inputs.', correct: true }
      - { value: 'It indicates that a function is purely mathematical.', correct: false }
      - { value: 'It indicates that a function is thread-safe.', correct: false }
      - { value: 'It indicates that a function is deprecated.', correct: false }
    help: |
      'https://php.watch/articles/php-attributes#pure'
  -
    question: 'Which of the following is a valid way to define a constructor in PHP 8.2?'
    answers:
      - { value: 'function __construct() {}', correct: true }
      - { value: 'public function __construct() {}', correct: true }
      - { value: 'private function __construct() {}', correct: true }
      - { value: 'static function __construct() {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php'
  -
    question: 'What is the purpose of the `#[Override]` attribute in PHP 8.3 (though the question is for 8.2, it''s good to know upcoming features)?'
    answers:
      - { value: 'It explicitly marks a method as overriding a parent method, causing a compile-time error if it does not.', correct: true }
      - { value: 'It prevents a method from being overridden.', correct: false }
      - { value: 'It allows a method to be overridden even if it is `final`.', correct: false }
      - { value: 'It redefines a method from an interface.', correct: false }
    help: |
      'https://wiki.php.net/rfc/override_attribute'
  -
    question: 'Which of the following is a valid way to define a constant in an enum in PHP 8.1+?'
    answers:
      - { value: 'const MY_ENUM_CONST = "value";', correct: true }
      - { value: 'public const MY_ENUM_CONST = "value";', correct: true }
      - { value: 'define("MY_ENUM_CONST", "value");', correct: false }
      - { value: 'static MY_ENUM_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.enumerations.php#language.enumerations.constants'
  -
    question: 'What is the purpose of the `WeakMap` class in PHP 8.0+?'
    answers:
      - { value: 'It allows objects to be used as keys, but unlike `SplObjectStorage`, it does not prevent the garbage collector from collecting the key objects if they are no longer referenced elsewhere.', correct: true }
      - { value: 'It stores key-value pairs where both keys and values are weak references.', correct: false }
      - { value: 'It is a map that can only store weak references to objects.', correct: false }
      - { value: 'It is a map that stores only primitive types.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.weakmap.php'
  -
    question: 'Which of the following is a valid way to define a `__construct` method with promoted properties in PHP 8.0+?'
    answers:
      - { value: 'class User { public function __construct(public string $name, private int $age) {} }', correct: true }
      - { value: 'class User { public string $name; private int $age; public function __construct($name, $age) { $this->name = $name; $this->age = $age; } }', correct: false }
      - { value: 'class User { public function __construct(string $name, int $age) { $this->name = $name; $this->age = $age; } }', correct: false }
      - { value: 'class User { public function __construct(public $name, private $age) {} }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion'
  -
    question: 'What is the purpose of the `#[NoReturn]` attribute in PHP 8.1+?'
    answers:
      - { value: 'It indicates that a function will never return, either by throwing an exception or terminating the script.', correct: true }
      - { value: 'It prevents a function from returning any value.', correct: false }
      - { value: 'It ensures a function always returns `null`.', correct: false }
      - { value: 'It indicates that a function is a generator.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.noreturn'
  -
    question: 'Which of the following is a valid way to declare a DNF (Disjunctive Normal Form) type in PHP 8.2?'
    answers:
      - { value: 'function foo((A&B)|null $param) {}', correct: true }
      - { value: 'function foo(A&B|null $param) {}', correct: false }
      - { value: 'function foo(A and B or null $param) {}', correct: false }
      - { value: 'function foo(A, B, null $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.dnf'
  -
    question: 'What is the output of the following code?
```php
function greet(string $name): string {
    return "Hello, " . $name;
}
echo greet("World");
```'
    answers:
      - { value: 'Hello, World', correct: true }
      - { value: 'Hello, World!', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'Which of the following is a valid way to define a private constant in a class in PHP 8.2?'
    answers:
      - { value: 'private const MY_CONST = "value";', correct: true }
      - { value: 'const private MY_CONST = "value";', correct: false }
      - { value: 'define("MY_CONST", "value", true);', correct: false }
      - { value: 'static private const MY_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.constants.php'
  -
    question: 'What is the purpose of the `__serialize()` and `__unserialize()` magic methods (introduced in PHP 7.4)?'
    answers:
      - { value: 'They replace `__sleep()` and `__wakeup()` for object serialization/unserialization, offering more control and better handling of private/protected properties.', correct: true }
      - { value: 'They are used for JSON serialization/deserialization.', correct: false }
      - { value: 'They are used for XML serialization/deserialization.', correct: false }
      - { value: 'They are used for database serialization/deserialization.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.serialize'
  -
    question: 'Which of the following is true about `match` expression compared to `switch` statement?'
    answers:
      - { value: '`match` uses loose comparison (==) while `switch` uses strict comparison (===).', correct: false }
      - { value: '`match` uses strict comparison (===) while `switch` uses loose comparison (==).', correct: true }
      - { value: '`match` requires `break` statements, while `switch` does not.', correct: false }
      - { value: '`match` cannot return a value, while `switch` can.', correct: false }
    help: |
      'https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'What is the purpose of the `str_contains()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string starts with a specific substring.', correct: false }
      - { value: 'To check if a string ends with a specific substring.', correct: false }
      - { value: 'To check if a string contains a specific substring.', correct: true }
      - { value: 'To replace a substring within a string.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-contains.php'
  -
    question: 'What is the purpose of the `str_starts_with()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string contains a specific substring.', correct: false }
      - { value: 'To check if a string starts with a specific substring.', correct: true }
      - { value: 'To check if a string ends with a specific substring.', correct: false }
      - { value: 'To find the first occurrence of a substring.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-starts-with.php'
  -
    question: 'What is the purpose of the `str_ends_with()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string contains a specific substring.', correct: false }
      - { value: 'To check if a string starts with a specific substring.', correct: false }
      - { value: 'To check if a string ends with a specific substring.', correct: true }
      - { value: 'To find the last occurrence of a substring.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-ends-with.php'
  -
    question: 'Which of the following is a valid way to define a function with a return type declaration of `mixed` (PHP 8.0+)?'
    answers:
      - { value: 'function foo(): mixed {}', correct: true }
      - { value: 'function foo(): any {}', correct: false }
      - { value: 'function foo(): * {}', correct: false }
      - { value: 'function foo(): dynamic {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.mixed'
  -
    question: 'What is the purpose of the `get_debug_type()` function (PHP 8.0+)?'
    answers:
      - { value: 'It returns the type of a variable, similar to `gettype()`, but provides more precise names for objects and resources.', correct: true }
      - { value: 'It returns the memory address of a variable.', correct: false }
      - { value: 'It returns the size of a variable in bytes.', correct: false }
      - { value: 'It returns the debug information of a variable.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.get-debug-type.php'
  -
    question: 'Which of the following is a valid way to define a class that implements multiple interfaces?'
    answers:
      - { value: 'class MyClass implements InterfaceA, InterfaceB {}', correct: true }
      - { value: 'class MyClass implements InterfaceA and InterfaceB {}', correct: false }
      - { value: 'class MyClass implements InterfaceA implements InterfaceB {}', correct: false }
      - { value: 'class MyClass implements [InterfaceA, InterfaceB] {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.implementing'
  -
    question: 'What is the purpose of the `static` keyword when used in a method within a class (late static binding context)?'
    answers:
      - { value: 'It refers to the class in which the method was defined.', correct: false }
      - { value: 'It refers to the class that was called at runtime.', correct: true }
      - { value: 'It refers to the parent class.', correct: false }
      - { value: 'It refers to the current object instance.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
  -
    question: 'Which of the following is a valid way to define a function that accepts a nullable type in PHP 7.1+?'
    answers:
      - { value: 'function foo(?string $param) {}', correct: true }
      - { value: 'function foo(string|null $param) {}', correct: true }
      - { value: 'function foo(string? $param) {}', correct: false }
      - { value: 'function foo(string or null $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable'
  -
    question: 'What is the purpose of the `WeakReference` class in PHP 7.4+?'
    answers:
      - { value: 'It allows you to hold a reference to an object without preventing the object from being garbage collected.', correct: true }
      - { value: 'It creates a strong reference to an object.', correct: false }
      - { value: 'It is used for serialization of objects.', correct: false }
      - { value: 'It is used to check if an object is still in memory.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.weakreference.php'
  -
    question: 'Which of the following is a valid way to define a function that returns `never` (PHP 8.1+)?'
    answers:
      - { value: 'function terminate(): never { exit(); }', correct: true }
      - { value: 'function terminate(): void { exit(); }', correct: false }
      - { value: 'function terminate(): null { exit(); }', correct: false }
      - { value: 'function terminate(): bool { exit(); }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never'
  -
    question: 'What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?'
    answers:
      - { value: 'It explicitly allows dynamic properties on a class, suppressing the deprecation warning that would otherwise be issued when assigning to an undeclared property.', correct: true }
      - { value: 'It makes all properties of a class dynamic.', correct: false }
      - { value: 'It prevents dynamic properties from being created.', correct: false }
      - { value: 'It enables a JIT compiler for dynamic properties.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.allowdynamicproperties'
  -
    question: 'Which of the following is a valid way to define a function with a variadic argument in PHP?'
    answers:
      - { value: 'function sum(...$numbers) {}', correct: true }
      - { value: 'function sum($numbers...) {}', correct: false }
      - { value: 'function sum(array $numbers) {}', correct: false }
      - { value: 'function sum(params $numbers) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.variable-arg-list.php'
  -
    question: 'What is the purpose of the `array_is_list()` function (PHP 8.1+)?'
    answers:
      - { value: 'It checks if an array is a list (i.e., its keys are 0-indexed and sequential).', correct: true }
      - { value: 'It checks if an array contains only numeric values.', correct: false }
      - { value: 'It checks if an array is empty.', correct: false }
      - { value: 'It converts an associative array to a list.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.array-is-list.php'
  -
    question: 'Which of the following is a valid way to define a function that accepts a `string` or `int` type?'
    answers:
      - { value: 'function foo(string|int $param) {}', correct: true }
      - { value: 'function foo(string or int $param) {}', correct: false }
      - { value: 'function foo(string, int $param) {}', correct: false }
      - { value: 'function foo(string & int $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union'
  -
    question: 'What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.1+?'
    answers:
      - { value: 'It indicates that a function''s return type will change in a future PHP version, suppressing deprecation warnings for incompatible return types in inherited methods.', correct: true }
      - { value: 'It enforces a specific return type for a function.', correct: false }
      - { value: 'It allows a function to return multiple types.', correct: false }
      - { value: 'It defines a default return value for a function.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.returntypewillchange'
  -
    question: 'Which of the following is a new feature in PHP 8.1 related to class properties?'
    answers:
      - { value: 'Readonly properties', correct: true }
      - { value: 'Static properties', correct: false }
      - { value: 'Abstract properties', correct: false }
      - { value: 'Private properties', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'What is the purpose of the `#[Pure]` attribute (from attributes RFC, not built-in PHP, but commonly used by static analyzers)?'
    answers:
      - { value: 'It indicates that a function has no side effects and its output depends only on its inputs.', correct: true }
      - { value: 'It indicates that a function is purely mathematical.', correct: false }
      - { value: 'It indicates that a function is thread-safe.', correct: false }
      - { value: 'It indicates that a function is deprecated.', correct: false }
    help: |
      'https://php.watch/articles/php-attributes#pure'
  -
    question: 'Which of the following is a valid way to define a constructor in PHP 8.2?'
    answers:
      - { value: 'function __construct() {}', correct: true }
      - { value: 'public function __construct() {}', correct: true }
      - { value: 'private function __construct() {}', correct: true }
      - { value: 'static function __construct() {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php'
  -
    question: 'What is the purpose of the `#[Override]` attribute in PHP 8.3 (though the question is for 8.2, it''s good to know upcoming features)?'
    answers:
      - { value: 'It explicitly marks a method as overriding a parent method, causing a compile-time error if it does not.', correct: true }
      - { value: 'It prevents a method from being overridden.', correct: false }
      - { value: 'It allows a method to be overridden even if it is `final`.', correct: false }
      - { value: 'It redefines a method from an interface.', correct: false }
    help: |
      'https://wiki.php.net/rfc/override_attribute'
  -
    question: 'Which of the following is a valid way to define a constant in an enum in PHP 8.1+?'
    answers:
      - { value: 'const MY_ENUM_CONST = "value";', correct: true }
      - { value: 'public const MY_ENUM_CONST = "value";', correct: true }
      - { value: 'define("MY_ENUM_CONST", "value");', correct: false }
      - { value: 'static MY_ENUM_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.enumerations.php#language.enumerations.constants'
  -
    question: 'What is the purpose of the `WeakMap` class in PHP 8.0+?'
    answers:
      - { value: 'It allows objects to be used as keys, but unlike `SplObjectStorage`, it does not prevent the garbage collector from collecting the key objects if they are no longer referenced elsewhere.', correct: true }
      - { value: 'It stores key-value pairs where both keys and values are weak references.', correct: false }
      - { value: 'It is a map that can only store weak references to objects.', correct: false }
      - { value: 'It is a map that stores only primitive types.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.weakmap.php'
  -
    question: 'Which of the following is a valid way to define a `__construct` method with promoted properties in PHP 8.0+?'
    answers:
      - { value: 'class User { public function __construct(public string $name, private int $age) {} }', correct: true }
      - { value: 'class User { public string $name; private int $age; public function __construct($name, $age) { $this->name = $name; $this->age = $age; } }', correct: false }
      - { value: 'class User { public function __construct(string $name, int $age) { $this->name = $name; $this->age = $age; } }', correct: false }
      - { value: 'class User { public function __construct(public $name, private $age) {} }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion'
  -
    question: 'What is the purpose of the `#[NoReturn]` attribute in PHP 8.1+?'
    answers:
      - { value: 'It indicates that a function will never return, either by throwing an exception or terminating the script.', correct: true }
      - { value: 'It prevents a function from returning any value.', correct: false }
      - { value: 'It ensures a function always returns `null`.', correct: false }
      - { value: 'It indicates that a function is a generator.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.noreturn'
  -
    question: 'Which of the following is a valid way to declare a DNF (Disjunctive Normal Form) type in PHP 8.2?'
    answers:
      - { value: 'function foo((A&B)|null $param) {}', correct: true }
      - { value: 'function foo(A&B|null $param) {}', correct: false }
      - { value: 'function foo(A and B or null $param) {}', correct: false }
      - { value: 'function foo(A, B, null $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.dnf'
  -
    question: 'What is the output of the following code?
```php
function greet(string $name): string {
    return "Hello, " . $name;
}
echo greet("World");
```'
    answers:
      - { value: 'Hello, World', correct: true }
      - { value: 'Hello, World!', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'Which of the following is a valid way to define a private constant in a class in PHP 8.2?'
    answers:
      - { value: 'private const MY_CONST = "value";', correct: true }
      - { value: 'const private MY_CONST = "value";', correct: false }
      - { value: 'define("MY_CONST", "value", true);', correct: false }
      - { value: 'static private const MY_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.constants.php'
  -
    question: 'What is the purpose of the `__serialize()` and `__unserialize()` magic methods (introduced in PHP 7.4)?'
    answers:
      - { value: 'They replace `__sleep()` and `__wakeup()` for object serialization/unserialization, offering more control and better handling of private/protected properties.', correct: true }
      - { value: 'They are used for JSON serialization/deserialization.', correct: false }
      - { value: 'They are used for XML serialization/deserialization.', correct: false }
      - { value: 'They are used for database serialization/deserialization.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.serialize'
  -
    question: 'Which of the following is true about `match` expression compared to `switch` statement?'
    answers:
      - { value: '`match` uses loose comparison (==) while `switch` uses strict comparison (===).', correct: false }
      - { value: '`match` uses strict comparison (===) while `switch` uses loose comparison (==).', correct: true }
      - { value: '`match` requires `break` statements, while `switch` does not.', correct: false }
      - { value: '`match` cannot return a value, while `switch` can.', correct: false }
    help: |
      'https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'What is the purpose of the `str_contains()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string starts with a specific substring.', correct: false }
      - { value: 'To check if a string ends with a specific substring.', correct: false }
      - { value: 'To check if a string contains a specific substring.', correct: true }
      - { value: 'To replace a substring within a string.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-contains.php'
  -
    question: 'What is the purpose of the `str_starts_with()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string contains a specific substring.', correct: false }
      - { value: 'To check if a string starts with a specific substring.', correct: true }
      - { value: 'To check if a string ends with a specific substring.', correct: false }
      - { value: 'To find the first occurrence of a substring.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-starts-with.php'
  -
    question: 'What is the purpose of the `str_ends_with()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string contains a specific substring.', correct: false }
      - { value: 'To check if a string starts with a specific substring.', correct: false }
      - { value: 'To check if a string ends with a specific substring.', correct: true }
      - { value: 'To find the last occurrence of a substring.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-ends-with.php'
  -
    question: 'Which of the following is a valid way to define a function with a return type declaration of `mixed` (PHP 8.0+)?'
    answers:
      - { value: 'function foo(): mixed {}', correct: true }
      - { value: 'function foo(): any {}', correct: false }
      - { value: 'function foo(): * {}', correct: false }
      - { value: 'function foo(): dynamic {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.mixed'
  -
    question: 'What is the purpose of the `get_debug_type()` function (PHP 8.0+)?'
    answers:
      - { value: 'It returns the type of a variable, similar to `gettype()`, but provides more precise names for objects and resources.', correct: true }
      - { value: 'It returns the memory address of a variable.', correct: false }
      - { value: 'It returns the size of a variable in bytes.', correct: false }
      - { value: 'It returns the debug information of a variable.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.get-debug-type.php'
  -
    question: 'Which of the following is a valid way to define a class that implements multiple interfaces?'
    answers:
      - { value: 'class MyClass implements InterfaceA, InterfaceB {}', correct: true }
      - { value: 'class MyClass implements InterfaceA and InterfaceB {}', correct: false }
      - { value: 'class MyClass implements InterfaceA implements InterfaceB {}', correct: false }
      - { value: 'class MyClass implements [InterfaceA, InterfaceB] {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.implementing'
  -
    question: 'What is the purpose of the `static` keyword when used in a method within a class (late static binding context)?'
    answers:
      - { value: 'It refers to the class in which the method was defined.', correct: false }
      - { value: 'It refers to the class that was called at runtime.', correct: true }
      - { value: 'It refers to the parent class.', correct: false }
      - { value: 'It refers to the current object instance.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
  -
    question: 'Which of the following is a valid way to define a function that accepts a nullable type in PHP 7.1+?'
    answers:
      - { value: 'function foo(?string $param) {}', correct: true }
      - { value: 'function foo(string|null $param) {}', correct: true }
      - { value: 'function foo(string? $param) {}', correct: false }
      - { value: 'function foo(string or null $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable'
  -
    question: 'What is the purpose of the `WeakReference` class in PHP 7.4+?'
    answers:
      - { value: 'It allows you to hold a reference to an object without preventing the object from being garbage collected.', correct: true }
      - { value: 'It creates a strong reference to an object.', correct: false }
      - { value: 'It is used for serialization of objects.', correct: false }
      - { value: 'It is used to check if an object is still in memory.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.weakreference.php'
  -
    question: 'Which of the following is a valid way to define a function that returns `never` (PHP 8.1+)?'
    answers:
      - { value: 'function terminate(): never { exit(); }', correct: true }
      - { value: 'function terminate(): void { exit(); }', correct: false }
      - { value: 'function terminate(): null { exit(); }', correct: false }
      - { value: 'function terminate(): bool { exit(); }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never'
  -
    question: 'What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?'
    answers:
      - { value: 'It explicitly allows dynamic properties on a class, suppressing the deprecation warning that would otherwise be issued when assigning to an undeclared property.', correct: true }
      - { value: 'It makes all properties of a class dynamic.', correct: false }
      - { value: 'It prevents dynamic properties from being created.', correct: false }
      - { value: 'It enables a JIT compiler for dynamic properties.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.allowdynamicproperties'
  -
    question: 'Which of the following is a valid way to define a function with a variadic argument in PHP?'
    answers:
      - { value: 'function sum(...$numbers) {}', correct: true }
      - { value: 'function sum($numbers...) {}', correct: false }
      - { value: 'function sum(array $numbers) {}', correct: false }
      - { value: 'function sum(params $numbers) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.variable-arg-list.php'
  -
    question: 'What is the purpose of the `array_is_list()` function (PHP 8.1+)?'
    answers:
      - { value: 'It checks if an array is a list (i.e., its keys are 0-indexed and sequential).', correct: true }
      - { value: 'It checks if an array contains only numeric values.', correct: false }
      - { value: 'It checks if an array is empty.', correct: false }
      - { value: 'It converts an associative array to a list.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.array-is-list.php'
  -
    question: 'Which of the following is a valid way to define a function that accepts a `string` or `int` type?'
    answers:
      - { value: 'function foo(string|int $param) {}', correct: true }
      - { value: 'function foo(string or int $param) {}', correct: false }
      - { value: 'function foo(string, int $param) {}', correct: false }
      - { value: 'function foo(string & int $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union'
  -
    question: 'What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.1+?'
    answers:
      - { value: 'It indicates that a function''s return type will change in a future PHP version, suppressing deprecation warnings for incompatible return types in inherited methods.', correct: true }
      - { value: 'It enforces a specific return type for a function.', correct: false }
      - { value: 'It allows a function to return multiple types.', correct: false }
      - { value: 'It defines a default return value for a function.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.returntypewillchange'
  -
    question: 'Which of the following is a new feature in PHP 8.1 related to class properties?'
    answers:
      - { value: 'Readonly properties', correct: true }
      - { value: 'Static properties', correct: false }
      - { value: 'Abstract properties', correct: false }
      - { value: 'Private properties', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'What is the purpose of the `#[Pure]` attribute (from attributes RFC, not built-in PHP, but commonly used by static analyzers)?'
    answers:
      - { value: 'It indicates that a function has no side effects and its output depends only on its inputs.', correct: true }
      - { value: 'It indicates that a function is purely mathematical.', correct: false }
      - { value: 'It indicates that a function is thread-safe.', correct: false }
      - { value: 'It indicates that a function is deprecated.', correct: false }
    help: |
      'https://php.watch/articles/php-attributes#pure'
  -
    question: 'Which of the following is a valid way to define a constructor in PHP 8.2?'
    answers:
      - { value: 'function __construct() {}', correct: true }
      - { value: 'public function __construct() {}', correct: true }
      - { value: 'private function __construct() {}', correct: true }
      - { value: 'static function __construct() {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php'
  -
    question: 'What is the purpose of the `#[Override]` attribute in PHP 8.3 (though the question is for 8.2, it''s good to know upcoming features)?'
    answers:
      - { value: 'It explicitly marks a method as overriding a parent method, causing a compile-time error if it does not.', correct: true }
      - { value: 'It prevents a method from being overridden.', correct: false }
      - { value: 'It allows a method to be overridden even if it is `final`.', correct: false }
      - { value: 'It redefines a method from an interface.', correct: false }
    help: |
      'https://wiki.php.net/rfc/override_attribute'
  -
    question: 'Which of the following is a valid way to define a constant in an enum in PHP 8.1+?'
    answers:
      - { value: 'const MY_ENUM_CONST = "value";', correct: true }
      - { value: 'public const MY_ENUM_CONST = "value";', correct: true }
      - { value: 'define("MY_ENUM_CONST", "value");', correct: false }
      - { value: 'static MY_ENUM_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.enumerations.php#language.enumerations.constants'
  -
    question: 'What is the purpose of the `WeakMap` class in PHP 8.0+?'
    answers:
      - { value: 'It allows objects to be used as keys, but unlike `SplObjectStorage`, it does not prevent the garbage collector from collecting the key objects if they are no longer referenced elsewhere.', correct: true }
      - { value: 'It stores key-value pairs where both keys and values are weak references.', correct: false }
      - { value: 'It is a map that can only store weak references to objects.', correct: false }
      - { value: 'It is a map that stores only primitive types.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.weakmap.php'
  -
    question: 'Which of the following is a valid way to define a `__construct` method with promoted properties in PHP 8.0+?'
    answers:
      - { value: 'class User { public function __construct(public string $name, private int $age) {} }', correct: true }
      - { value: 'class User { public string $name; private int $age; public function __construct($name, $age) { $this->name = $name; $this->age = $age; } }', correct: false }
      - { value: 'class User { public function __construct(string $name, int $age) { $this->name = $name; $this->age = $age; } }', correct: false }
      - { value: 'class User { public function __construct(public $name, private $age) {} }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion'
  -
    question: 'What is the purpose of the `#[NoReturn]` attribute in PHP 8.1+?'
    answers:
      - { value: 'It indicates that a function will never return, either by throwing an exception or terminating the script.', correct: true }
      - { value: 'It prevents a function from returning any value.', correct: false }
      - { value: 'It ensures a function always returns `null`.', correct: false }
      - { value: 'It indicates that a function is a generator.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.noreturn'
  -
    question: 'Which of the following is a valid way to declare a DNF (Disjunctive Normal Form) type in PHP 8.2?'
    answers:
      - { value: 'function foo((A&B)|null $param) {}', correct: true }
      - { value: 'function foo(A&B|null $param) {}', correct: false }
      - { value: 'function foo(A and B or null $param) {}', correct: false }
      - { value: 'function foo(A, B, null $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.dnf'
  -
    question: 'What is the output of the following code?
```php
function greet(string $name): string {
    return "Hello, " . $name;
}
echo greet("World");
```'
    answers:
      - { value: 'Hello, World', correct: true }
      - { value: 'Hello, World!', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'Which of the following is a valid way to define a private constant in a class in PHP 8.2?'
    answers:
      - { value: 'private const MY_CONST = "value";', correct: true }
      - { value: 'const private MY_CONST = "value";', correct: false }
      - { value: 'define("MY_CONST", "value", true);', correct: false }
      - { value: 'static private const MY_CONST = "value";', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.constants.php'
  -
    question: 'What is the purpose of the `__serialize()` and `__unserialize()` magic methods (introduced in PHP 7.4)?'
    answers:
      - { value: 'They replace `__sleep()` and `__wakeup()` for object serialization/unserialization, offering more control and better handling of private/protected properties.', correct: true }
      - { value: 'They are used for JSON serialization/deserialization.', correct: false }
      - { value: 'They are used for XML serialization/deserialization.', correct: false }
      - { value: 'They are used for database serialization/deserialization.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.magic.php#object.serialize'
  -
    question: 'Which of the following is true about `match` expression compared to `switch` statement?'
    answers:
      - { value: '`match` uses loose comparison (==) while `switch` uses strict comparison (===).', correct: false }
      - { value: '`match` uses strict comparison (===) while `switch` uses loose comparison (==).', correct: true }
      - { value: '`match` requires `break` statements, while `switch` does not.', correct: false }
      - { value: '`match` cannot return a value, while `switch` can.', correct: false }
    help: |
      'https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'What is the purpose of the `str_contains()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string starts with a specific substring.', correct: false }
      - { value: 'To check if a string ends with a specific substring.', correct: false }
      - { value: 'To check if a string contains a specific substring.', correct: true }
      - { value: 'To replace a substring within a string.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-contains.php'
  -
    question: 'What is the purpose of the `str_starts_with()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string contains a specific substring.', correct: false }
      - { value: 'To check if a string starts with a specific substring.', correct: true }
      - { value: 'To check if a string ends with a specific substring.', correct: false }
      - { value: 'To find the first occurrence of a substring.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-starts-with.php'
  -
    question: 'What is the purpose of the `str_ends_with()` function (PHP 8.0+)?'
    answers:
      - { value: 'To check if a string contains a specific substring.', correct: false }
      - { value: 'To check if a string starts with a specific substring.', correct: false }
      - { value: 'To check if a string ends with a specific substring.', correct: true }
      - { value: 'To find the last occurrence of a substring.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.str-ends-with.php'
  -
    question: 'Which of the following is a valid way to define a function with a return type declaration of `mixed` (PHP 8.0+)?'
    answers:
      - { value: 'function foo(): mixed {}', correct: true }
      - { value: 'function foo(): any {}', correct: false }
      - { value: 'function foo(): * {}', correct: false }
      - { value: 'function foo(): dynamic {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.mixed'
  -
    question: 'What is the purpose of the `get_debug_type()` function (PHP 8.0+)?'
    answers:
      - { value: 'It returns the type of a variable, similar to `gettype()`, but provides more precise names for objects and resources.', correct: true }
      - { value: 'It returns the memory address of a variable.', correct: false }
      - { value: 'It returns the size of a variable in bytes.', correct: false }
      - { value: 'It returns the debug information of a variable.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.get-debug-type.php'
  -
    question: 'Which of the following is a valid way to define a class that implements multiple interfaces?'
    answers:
      - { value: 'class MyClass implements InterfaceA, InterfaceB {}', correct: true }
      - { value: 'class MyClass implements InterfaceA and InterfaceB {}', correct: false }
      - { value: 'class MyClass implements InterfaceA implements InterfaceB {}', correct: false }
      - { value: 'class MyClass implements [InterfaceA, InterfaceB] {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.implementing'
  -
    question: 'What is the purpose of the `static` keyword when used in a method within a class (late static binding context)?'
    answers:
      - { value: 'It refers to the class in which the method was defined.', correct: false }
      - { value: 'It refers to the class that was called at runtime.', correct: true }
      - { value: 'It refers to the parent class.', correct: false }
      - { value: 'It refers to the current object instance.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
  -
    question: 'Which of the following is a valid way to define a function that accepts a nullable type in PHP 7.1+?'
    answers:
      - { value: 'function foo(?string $param) {}', correct: true }
      - { value: 'function foo(string|null $param) {}', correct: true }
      - { value: 'function foo(string? $param) {}', correct: false }
      - { value: 'function foo(string or null $param) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable'
  -
    question: 'What is the purpose of the `WeakReference` class in PHP 7.4+?'
    answers:
      - { value: 'It allows you to hold a reference to an object without preventing the object from being garbage collected.', correct: true }
      - { value: 'It creates a strong reference to an object.', correct: false }
      - { value: 'It is used for serialization of objects.', correct: false }
      - { value: 'It is used to check if an object is still in memory.', correct: false }
    help: |
      'https://www.php.net/manual/en/class.weakreference.php'
  -
    question: 'Which of the following is a valid way to define a function that returns `never` (PHP 8.1+)?'
    answers:
      - { value: 'function terminate(): never { exit(); }', correct: true }
      - { value: 'function terminate(): void { exit(); }', correct: false }
      - { value: 'function terminate(): null { exit(); }', correct: false }
      - { value: 'function terminate(): bool { exit(); }', correct: false }
    help: |
      'https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never'
  -
    question: 'What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?'
    answers:
      - { value: 'It explicitly allows dynamic properties on a class, suppressing the deprecation warning that would otherwise be issued when assigning to an undeclared property.', correct: true }
      - { value: 'It makes all properties of a class dynamic.', correct: false }
      - { value: 'It prevents dynamic properties from being created.', correct: false }
      - { value: 'It enables a JIT compiler for dynamic properties.', correct: false }
    help: |
      'https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.allowdynamicproperties'
  -
    question: 'Which of the following is a valid way to define a function with a variadic argument in PHP?'
    answers:
      - { value: 'function sum(...$numbers) {}', correct: true }
      - { value: 'function sum($numbers...) {}', correct: false }
      - { value: 'function sum(array $numbers) {}', correct: false }
      - { value: 'function sum(params $numbers) {}', correct: false }
    help: |
      'https://www.php.net/manual/en/functions.variable-arg-list.php'
  -
    question: 'What is the purpose of the `array_is_list()` function (PHP 8.1+)?'
    answers:
      - { value: 'It checks if an array is a list (i.e., its keys are 0-indexed and sequential).', correct: true }
      - { value: 'It checks if an array contains only numeric values.', correct: false }
      - { value: 'It checks if an array is empty.', correct: false }
      - { value: 'It converts an associative array to a list.', correct: false }
    help: |
      'https://www.php.net/manual/en/function.array-is-list.php'
```