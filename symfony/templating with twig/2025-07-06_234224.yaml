```yaml
category: Templating with Twig
questions:
  -
    question: 'Which of the following correctly embeds a controller into a Twig template to render its output?'
    answers:
      - { value: '{{ include(controller(''App\\Controller\\BlogController::latest'')) }}', correct: false }
      - { value: '{{ render(controller(''App\\Controller\\BlogController::latest'', {max: 3})) }}', correct: true }
      - { value: '{% render_controller ''App\\Controller\\BlogController::latest'' with {max: 3} %}', correct: false }
      - { value: '{{ embed(controller(''App\\Controller\\BlogController::latest'')) }}', correct: false }
    help: |
      The `render()` function is used to make a request to an internal URI or controller and return its result.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_3
  -
    question: 'What is the purpose of the `stopwatch` Twig tag?'
    answers:
      - { value: 'To pause template rendering for a specified duration.', correct: false }
      - { value: 'To measure the execution time and memory consumption of a block of code within a template, visible in the Symfony profiler.', correct: true }
      - { value: 'To stop the execution of the current template.', correct: false }
      - { value: 'To log messages to the Symfony profiler timeline.', correct: false }
    help: |
      The `stopwatch` tag is used for performance profiling within Twig templates.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_44
  -
    question: 'How can you set a custom default translation domain for a Twig template?'
    answers:
      - { value: '{% set_translation_domain ''blog'' %}', correct: false }
      - { value: '{% default_domain ''blog'' %}', correct: false }
      - { value: '{% trans_default_domain ''blog'' %}', correct: true }
      - { value: '{{ set_default_domain(''blog'') }}', correct: false }
    help: |
      The `trans_default_domain` tag sets the default translation domain for the current template.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_43
  -
    question: 'Which Twig filter is used to convert a string like "date_of_birth" into "Date of birth"?'
    answers:
      - { value: '{{ "date_of_birth"|capitalize }}', correct: false }
      - { value: '{{ "date_of_birth"|humanize }}', correct: true }
      - { value: '{{ "date_of_birth"|format_label }}', correct: false }
      - { value: '{{ "date_of_birth"|title }}', correct: false }
    help: |
      The `humanize` filter transforms a string into a more human-readable format.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_23
  -
    question: 'What is the correct way to generate a CSRF token in a Twig template for a form not managed by Symfony''s Form component?'
    answers:
      - { value: '{{ csrf_token() }}', correct: false }
      - { value: '{{ csrf_token(''my_form_intention'') }}', correct: true }
      - { value: '{{ form_csrf_token(''my_form_intention'') }}', correct: false }
      - { value: '{% csrf_token ''my_form_intention'' %}', correct: false }
    help: |
      The `csrf_token()` function generates a CSRF token for a given intention.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_7
  -
    question: 'How can you configure Twig to throw an exception when a non-existent variable, attribute, or method is accessed?'
    answers:
      - { value: 'Set `twig.strict_variables` to `true` in your configuration.', correct: true }
      - { value: 'Set `twig.debug` to `true` in your configuration.', correct: false }
      - { value: 'Enable the `strict_mode` option in the Twig environment.', correct: false }
      - { value: 'By default, Twig always throws an exception for non-existent variables.', correct: false }
    help: |
      The `strict_variables` option controls Twig's behavior regarding non-existent variables.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_15
  -
    question: 'Which of the following is the correct way to include another Twig template?'
    answers:
      - { value: '{% include ''_header.html.twig'' %}', correct: true }
      - { value: '{% import ''_header.html.twig'' %}', correct: false }
      - { value: '{% use ''_header.html.twig'' %}', correct: false }
      - { value: '{{ load ''_header.html.twig'' }}', correct: false }
    help: |
      The `include` tag is used to include a template and return the rendered content of that template.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the primary purpose of Twig''s auto-escaping feature?'
    answers:
      - { value: 'To automatically compress HTML output for faster loading.', correct: false }
      - { value: 'To prevent Cross-Site Scripting (XSS) attacks by escaping potentially malicious characters in output.', correct: true }
      - { value: 'To automatically format code snippets within templates.', correct: false }
      - { value: 'To convert all output to plain text, removing HTML tags.', correct: false }
    help: |
      Auto-escaping is a security feature that automatically escapes variables to prevent XSS attacks.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Consider the following Twig template structure. What is the relationship between `base.html.twig` and `index.html.twig`?'
    answers:
      - { value: '`index.html.twig` extends `base.html.twig`.', correct: true }
      - { value: '`base.html.twig` includes `index.html.twig`.', correct: false }
      - { value: 'They are independent templates with no relationship.', correct: false }
      - { value: '`index.html.twig` imports macros from `base.html.twig`.', correct: false }
    help: |
      Template inheritance in Twig uses the `extends` tag.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
    question: |
      ```twig
      {# base.html.twig #}
      <!DOCTYPE html>
      <html>
          <head>
              <title>{% block title %}Default Title{% endblock %}</title>
          </head>
          <body>
              {% block content %}{% endblock %}
          </body>
      </html>

      {# index.html.twig #}
      {% extends 'base.html.twig' %}

      {% block title %}Home Page{% endblock %}

      {% block content %}
          <h1>Welcome!</h1>
      {% endblock %}
      ```
  -
    question: 'Which Twig function would you use to generate an absolute URL from a relative path?'
    answers:
      - { value: '{{ path(path) }}', correct: false }
      - { value: '{{ url(path) }}', correct: false }
      - { value: '{{ absolute_url(path) }}', correct: true }
      - { value: '{{ asset(path) }}', correct: false }
    help: |
      The `absolute_url()` function returns the absolute URL (with scheme and host) from a given relative path.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_14
  -
    question: 'How can you access a global variable, such as a service named `uuid`, and call a method `generate` on it within a Twig template?'
    answers:
      - { value: '{{ uuid.generate() }}', correct: false }
      - { value: '{{ uuid.generate }}', correct: true }
      - { value: '{{ get_service(''uuid'').generate() }}', correct: false }
      - { value: '{{ service(''uuid'').generate }}', correct: false }
    help: |
      Global variables (services) can be accessed directly in Twig templates, and their methods can be called using dot notation.
      https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#_snippet_20
  -
    question: 'Which Twig filter is used to convert textual emoji representations (e.g., `:wave:`) into actual emoji characters?'
    answers:
      - { value: '{{ text|emoji }}', correct: false }
      - { value: '{{ text|emojify }}', correct: true }
      - { value: '{{ text|to_emoji }}', correct: false }
      - { value: '{{ text|parse_emoji }}', correct: false }
    help: |
      The `emojify` filter converts textual emoji representations into actual emoji characters.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_40
  -
    question: 'Which of the following is the correct way to define additional directories for Twig templates with a namespace in `config/packages/twig.yaml`?'
    answers:
      - { value: 'twig: paths: email/default/templates: ~ backend/templates: admin', correct: true }
      - { value: 'twig: directories: email/default/templates: ~ backend/templates: admin', correct: false }
      - { value: 'twig: template_paths: email/default/templates: ~ backend/templates: admin', correct: false }
      - { value: 'twig: namespaces: admin: backend/templates default: email/default/templates', correct: false }
    help: |
      The `paths` configuration option in `twig.yaml` is used to define additional template directories, including namespaces.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_14
  -
    question: 'What is the default value for the `cache` option in Twig configuration, and what does `false` signify?'
    answers:
      - { value: 'Default is `false`; `false` disables caching.', correct: false }
      - { value: 'Default is `%kernel.cache_dir%/twig`; `false` disables caching.', correct: false }
      - { value: 'Default is `true` (Symfony''s default cache location); `false` disables compilation (not recommended).', correct: true }
      - { value: 'Default is `true`; `false` enables in-memory caching only.', correct: false }
    help: |
      The `cache` option configures the directory for compiled Twig templates. `true` uses the default Symfony cache location, and `false` disables compilation.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_5
  -
    question: 'Which of the following is used to display a variable in Twig?'
    answers:
      - { value: '{% variable %}', correct: false }
      - { value: '{{ variable }}', correct: true }
      - { value: '<?php echo $variable; ?>', correct: false }
      - { value: '{$ variable $}', correct: false }
    help: |
      Twig uses `{{ ... }}` for printing the content of variables or expressions.
      https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#_snippet_1
  -
    question: 'How do you add a comment in a Twig template that will not be rendered in the final HTML output?'
    answers:
      - { value: '<!-- This is a comment -->', correct: false }
      - { value: '// This is a comment', correct: false }
      - { value: '{# This is a comment #}', correct: true }
      - { value: '/* This is a comment */', correct: false }
    help: |
      Twig uses `{# ... #}` for comments that are removed during compilation.
      https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#_snippet_1
  -
    question: 'Which Twig tag is used for conditional logic (if/else statements)?'
    answers:
      - { value: '{% if ... %}', correct: true }
      - { value: '{{ if ... }}', correct: false }
      - { value: '{? if ... ?}', correct: false }
      - { value: '<if ...>', correct: false }
    help: |
      Twig uses `{% if ... %}` for conditional statements.
      https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#_snippet_1
  -
    question: 'Which Twig tag is used for iterating over arrays or objects?'
    answers:
      - { value: '{% each ... %}', correct: false }
      - { value: '{% loop ... %}', correct: false }
      - { value: '{% for ... %}', correct: true }
      - { value: '{% iterate ... %}', correct: false }
    help: |
      Twig uses `{% for ... %}` for looping over iterable data.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `asset()` function in Twig, and what does it typically return?'
    answers:
      - { value: 'It returns the absolute path to a PHP file; used for including server-side scripts.', correct: false }
      - { value: 'It generates a URL for a web asset (e.g., CSS, JS, images), often including versioning for cache busting.', correct: true }
      - { value: 'It retrieves a database record based on an asset ID.', correct: false }
      - { value: 'It embeds an asset directly into the HTML as a base64 encoded string.', correct: false }
    help: |
      The `asset()` function is used to generate URLs for public assets.
      (This is general Symfony/Twig asset management knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'How can you debug a variable''s content in a Twig template, similar to `var_dump()` in PHP?'
    answers:
      - { value: '{{ dump(variable) }}', correct: true }
      - { value: '{{ debug(variable) }}', correct: false }
      - { value: '{% print_r variable %}', correct: false }
      - { value: '{{ var_dump(variable) }}', correct: false }
    help: |
      The `dump()` function (available when `debug` is enabled) is used to dump variable content.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to debugging.)
  -
    question: 'Which of the following Twig filters can be used to format a number with a specific number of decimals, a decimal point character, and a thousands separator?'
    answers:
      - { value: '{{ number|format_number(2, ''.'', '','') }}', correct: false }
      - { value: '{{ number|number_format(2, ''.'', '','') }}', correct: true }
      - { value: '{{ number|money_format(2, ''.'', '','') }}', correct: false }
      - { value: '{{ number|currency(2, ''.'', '','') }}', correct: false }
    help: |
      The `number_format` filter formats a number with specified decimal, decimal point, and thousands separator.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_12
  -
    question: 'What is the purpose of the `t()` function in Twig, often used with the `trans` filter?'
    answers:
      - { value: 'To convert a string to uppercase.', correct: false }
      - { value: 'To create a `Translatable` object for internationalization, supporting message parameters and custom domains.', correct: true }
      - { value: 'To truncate a string to a specific length.', correct: false }
      - { value: 'To define a new translation key directly in the template.', correct: false }
    help: |
      The `t()` function creates a `Translatable` object for internationalization.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_21
  -
    question: 'Which of the following is the correct way to translate a message with parameters in Twig?'
    answers:
      - { value: '{{ ''Hello %name%''|trans({''%name%'': ''John''}) }}', correct: true }
      - { value: '{% trans with {''%name%'': ''John''} %}Hello %name%{% endtrans %}', correct: true }
      - { value: '{{ trans(''Hello %name%'', {''%name%'': ''John''}) }}', correct: false }
      - { value: '{% translate ''Hello %name%'' with {''%name%'': ''John''} %}', correct: false }
    help: |
      Both the `trans` filter and `trans` tag support parameters for translation.
      https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#_snippet_14
      https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#_snippet_17
  -
    question: 'When using the `trans` filter or tag, which of the following translation messages will NOT be automatically detected by Symfony''s translation extractors?'
    answers:
      - { value: '{{ ''Symfony is great''|trans }}', correct: false }
      - { value: '{% trans %}Symfony is great{% endtrans %}', correct: false }
      - { value: '{% set message = ''Symfony is great'' %}{{ message|trans }}', correct: true }
      - { value: '{{ t(''Symfony is great'')|trans }}', correct: false }
    help: |
      Translation messages stored in Twig variables are not statically detectable by extractors.
      https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#_snippet_47
  -
    question: 'What is the purpose of the `abbr_class` filter in Twig?'
    answers:
      - { value: 'To abbreviate a long string by truncating it.', correct: false }
      - { value: 'To generate an HTML `<abbr>` element for a Fully Qualified Class Name (FQCN), displaying the short name with the full FQCN as a tooltip.', correct: true }
      - { value: 'To convert a class name to its snake_case equivalent.', correct: false }
      - { value: 'To check if a class exists and return its short name.', correct: false }
    help: |
      The `abbr_class` filter generates an HTML `<abbr>` element for an FQCN.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_29
  -
    question: 'Which Twig function is used to generate a relative URL to exit an active user impersonation session?'
    answers:
      - { value: '{{ impersonation_exit_url() }}', correct: false }
      - { value: '{{ impersonation_exit_path() }}', correct: true }
      - { value: '{{ logout_impersonation() }}', correct: false }
      - { value: '{{ exit_impersonation_path() }}', correct: false }
    help: |
      The `impersonation_exit_path` function generates a relative URL to exit an impersonation session.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_19
  -
    question: 'How can you retrieve the current version of a specified asset package in Twig?'
    answers:
      - { value: '{{ asset_version(''app'') }}', correct: true }
      - { value: '{{ asset_package_version(''app'') }}', correct: false }
      - { value: '{{ asset_info(''app'').version }}', correct: false }
      - { value: '{{ get_asset_version(''app'') }}', correct: false }
    help: |
      The `asset_version()` function returns the current version of a specified asset package.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_5
  -
    question: 'Which of the following is the correct way to configure Twig to accept multiple filename patterns for templates?'
    answers:
      - { value: 'twig: file_name_pattern: "*.twig, *.html"', correct: false }
      - { value: 'twig: file_name_pattern: ["*.twig", "specific_file.html"]', correct: true }
      - { value: 'twig: file_patterns: "*.twig", "specific_file.html"', correct: false }
      - { value: 'twig: template_patterns: "*.twig", "specific_file.html"', correct: false }
    help: |
      The `file_name_pattern` option accepts an array of patterns.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_9
  -
    question: 'What is the purpose of the `serialize` filter in Twig?'
    answers:
      - { value: 'To convert a string into a URL-safe format.', correct: false }
      - { value: 'To convert an object or array into a JSON string.', correct: false }
      - { value: 'To serialize any given data using Symfony''s Serializer component, supporting different formats and contexts.', correct: true }
      - { value: 'To encrypt data before displaying it in the template.', correct: false }
    help: |
      The `serialize` filter serializes data using the Symfony Serializer component.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_38
  -
    question: 'Which Twig filter is used to generate an excerpt of a code file around a specified line number?'
    answers:
      - { value: '{{ file|code_excerpt(line) }}', correct: false }
      - { value: '{{ file|file_excerpt(line) }}', correct: true }
      - { value: '{{ file|get_code_snippet(line) }}', correct: false }
      - { value: '{{ file|show_lines(line) }}', correct: false }
    help: |
      The `file_excerpt` filter generates an excerpt of a code file around a specified line number.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_33
  -
    question: 'What is the primary benefit of using `render_hinclude` in Twig?'
    answers:
      - { value: 'To include static HTML files only.', correct: false }
      - { value: 'To embed content asynchronously, improving page load performance.', correct: true }
      - { value: 'To render content only if a specific condition is met.', correct: false }
      - { value: 'To include Twig templates from external sources.', correct: false }
    help: |
      `render_hinclude` is used to embed content asynchronously.
      https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#_snippet_43
  -
    question: 'Which of the following is the correct Composer command to install the Symfony Twig Bundle for a full-stack Symfony application?'
    answers:
      - { value: 'composer install symfony/twig-bundle', correct: false }
      - { value: 'composer require symfony/twig-bundle', correct: true }
      - { value: 'composer add twig-bundle', correct: false }
      - { value: 'composer get symfony/twig-bundle', correct: false }
    help: |
      `composer require symfony/twig-bundle` is the standard command for installing the Twig Bundle.
      https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#_snippet_0
  -
    question: 'How can you programmatically check if a Twig template exists in a Symfony service?'
    answers:
      - { value: 'By injecting `Twig\\Environment` and using its `exists()` method.', correct: true }
      - { value: 'By calling `template_exists(''template_name.html.twig'')` from the container.', correct: false }
      - { value: 'By checking the filesystem directly for the template file.', correct: false }
      - { value: 'Twig templates are always assumed to exist if referenced.', correct: false }
    help: |
      The `Twig\\Environment` object provides the `exists()` method to verify template availability.
      https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#_snippet_29
  -
    question: 'Which Twig filter is used to transform an absolute file path into a path relative to the project''s root directory?'
    answers:
      - { value: '{{ file|relative_path }}', correct: false }
      - { value: '{{ file|file_relative }}', correct: true }
      - { value: '{{ file|project_path }}', correct: false }
      - { value: '{{ file|short_path }}', correct: false }
    help: |
      The `file_relative` filter converts an absolute file path to a path relative to the project root.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_37
  -
    question: 'What is the purpose of the `format_file` filter in Twig?'
    answers:
      - { value: 'To convert a file path into a URL.', correct: false }
      - { value: 'To generate an HTML `<a>` element for a file path and line number, with a tooltip and optional custom text.', correct: true }
      - { value: 'To read the content of a file and display it in the template.', correct: false }
      - { value: 'To apply syntax highlighting to code files.', correct: false }
    help: |
      The `format_file` filter generates an HTML `<a>` element for a file path.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_34
  -
    question: 'Which Twig filter is used to generate a string representation of function or method arguments, including their names and types?'
    answers:
      - { value: '{{ args|dump_args }}', correct: false }
      - { value: '{{ args|format_args }}', correct: true }
      - { value: '{{ args|print_args }}', correct: false }
      - { value: '{{ args|get_arguments }}', correct: false }
    help: |
      The `format_args` filter generates a string representation of arguments.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_31
  -
    question: 'What is the primary function of the `yaml_encode` filter in Twig?'
    answers:
      - { value: 'To decode a YAML string into a Twig array or object.', correct: false }
      - { value: 'To encode input data into YAML syntax, with options for inline output and object dumping.', correct: true }
      - { value: 'To validate if a string is valid YAML.', correct: false }
      - { value: 'To convert a Twig array to a JSON string.', correct: false }
    help: |
      The `yaml_encode` filter transforms input data into YAML syntax.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_26
  -
    question: 'Which of the following is a valid way to display workflow metadata in a Twig template for a `blog_post` object, specifically its `title`?'
    answers:
      - { value: '{{ workflow_metadata(blog_post, ''title'') }}', correct: true }
      - { value: '{{ blog_post.workflow.title }}', correct: false }
      - { value: '{{ get_workflow_metadata(blog_post, ''title'') }}', correct: false }
      - { value: '{{ workflow_info(blog_post).title }}', correct: false }
    help: |
      The `workflow_metadata()` function is used to display workflow, place, and transition metadata.
      https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#_snippet_42
  -
    question: 'What does the `relative_path()` function in Twig do?'
    answers:
      - { value: 'It returns the absolute path of the current template file.', correct: false }
      - { value: 'It calculates the relative path from a given absolute URL, useful for context-aware links.', correct: true }
      - { value: 'It converts a relative path to an absolute path.', correct: false }
      - { value: 'It checks if a file exists at a given relative path.', correct: false }
    help: |
      The `relative_path()` function calculates the relative path from an absolute URL.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_15
  -
    question: 'Which Twig function is used to generate the URI for a specified fragment?'
    answers:
      - { value: '{{ uri_fragment(controller) }}', correct: false }
      - { value: '{{ fragment_uri(controller) }}', correct: true }
      - { value: '{{ get_fragment_uri(controller) }}', correct: false }
      - { value: '{{ path_fragment(controller) }}', correct: false }
    help: |
      The `fragment_uri()` function generates the URI for a specified fragment.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_2
  -
    question: 'How can you apply the `Twig` constraint to a class property in Symfony using PHP attributes to ensure valid Twig syntax?'
    answers:
      - { value: '#[Assert\\Twig]', correct: false }
      - { value: '#[TwigConstraint]', correct: false }
      - { value: '#[Twig]', correct: true }
      - { value: '#[ValidTwig]', correct: false }
    help: |
      The `#[Twig]` attribute is used to apply the `Twig` constraint.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#_snippet_0
  -
    question: 'What is the effect of setting `skipDeprecations: false` in the `Twig` constraint?'
    answers:
      - { value: 'It disables all Twig deprecation warnings.', correct: false }
      - { value: 'It treats Twig deprecation warnings as validation errors, useful for maintaining code quality.', correct: true }
      - { value: 'It only logs deprecation warnings, without affecting validation.', correct: false }
      - { value: 'It automatically fixes deprecated Twig syntax.', correct: false }
    help: |
      Setting `skipDeprecations: false` ensures that Twig deprecation warnings are treated as validation errors.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#_snippet_2
  -
    question: 'Which Composer command is used to install the `symfony/twig-bridge` package, essential for rendering forms with Twig?'
    answers:
      - { value: 'composer install symfony/twig-bridge', correct: false }
      - { value: 'composer require symfony/twig-bridge', correct: true }
      - { value: 'composer add twig-bridge', correct: false }
      - { value: 'composer update symfony/twig-bridge', correct: false }
    help: |
      `composer require symfony/twig-bridge` installs the Twig Bridge component.
      https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#_snippet_13
  -
    question: 'What is the purpose of the `expression()` function in Twig?'
    answers:
      - { value: 'To evaluate a mathematical expression in a string.', correct: true }
      - { value: 'To define a regular expression for string matching.', correct: false }
      - { value: 'To create a new Twig expression object.', correct: false }
      - { value: 'To execute a PHP function from within Twig.', correct: false }
    help: |
      The `expression()` function creates an ExpressionLanguage expression for dynamic evaluation.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_16
  -
    question: 'Which Twig filter is used to generate a direct link to a specified file and line number?'
    answers:
      - { value: '{{ file|link_to_file(line) }}', correct: false }
      - { value: '{{ file|file_link(line) }}', correct: true }
      - { value: '{{ file|source_link(line) }}', correct: false }
      - { value: '{{ file|goto_file(line) }}', correct: false }
    help: |
      The `file_link` filter generates a direct link to a specified file and line number.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_36
  -
    question: 'How can you render both sub-fields of a Symfony `RepeatedType` field simultaneously in Twig?'
    answers:
      - { value: '{{ form_widget(form.password) }}', correct: false }
      - { value: '{{ form_row(form.password) }}', correct: true }
      - { value: '{{ form_label(form.password) }}{{ form_errors(form.password) }}{{ form_widget(form.password.first) }}{{ form_widget(form.password.second) }}', correct: false }
      - { value: '{{ form_fields(form.password) }}', correct: false }
    help: |
      `form_row` renders the label, errors, and widget for a field, including both sub-fields of a `RepeatedType`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/repeated.rst#_snippet_1
  -
    question: 'What is the default value for the `optimizations` option in Twig configuration, and what does `0` signify?'
    answers:
      - { value: 'Default is `0` (no optimizations); `0` disables all optimizations.', correct: false }
      - { value: 'Default is `-1` (all optimizations); `0` disables all optimizations.', correct: true }
      - { value: 'Default is `1` (basic optimizations); `0` disables all optimizations.', correct: false }
      - { value: 'Default is `true`; `0` disables all optimizations.', correct: false }
    help: |
      The `optimizations` option controls the Twig optimizer extension. `-1` enables all, `0` disables all.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_13
  -
    question: 'Which of the following is the correct way to generate an absolute impersonation URL in Twig?'
    answers:
      - { value: '{{ impersonation_path(identifier) }}', correct: false }
      - { value: '{{ impersonation_url(identifier) }}', correct: true }
      - { value: '{{ absolute_impersonation_path(identifier) }}', correct: false }
      - { value: '{{ url_impersonation(identifier) }}', correct: false }
    help: |
      The `impersonation_url` function generates an absolute URL for user impersonation.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_18
  -
    question: 'What is the purpose of the `format_file_from_text` filter in Twig?'
    answers:
      - { value: 'To extract text content from a file.', correct: false }
      - { value: 'To format a given text string as a file path.', correct: false }
      - { value: 'To enhance the display of default PHP error messages by transforming file paths within the errors into clickable links.', correct: true }
      - { value: 'To convert a plain text file into an HTML file.', correct: false }
    help: |
      The `format_file_from_text` filter enhances PHP error output by making file paths clickable.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_35
  -
    question: 'Which of the following is the correct way to generate a relative logout URL for a specific firewall key in Twig?'
    answers:
      - { value: '{{ logout_url(''main'') }}', correct: false }
      - { value: '{{ logout_path(key = ''main'') }}', correct: true }
      - { value: '{{ path(''logout'', {''firewall'': ''main''}) }}', correct: false }
      - { value: '{{ security_logout_path(''main'') }}', correct: false }
    help: |
      The `logout_path()` function generates a relative logout URL for a specified firewall key.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_10
  -
    question: 'Which Twig filter is used to generate an HTML `<abbr>` element for a method''s Fully Qualified Class Name (FQCN), correctly formatting it as `FQCN::method()`?'
    answers:
      - { value: '{{ method|abbr_method }}', correct: true }
      - { value: '{{ method|format_method }}', correct: false }
      - { value: '{{ method|short_method }}', correct: false }
      - { value: '{{ method|method_abbr }}', correct: false }
    help: |
      The `abbr_method` filter generates an HTML `<abbr>` element for a method's FQCN.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_30
  -
    question: 'What is the purpose of the `controller()` function in Twig?'
    answers:
      - { value: 'To execute a PHP function directly within the template.', correct: false }
      - { value: 'To return an instance of `ControllerReference`, which can then be used with `render()` or `render_esi()` to embed controller output.', correct: true }
      - { value: 'To define a new controller in the Twig template.', correct: false }
      - { value: 'To get the name of the currently executing controller.', correct: false }
    help: |
      The `controller()` function returns a `ControllerReference` for embedding controller output.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_3
  -
    question: 'How can you configure Twig to disable the compilation cache?'
    answers:
      - { value: 'Set `cache: false` in `twig.yaml`.', correct: true }
      - { value: 'Set `cache: 0` in `twig.yaml`.', correct: false }
      - { value: 'Set `cache_enabled: false` in `twig.yaml`.', correct: false }
      - { value: 'Remove the `cache` configuration entirely.', correct: false }
    help: |
      Setting `cache: false` disables Twig compilation caching.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_5
  -
    question: 'Which Twig filter provides the same functionality as `format_args` but without generating any HTML tags?'
    answers:
      - { value: '{{ args|format_args_plain }}', correct: false }
      - { value: '{{ args|format_args_as_text }}', correct: true }
      - { value: '{{ args|plain_args }}', correct: false }
      - { value: '{{ args|text_args }}', correct: false }
    help: |
      The `format_args_as_text` filter formats arguments as plain text.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_32
  -
    question: 'What is the correct way to render a translation with a specific locale in Twig?'
    answers:
      - { value: '{{ ''message''|trans(locale = ''fr'') }}', correct: true }
      - { value: '{% trans into ''fr'' %}message{% endtrans %}', correct: true }
      - { value: '{{ trans(''message'', locale = ''fr'') }}', correct: false }
      - { value: '{% translate ''message'' locale ''fr'' %}', correct: false }
    help: |
      Both the `trans` filter and `trans` tag support specifying a locale.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_24
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_42
  -
    question: 'Which Twig configuration option controls the behavior of Twig''s dump utilities and enables a `__toString()` method for compiled templates?'
    answers:
      - { value: 'strict_variables', correct: false }
      - { value: 'auto_reload', correct: false }
      - { value: 'debug', correct: true }
      - { value: 'optimizations', correct: false }
    help: |
      The `debug` option enables debugging features for compiled templates and controls dump utilities.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_8
  -
    question: 'Which of the following is NOT a valid way to configure Twig template paths in Symfony?'
    answers:
      - { value: 'Using `paths` in `config/packages/twig.yaml`.', correct: false }
      - { value: 'Using `<twig:path>` in `config/packages/twig.xml`.', correct: false }
      - { value: 'Using `$twig->addPath()` in a service definition.', correct: false }
      - { value: 'Using `template_directories` in `config/packages/twig.yaml`.', correct: true }
    help: |
      The correct configuration key for template paths is `paths`, not `template_directories`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_14
  -
    question: 'When is it necessary to manually set up `Twig\\Environment` and `FilesystemLoader` when integrating Twig with the Symfony Mime component?'
    answers:
      - { value: 'Always, regardless of the application type.', correct: false }
      - { value: 'Only when using the Mime component outside a full-stack Symfony application.', correct: true }
      - { value: 'Only when rendering plain text emails.', correct: false }
      - { value: 'Never, Symfony handles it automatically.', correct: false }
    help: |
      Manual Twig setup is required when using the Mime component outside a full-stack Symfony application.
      https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#_snippet_2
  -
    question: 'What is the purpose of the `impersonation_path()` function in Twig?'
    answers:
      - { value: 'To generate a relative URL that allows an administrator to impersonate another user.', correct: true }
      - { value: 'To check if a user is currently impersonating another user.', correct: false }
      - { value: 'To get the path to the impersonation login page.', correct: false }
      - { value: 'To log out the currently impersonated user.', correct: false }
    help: |
      The `impersonation_path()` function generates a relative URL for user impersonation.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_17
  -
    question: 'Which of the following describes the `number_format` default options in Twig configuration?'
    answers:
      - { value: '`decimals: 2`, `decimal_point: .`, `thousands_separator: ,`', correct: false }
      - { value: '`decimals: 0`, `decimal_point: .`, `thousands_separator: ,`', correct: true }
      - { value: '`decimals: 0`, `decimal_point: ,`, `thousands_separator: .`', correct: false }
      - { value: '`decimals: null`, `decimal_point: null`, `thousands_separator: null`', correct: false }
    help: |
      The `number_format` default options are `decimals: 0`, `decimal_point: .`, `thousands_separator: ,`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_12
  -
    question: 'What is the primary use case for the `HtmlToTextConverterInterface` in Symfony''s Mime component, as referenced in Twig configuration?'
    answers:
      - { value: 'To convert plain text emails to HTML.', correct: false }
      - { value: 'To automatically create the text part of an email from its HTML content when not explicitly defined.', correct: true }
      - { value: 'To validate HTML content in Twig templates.', correct: false }
      - { value: 'To strip all HTML tags from a given string.', correct: false }
    help: |
      `HtmlToTextConverterInterface` is used to automatically create the text part of an email from its HTML content.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_11
  -
    question: 'Which Twig function is used to generate an absolute URL to exit an active user impersonation session?'
    answers:
      - { value: '{{ impersonation_exit_path() }}', correct: false }
      - { value: '{{ impersonation_exit_url() }}', correct: true }
      - { value: '{{ absolute_logout_impersonation() }}', correct: false }
      - { value: '{{ url_exit_impersonation() }}', correct: false }
    help: |
      The `impersonation_exit_url` function generates an absolute URL to exit an impersonation session.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_20
  -
    question: 'What is the purpose of the `trans_default_domain` tag in Twig?'
    answers:
      - { value: 'To define a new translation domain.', correct: false }
      - { value: 'To set the default translation domain for the current template, simplifying subsequent `trans` tag usage.', correct: true }
      - { value: 'To override the global translation domain for a specific block.', correct: false }
      - { value: 'To specify the fallback translation domain.', correct: false }
    help: |
      The `trans_default_domain` tag sets the default translation domain for the current template.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_43
  -
    question: 'Which of the following is the correct way to install Twig with Composer and Symfony Flex?'
    answers:
      - { value: 'composer install twig', correct: false }
      - { value: 'composer require twig', correct: true }
      - { value: 'composer add twig-bundle', correct: false }
      - { value: 'composer get twig', correct: false }
    help: |
      `composer require twig` installs the Twig templating engine, with Symfony Flex handling the recipe.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_1
  -
    question: 'How can you display the actual Twig configuration values used by your Symfony application via the command line?'
    answers:
      - { value: 'php bin/console config:show twig', correct: false }
      - { value: 'php bin/console debug:config twig', correct: true }
      - { value: 'php bin/console twig:config', correct: false }
      - { value: 'php bin/console show:twig:config', correct: false }
    help: |
      The `debug:config` command displays the actual configuration values.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_0
  -
    question: 'What is the primary difference between `{{ path() }}` and `{{ url() }}` in Twig for generating routes?'
    answers:
      - { value: '`path()` generates an absolute URL, while `url()` generates a relative path.', correct: false }
      - { value: '`path()` generates a relative path, while `url()` generates an absolute URL.', correct: true }
      - { value: '`path()` is for internal routes, `url()` is for external URLs.', correct: false }
      - { value: 'There is no functional difference; they are aliases.', correct: false }
    help: |
      `path()` generates a relative path, and `url()` generates an absolute URL.
      (This is general Symfony routing in Twig knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'Which Twig filter would you use to perform pluralization for a translation message?'
    answers:
      - { value: '{{ count|trans_choice(''message'', count) }}', correct: true }
      - { value: '{{ count|pluralize(''message'') }}', correct: false }
      - { value: '{{ count|trans_plural(''message'') }}', correct: false }
      - { value: '{{ count|i18n_plural(''message'') }}', correct: false }
    help: |
      The `trans_choice` filter is used for pluralization in translations.
      (This is general Symfony/Translation in Twig knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'What is the purpose of string interpolation in Twig, and how is it typically achieved?'
    answers:
      - { value: 'To insert HTML tags into a string; achieved using `{{ html_string|raw }}`.', correct: false }
      - { value: 'To embed dynamic variable values directly within a string literal; achieved using `{{ "Hello #{name}" }}` or `{{ "Hello %name%"|trans({''%name%'': name}) }}`.', correct: true }
      - { value: 'To concatenate multiple strings; achieved using `{{ string1 ~ string2 }}`.', correct: false }
      - { value: 'To escape special characters in a string; achieved using `{{ string|escape }}`.', correct: false }
    help: |
      String interpolation involves embedding dynamic values into strings. Twig uses `{{ ... }}` for variable output, and for translations, placeholders like `%name%` are used.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig function allows you to generate a URL that, when visited, allows an administrator to impersonate another user?'
    answers:
      - { value: '{{ impersonate_user_url(identifier) }}', correct: false }
      - { value: '{{ impersonation_url(identifier) }}', correct: true }
      - { value: '{{ switch_user_url(identifier) }}', correct: false }
      - { value: '{{ login_as_user_url(identifier) }}', correct: false }
    help: |
      The `impersonation_url()` function generates an absolute URL for user impersonation.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_18
  -
    question: 'How would you include a Twig template named `_sidebar.html.twig` and pass a variable `items` to it?'
    answers:
      - { value: '{% include ''_sidebar.html.twig'' with {items: myItems} %}', correct: true }
      - { value: '{% include ''_sidebar.html.twig'', {items: myItems} %}', correct: false }
      - { value: '{{ include(''sidebar.html.twig'', {items: myItems}) }}', correct: false }
      - { value: '{% render ''_sidebar.html.twig'' with {items: myItems} %}', correct: false }
    help: |
      The `include` tag allows passing variables using the `with` keyword.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `raw` filter in Twig?'
    answers:
      - { value: 'To convert a string to lowercase.', correct: false }
      - { value: 'To remove all whitespace from a string.', correct: false }
      - { value: 'To mark a string as "safe" and prevent Twig''s auto-escaping from escaping its contents.', correct: true }
      - { value: 'To encode a string for URL safety.', correct: false }
    help: |
      The `raw` filter marks a string as safe, preventing auto-escaping.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct syntax for a Twig `for` loop with an `if` condition inside?'
    answers:
      - { value: '{% for item in items if item.active %}', correct: false }
      - { value: '{% for item in items %}{% if item.active %}{% endif %}{% endfor %}', correct: true }
      - { value: '{% for item in items where item.active %}', correct: false }
      - { value: '{% for item in items filter item.active %}', correct: false }
    help: |
      Conditional logic inside a `for` loop is typically achieved with an `if` statement within the loop body.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `trans` filter in Twig?'
    answers:
      - { value: 'To convert a string to a different character encoding.', correct: false }
      - { value: 'To translate a given message into the current language, supporting arguments, domains, and locales.', correct: true }
      - { value: 'To transform a string into a URL-friendly slug.', correct: false }
      - { value: 'To apply a CSS transformation to a text element.', correct: false }
    help: |
      The `trans` filter is a core part of Symfony's internationalization capabilities.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_24
  -
    question: 'How can you configure custom delimiters for variables in Twig templates, for example, to use `${` and `}$` instead of `{{` and `}}`?'
    answers:
      - { value: 'By modifying `twig.yaml` with a `variable_delimiters` option.', correct: false }
      - { value: 'By setting `twig.auto_escape: false` and manually escaping.', correct: false }
      - { value: 'This is typically configured at the Twig environment level in PHP, not directly in `twig.yaml` for Symfony applications, to allow coexistence with other templating engines.', correct: true }
      - { value: 'Using a `{% set_delimiters ... %}` tag in the template.', correct: false }
    help: |
      Custom delimiters are typically configured at the Twig environment level, allowing coexistence with other templating engines.
      https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#_snippet_9
  -
    question: 'Which Twig function is used to generate a URL for a named route?'
    answers:
      - { value: '{{ url(''app_homepage'') }}', correct: true }
      - { value: '{{ path(''app_homepage'') }}', correct: true }
      - { value: '{{ route(''app_homepage'') }}', correct: false }
      - { value: '{{ generate_url(''app_homepage'') }}', correct: false }
    help: |
      Both `url()` and `path()` functions are used to generate URLs for named routes. `url()` generates an absolute URL, while `path()` generates a relative path.
      (This is general Symfony routing in Twig knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'What is the purpose of the `dump()` function in Twig, and when is it typically available?'
    answers:
      - { value: 'To clear the Twig cache; always available.', correct: false }
      - { value: 'To output the raw content of a variable for debugging; typically available when the `debug` option is enabled.', correct: true }
      - { value: 'To save variable data to a file; only available in production.', correct: false }
      - { value: 'To encrypt variable data; always available.', correct: false }
    help: |
      The `dump()` function is used for debugging variables and is typically available when the `debug` option is enabled.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to debugging.)
  -
    question: 'Which of the following is the correct way to define a block in Twig for template inheritance?'
    answers:
      - { value: '{% block content %}{% endblock %}', correct: true }
      - { value: '{{ block(''content'') }}', correct: false }
      - { value: '{% section content %}{% endsection %}', correct: false }
      - { value: '{% define block content %}{% enddefine %}', correct: false }
    help: |
      The `block` tag is used to define blocks that can be overridden by child templates.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the effect of the `|raw` filter on a variable in Twig?'
    answers:
      - { value: 'It converts the variable to a string representation.', correct: false }
      - { value: 'It applies HTML escaping to the variable''s content.', correct: false }
      - { value: 'It prevents Twig from escaping the variable''s content, rendering it as raw HTML.', correct: true }
      - { value: 'It removes all non-alphanumeric characters from the variable.', correct: false }
    help: |
      The `raw` filter marks a string as safe, preventing auto-escaping.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct syntax for a Twig `if` statement with an `else` clause?'
    answers:
      - { value: '{% if condition %}...{% else %}...{% endif %}', correct: true }
      - { value: '{{ if condition }}...{{ else }}...{{ endif }}', correct: false }
      - { value: '{% if condition then %}...{% else %}...{% endif %}', correct: false }
      - { value: '{? if condition ?}...?{? else ?}...?{? endif ?}', correct: false }
    help: |
      Twig uses `{% if ... %}` and `{% else %}` for conditional logic.
      https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#_snippet_1
  -
    question: 'What is the purpose of the `parent()` function in Twig template inheritance?'
    answers:
      - { value: 'To include the entire parent template content.', correct: false }
      - { value: 'To render the content of a block from the parent template within an overridden block.', correct: true }
      - { value: 'To access variables defined in the parent template.', correct: false }
      - { value: 'To navigate to the parent directory of the current template.', correct: false }
    help: |
      The `parent()` function allows rendering the content of a block from the parent template.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'How can you define a global variable that is accessible in all Twig templates?'
    answers:
      - { value: 'By adding it to the `parameters` section of `services.yaml`.', correct: false }
      - { value: 'By configuring it under the `globals` section in `config/packages/twig.yaml`.', correct: true }
      - { value: 'By defining it as a public property in a Twig extension.', correct: false }
      - { value: 'By passing it explicitly to every `render()` call in controllers.', correct: false }
    help: |
      Global variables are configured under the `globals` section in `twig.yaml`.
      (This is general Symfony/Twig configuration knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'Which of the following is the correct way to include a JavaScript asset in a Twig template, ensuring cache busting?'
    answers:
      - { value: '<script src="{{ asset(''build/app.js'') }}"></script>', correct: true }
      - { value: '<script src="/build/app.js"></script>', correct: false }
      - { value: '<script src="{{ url(''build/app.js'') }}"></script>', correct: false }
      - { value: '<script src="{{ path(''build/app.js'') }}"></script>', correct: false }
    help: |
      The `asset()` function is used for assets and typically handles cache busting.
      (This is general Symfony/Twig asset management knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'What is the purpose of the `trans_default_domain` tag in Twig?'
    answers:
      - { value: 'To define a new translation domain.', correct: false }
      - { value: 'To set the default translation domain for the current template, simplifying subsequent `trans` tag usage.', correct: true }
      - { value: 'To override the global translation domain for a specific block.', correct: false }
      - { value: 'To specify the fallback translation domain.', correct: false }
    help: |
      The `trans_default_domain` tag sets the default translation domain for the current template.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_43
  -
    question: 'Which Twig filter is used to convert a string like "dateOfBirth" or "date-of-birth" into "Date of birth" for display?'
    answers:
      - { value: '{{ value|humanize }}', correct: true }
      - { value: '{{ value|capitalize }}', correct: false }
      - { value: '{{ value|title }}', correct: false }
      - { value: '{{ value|format_label }}', correct: false }
    help: |
      The `humanize` filter transforms a string into a more human-readable format.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_23
  -
    question: 'How can you ensure that Twig deprecation warnings are treated as validation errors when using the `Twig` constraint?'
    answers:
      - { value: 'Set the `message` option to a custom error message.', correct: false }
      - { value: 'Set the `skipDeprecations` option to `false`.', correct: true }
      - { value: 'Set the `strict_mode` option to `true`.', correct: false }
      - { value: 'Enable the `debug` option in Twig configuration.', correct: false }
    help: |
      Setting `skipDeprecations: false` in the `Twig` constraint treats deprecation warnings as validation errors.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#_snippet_2
  -
    question: 'What is the purpose of the `asset_version()` function in Twig?'
    answers:
      - { value: 'To get the version of the current Symfony application.', correct: false }
      - { value: 'To return the current version of a specified asset package, often used for cache busting.', correct: true }
      - { value: 'To check if an asset exists and return its version number.', correct: false }
      - { value: 'To update the version of an asset in the manifest file.', correct: false }
    help: |
      The `asset_version()` function returns the current version of a specified asset package.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_5
  -
    question: 'Which of the following is the correct way to translate a static text block using the `trans` tag in Twig, including a placeholder?'
    answers:
      - { value: '{% trans %}Hello %name%{% endtrans %}', correct: true }
      - { value: '{% trans with {''name'': ''John''} %}Hello %name%{% endtrans %}', correct: false }
      - { value: '{% translate %}Hello %name%{% endtranslate %}', correct: false }
      - { value: '{{ ''Hello %name%''|trans }}', correct: false }
    help: |
      The `trans` tag is used for static text blocks, and placeholders are denoted with `%var%`.
      https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#_snippet_17
  -
    question: 'What is the primary function of the `render()` function in Twig?'
    answers:
      - { value: 'To include a static HTML file.', correct: false }
      - { value: 'To make a request to a given internal URI or controller and return its result, allowing embedding of dynamic content.', correct: true }
      - { value: 'To render a Twig template directly from a file path.', correct: false }
      - { value: 'To convert a Twig template into a PHP class.', correct: false }
    help: |
      The `render()` function is used to embed controllers directly within Twig templates.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#_snippet_0
  -
    question: 'Which of the following is a valid way to define a global variable `app_name` with the value "My App" in `config/packages/twig.yaml`?'
    answers:
      - { value: 'twig: globals: app_name: "My App"', correct: true }
      - { value: 'twig: parameters: app_name: "My App"', correct: false }
      - { value: 'twig: vars: app_name: "My App"', correct: false }
      - { value: 'twig: default_vars: app_name: "My App"', correct: false }
    help: |
      Global variables are defined under the `globals` key in `twig.yaml`.
      (This is general Symfony/Twig configuration knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'When debugging Twig templates, which console command can you use to display the default configuration values defined by Symfony for Twig?'
    answers:
      - { value: 'php bin/console config:dump-reference twig', correct: true }
      - { value: 'php bin/console debug:twig:config', correct: false }
      - { value: 'php bin/console twig:show-defaults', correct: false }
      - { value: 'php bin/console config:get twig', correct: false }
    help: |
      The `config:dump-reference` command displays the default configuration values.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#_snippet_0
  -
    question: 'What is the primary benefit of using template inheritance in Twig?'
    answers:
      - { value: 'To reduce the number of files in your project.', correct: false }
      - { value: 'To allow templates to reuse common layout elements and define specific content areas, promoting code reusability and maintainability.', correct: true }
      - { value: 'To automatically generate HTML from PHP code.', correct: false }
      - { value: 'To enable server-side rendering for single-page applications.', correct: false }
    help: |
      Template inheritance is a core feature for reusing layout elements.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following Twig filters would you use to convert a string to its URL-friendly slug?'
    answers:
      - { value: '{{ text|slug }}', correct: true }
      - { value: '{{ text|url_encode }}', correct: false }
      - { value: '{{ text|sanitize }}', correct: false }
      - { value: '{{ text|url_friendly }}', correct: false }
    help: |
      The `slug` filter is commonly used for creating URL-friendly strings.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `trans_choice` filter in Twig?'
    answers:
      - { value: 'To translate a message based on a given number, handling pluralization rules.', correct: true }
      - { value: 'To choose between multiple translation domains.', correct: false }
      - { value: 'To translate a message and then apply a choice filter.', correct: false }
      - { value: 'To select a random translation from a list.', correct: false }
    help: |
      The `trans_choice` filter handles pluralization for translations.
      (This is general Symfony/Translation in Twig knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'Which Twig filter is used to format a date or datetime object according to a specified format string?'
    answers:
      - { value: '{{ date|format_date(''Y-m-d'') }}', correct: false }
      - { value: '{{ date|date(''Y-m-d'') }}', correct: true }
      - { value: '{{ date|to_string(''Y-m-d'') }}', correct: false }
      - { value: '{{ date|datetime_format(''Y-m-d'') }}', correct: false }
    help: |
      The `date` filter formats a date or datetime object.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'How can you include a CSS asset in a Twig template, ensuring proper path resolution and cache busting?'
    answers:
      - { value: '<link rel="stylesheet" href="{{ asset(''build/app.css'') }}">', correct: true }
      - { value: '<link rel="stylesheet" href="/build/app.css">', correct: false }
      - { value: '<style src="{{ asset(''build/app.css'') }}"></style>', correct: false }
      - { value: '<link rel="stylesheet" href="{{ path(''build/app.css'') }}">', correct: false }
    help: |
      The `asset()` function is used for assets and typically handles cache busting.
      (This is general Symfony/Twig asset management knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'What is the purpose of the `spaceless` tag in Twig?'
    answers:
      - { value: 'To remove all spaces from a string.', correct: false }
      - { value: 'To remove whitespace between HTML tags, but not within them, to reduce output size.', correct: true }
      - { value: 'To add spaces to a string for better readability.', correct: false }
      - { value: 'To prevent line breaks in the rendered output.', correct: false }
    help: |
      The `spaceless` tag removes whitespace between HTML tags.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following Twig functions is used to generate a URL for a route, with the option to make it absolute?'
    answers:
      - { value: '{{ path(''route_name'', {}, true) }}', correct: false }
      - { value: '{{ url(''route_name'') }}', correct: true }
      - { value: '{{ absolute_path(''route_name'') }}', correct: false }
      - { value: '{{ generate_url(''route_name'', {absolute: true}) }}', correct: false }
    help: |
      The `url()` function generates an absolute URL for a route.
      (This is general Symfony routing in Twig knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'How can you access a variable defined in a parent template from a child template in Twig?'
    answers:
      - { value: 'Variables from parent templates are automatically available in child templates.', correct: true }
      - { value: 'By using the `parent.variable_name` syntax.', correct: false }
      - { value: 'By explicitly importing them with `{% import_parent_vars %}`.', correct: false }
      - { value: 'Only variables passed through `include` are accessible.', correct: false }
    help: |
      Variables defined in a parent template are automatically available in child templates.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `block` tag in Twig?'
    answers:
      - { value: 'To define a reusable section of content that can be overridden by child templates.', correct: true }
      - { value: 'To include external HTML content into the current template.', correct: false }
      - { value: 'To create a new Twig macro.', correct: false }
      - { value: 'To define a conditional statement.', correct: false }
    help: |
      The `block` tag is used for template inheritance.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to check if a variable `user` is defined in Twig?'
    answers:
      - { value: '{% if user is defined %}', correct: true }
      - { value: '{% if user is not null %}', correct: false }
      - { value: '{% if exists(user) %}', correct: false }
      - { value: '{% if user %}', correct: false }
    help: |
      The `is defined` test is used to check if a variable is defined.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `filter` tag in Twig?'
    answers:
      - { value: 'To apply a filter to a block of content.', correct: true }
      - { value: 'To filter elements from an array.', correct: false }
      - { value: 'To define a new custom filter.', correct: false }
      - { value: 'To remove unwanted characters from a string.', correct: false }
    help: |
      The `filter` tag applies a filter to a block of content.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to iterate over an array named `items` and display each `item.name`?'
    answers:
      - { value: '{% for item in items %}{{ item.name }}{% endfor %}', correct: true }
      - { value: '{% foreach items as item %}{{ item.name }}{% endforeach %}', correct: false }
      - { value: '{% loop items as item %}{{ item.name }}{% endloop %}', correct: false }
      - { value: '{{ items|map(item => item.name)|join }}', correct: false }
    help: |
      The `for` tag is used for iterating over arrays or objects.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `set` tag in Twig?'
    answers:
      - { value: 'To define a new function.', correct: false }
      - { value: 'To assign a value to a variable within the template.', correct: true }
      - { value: 'To include a set of templates.', correct: false }
      - { value: 'To configure Twig settings.', correct: false }
    help: |
      The `set` tag is used to assign values to variables.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig filter would you use to convert a string to uppercase?'
    answers:
      - { value: '{{ text|upper }}', correct: true }
      - { value: '{{ text|uppercase }}', correct: false }
      - { value: '{{ text|to_upper }}', correct: false }
      - { value: '{{ text|ucase }}', correct: false }
    help: |
      The `upper` filter converts a string to uppercase.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig filter would you use to convert a string to lowercase?'
    answers:
      - { value: '{{ text|lower }}', correct: true }
      - { value: '{{ text|lowercase }}', correct: false }
      - { value: '{{ text|to_lower }}', correct: false }
      - { value: '{{ text|lcase }}', correct: false }
    help: |
      The `lower` filter converts a string to lowercase.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `default` filter in Twig?'
    answers:
      - { value: 'To set a default value for a variable if it is undefined or null.', correct: true }
      - { value: 'To reset a variable to its initial value.', correct: false }
      - { value: 'To define a default block of content.', correct: false }
      - { value: 'To provide a default translation for a message.', correct: false }
    help: |
      The `default` filter sets a default value for a variable.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to check if an array `items` is empty in Twig?'
    answers:
      - { value: '{% if items is empty %}', correct: true }
      - { value: '{% if items|length == 0 %}', correct: true }
      - { value: '{% if items == [] %}', correct: false }
      - { value: '{% if not items %}', correct: true }
    help: |
      `is empty`, `length == 0`, and `not items` (for empty arrays/objects) are all valid ways to check for emptiness.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `macro` tag in Twig?'
    answers:
      - { value: 'To define a reusable block of Twig code that can accept arguments, similar to a function.', correct: true }
      - { value: 'To include a PHP function in the template.', correct: false }
      - { value: 'To create a new Twig extension.', correct: false }
      - { value: 'To define a global variable.', correct: false }
    help: |
      The `macro` tag defines reusable Twig code blocks.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'How can you import macros from another Twig template named `_forms.html.twig`?'
    answers:
      - { value: '{% import ''_forms.html.twig'' as forms %}', correct: true }
      - { value: '{% include ''_forms.html.twig'' as forms %}', correct: false }
      - { value: '{% use ''_forms.html.twig'' as forms %}', correct: false }
      - { value: '{% from ''_forms.html.twig'' import * as forms %}', correct: false }
    help: |
      The `import` tag is used to import macros from other templates.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig function is used to generate a URL for an asset, often including a version string for cache busting?'
    answers:
      - { value: '{{ asset(''path/to/image.png'') }}', correct: true }
      - { value: '{{ url(''path/to/image.png'') }}', correct: false }
      - { value: '{{ path(''path/to/image.png'') }}', correct: false }
      - { value: '{{ public_url(''path/to/image.png'') }}', correct: false }
    help: |
      The `asset()` function is used to generate URLs for public assets.
      (This is general Symfony/Twig asset management knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'What is the purpose of the `trans` tag in Twig?'
    answers:
      - { value: 'To translate a static text block within the template.', correct: true }
      - { value: 'To apply a transformation to a string.', correct: false }
      - { value: 'To define a new translation key.', correct: false }
      - { value: 'To include a translation file.', correct: false }
    help: |
      The `trans` tag is used for translating static text blocks.
      https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#_snippet_17
  -
    question: 'Which Twig filter is used to remove HTML tags from a string?'
    answers:
      - { value: '{{ html_string|strip_tags }}', correct: true }
      - { value: '{{ html_string|remove_html }}', correct: false }
      - { value: '{{ html_string|plain_text }}', correct: false }
      - { value: '{{ html_string|no_html }}', correct: false }
    help: |
      The `strip_tags` filter removes HTML and PHP tags from a string.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'How can you access the current application environment (e.g., `dev`, `prod`) in a Twig template?'
    answers:
      - { value: '{{ app.environment }}', correct: true }
      - { value: '{{ kernel.environment }}', correct: false }
      - { value: '{{ env.APP_ENV }}', correct: false }
      - { value: '{{ get_env(''APP_ENV'') }}', correct: false }
    help: |
      The `app` global variable provides access to the current application environment.
      (This is general Symfony/Twig global variables knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'What is the purpose of the `path()` function in Twig?'
    answers:
      - { value: 'To generate an absolute URL for a named route.', correct: false }
      - { value: 'To generate a relative path for a named route.', correct: true }
      - { value: 'To get the file path of the current template.', correct: false }
      - { value: 'To check if a route exists.', correct: false }
    help: |
      The `path()` function generates a relative path for a named route.
      (This is general Symfony routing in Twig knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'Which of the following is the correct way to display the current user''s username in a Twig template?'
    answers:
      - { value: '{{ app.user.username }}', correct: true }
      - { value: '{{ security.user.username }}', correct: false }
      - { value: '{{ user.username }}', correct: false }
      - { value: '{{ get_user().username }}', correct: false }
    help: |
      The `app.user` global variable provides access to the current user object.
      (This is general Symfony/Twig global variables knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'What is the purpose of the `url()` function in Twig?'
    answers:
      - { value: 'To generate a relative path for a named route.', correct: false }
      - { value: 'To generate an absolute URL for a named route.', correct: true }
      - { value: 'To get the current URL of the page.', correct: false }
      - { value: 'To redirect the user to a different URL.', correct: false }
    help: |
      The `url()` function generates an absolute URL for a named route.
      (This is general Symfony routing in Twig knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'Which of the following is the correct way to check if a user is logged in in a Twig template?'
    answers:
      - { value: '{% if app.user %}', correct: true }
      - { value: '{% if is_granted(''IS_AUTHENTICATED_FULLY'') %}', correct: true }
      - { value: '{% if app.security.is_logged_in %}', correct: false }
      - { value: '{% if user.isLoggedIn %}', correct: false }
    help: |
      Both `app.user` (checks if a user object exists) and `is_granted('IS_AUTHENTICATED_FULLY')` (checks for full authentication) are valid.
      (This is general Symfony/Twig security knowledge, not explicitly in the provided snippets, but fundamental.)
  -
    question: 'How can you include a Twig template and make variables from the current context available to it?'
    answers:
      - { value: '{% include ''_template.html.twig'' %}', correct: true }
      - { value: '{% include ''_template.html.twig'' with _context %}', correct: false }
      - { value: '{% include ''_template.html.twig'' only %}', correct: false }
      - { value: '{% include ''_template.html.twig'' without {''} %}', correct: false }
    help: |
      By default, `include` makes variables from the current context available.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `block` function in Twig?'
    answers:
      - { value: 'To render the content of a specific block from the current template or its parent.', correct: true }
      - { value: 'To define a new block.', correct: false }
      - { value: 'To check if a block exists.', correct: false }
      - { value: 'To get a list of all defined blocks.', correct: false }
    help: |
      The `block()` function renders the content of a specific block.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig filter is used to truncate a string to a specified length and append an ellipsis?'
    answers:
      - { value: '{{ text|truncate(10) }}', correct: true }
      - { value: '{{ text|limit(10) }}', correct: false }
      - { value: '{{ text|cut(10) }}', correct: false }
      - { value: '{{ text|shorten(10) }}', correct: false }
    help: |
      The `truncate` filter truncates a string to a specified length.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `for` loop''s `loop` variable in Twig?'
    answers:
      - { value: 'It provides information about the current iteration, such as `loop.index`, `loop.first`, `loop.last`, etc.', correct: true }
      - { value: 'It stores the current item in the iteration.', correct: false }
      - { value: 'It is a counter for the loop iterations.', correct: false }
      - { value: 'It defines the loop''s range.', correct: false }
    help: |
      The `loop` variable provides useful information about the current loop iteration.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to display a variable `name` only if it is not empty?'
    answers:
      - { value: '{% if name is not empty %}{{ name }}{% endif %}', correct: true }
      - { value: '{% if name %}{{ name }}{% endif %}', correct: true }
      - { value: '{{ name ?: '''' }}', correct: false }
      - { value: '{% if name is defined and name != '''' %}{{ name }}{% endif %}', correct: true }
    help: |
      `is not empty`, `if name` (evaluates to false for empty strings/null/false), and `is defined and name != ''` are all valid.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `constant()` function in Twig?'
    answers:
      - { value: 'To define a new constant in the template.', correct: false }
      - { value: 'To access a PHP class constant or a global constant.', correct: true }
      - { value: 'To check if a constant is defined.', correct: false }
      - { value: 'To convert a string to a constant name.', correct: false }
    help: |
      The `constant()` function allows accessing PHP constants.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig filter is used to join elements of an array into a string with a specified separator?'
    answers:
      - { value: '{{ array|join('', '') }}', correct: true }
      - { value: '{{ array|implode('', '') }}', correct: false }
      - { value: '{{ array|concat('', '') }}', correct: false }
      - { value: '{{ array|merge('', '') }}', correct: false }
    help: |
      The `join` filter joins elements of an array into a string.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `sort` filter in Twig?'
    answers:
      - { value: 'To sort an array or traversable object.', correct: true }
      - { value: 'To sort a string alphabetically.', correct: false }
      - { value: 'To sort elements based on a custom comparison function.', correct: false }
      - { value: 'To sort a database query result.', correct: false }
    help: |
      The `sort` filter sorts an array or traversable object.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to define a Twig macro named `button` that takes `text` and `url` as arguments?'
    answers:
      - { value: '{% macro button(text, url) %}<a href="{{ url }}">{{ text }}</a>{% endmacro %}', correct: true }
      - { value: '{% function button(text, url) %}<a href="{{ url }}">{{ text }}</a>{% endfunction %}', correct: false }
      - { value: '{% def button(text, url) %}<a href="{{ url }}">{{ text }}</a>{% enddef %}', correct: false }
      - { value: '{% macro button(text, url) %}<a href="{{ url }}">{{ text }}</a>', correct: false }
    help: |
      The `macro` tag is used to define reusable Twig code blocks with arguments.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `date_modify` filter in Twig?'
    answers:
      - { value: 'To format a date according to a specific string.', correct: false }
      - { value: 'To modify a date by adding or subtracting time, using a string format like "+1 day" or "-2 hours".', correct: true }
      - { value: 'To compare two dates.', correct: false }
      - { value: 'To convert a string to a date object.', correct: false }
    help: |
      The `date_modify` filter modifies a date.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig filter is used to convert a string to title case (first letter of each word capitalized)?'
    answers:
      - { value: '{{ text|title }}', correct: true }
      - { value: '{{ text|capitalize_words }}', correct: false }
      - { value: '{{ text|ucwords }}', correct: false }
      - { value: '{{ text|to_title }}', correct: false }
    help: |
      The `title` filter converts a string to title case.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `merge` filter in Twig?'
    answers:
      - { value: 'To combine two arrays or hashes into a new one.', correct: true }
      - { value: 'To concatenate two strings.', correct: false }
      - { value: 'To merge changes from a child template into a parent template.', correct: false }
      - { value: 'To combine multiple CSS or JavaScript files.', correct: false }
    help: |
      The `merge` filter combines two arrays or hashes.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to display the value of a configuration parameter named `app.name` in Twig?'
    answers:
      - { value: '{{ app.name }}', correct: false }
      - { value: '{{ parameter(''app.name'') }}', correct: true }
      - { value: '{{ config.app_name }}', correct: false }
      - { value: '{{ get_parameter(''app.name'') }}', correct: false }
    help: |
      The `parameter()` function (if enabled as a global) or accessing through `app.parameters` (if exposed) can be used. The `parameter()` function is more direct for configuration parameters.
      (This is general Symfony/Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `random` function in Twig?'
    answers:
      - { value: 'To generate a random number.', correct: true }
      - { value: 'To select a random element from an array.', correct: true }
      - { value: 'To shuffle the elements of an array.', correct: false }
      - { value: 'To generate a random string.', correct: false }
    help: |
      The `random` function can generate a random number or select a random element from a sequence.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to check if a variable `user` is an instance of a specific class `App\\Entity\\User` in Twig?'
    answers:
      - { value: '{% if user is instanceof(''App\\Entity\\User'') %}', correct: true }
      - { value: '{% if user is a(''App\\Entity\\User'') %}', correct: false }
      - { value: '{% if user.instanceof(''App\\Entity\\User'') %}', correct: false }
      - { value: '{% if user is type(''App\\Entity\\User'') %}', correct: false }
    help: |
      The `is instanceof` test is used to check the class of an object.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `batch` filter in Twig?'
    answers:
      - { value: 'To group items in an array into smaller arrays (batches) of a specified size.', correct: true }
      - { value: 'To process items in a loop in batches.', correct: false }
      - { value: 'To execute a batch of database queries.', correct: false }
      - { value: 'To combine multiple arrays into one.', correct: false }
    help: |
      The `batch` filter groups items into smaller arrays.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig filter is used to reverse the order of elements in an array or characters in a string?'
    answers:
      - { value: '{{ list|reverse }}', correct: true }
      - { value: '{{ list|invert }}', correct: false }
      - { value: '{{ list|flip }}', correct: false }
      - { value: '{{ list|order_desc }}', correct: false }
    help: |
      The `reverse` filter reverses the order of elements.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `keys` filter in Twig?'
    answers:
      - { value: 'To get all values from an array or hash.', correct: false }
      - { value: 'To get all keys from an array or hash.', correct: true }
      - { value: 'To check if a key exists in an array.', correct: false }
      - { value: 'To sort an array by its keys.', correct: false }
    help: |
      The `keys` filter returns all keys from an array or hash.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to display the current date and time in a Twig template?'
    answers:
      - { value: '{{ "now"|date(''Y-m-d H:i:s'') }}', correct: true }
      - { value: '{{ date()|format(''Y-m-d H:i:s'') }}', correct: false }
      - { value: '{{ current_datetime|date(''Y-m-d H:i:s'') }}', correct: false }
      - { value: '{{ new Date()|format(''Y-m-d H:i:s'') }}', correct: false }
    help: |
      The `date` filter can format a string like "now" into a date.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `first` filter in Twig?'
    answers:
      - { value: 'To get the last element of an array or string.', correct: false }
      - { value: 'To get the first element of an array or string.', correct: true }
      - { value: 'To check if an array is empty.', correct: false }
      - { value: 'To get the first character of a string.', correct: true }
    help: |
      The `first` filter gets the first element of an array or string.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `last` filter in Twig?'
    answers:
      - { value: 'To get the first element of an array or string.', correct: false }
      - { value: 'To get the last element of an array or string.', correct: true }
      - { value: 'To check if an array is full.', correct: false }
      - { value: 'To get the last character of a string.', correct: true }
    help: |
      The `last` filter gets the last element of an array or string.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to check if a string `text` starts with "Hello" in Twig?'
    answers:
      - { value: '{% if text starts with ''Hello'' %}', correct: true }
      - { value: '{% if text|starts_with(''Hello'') %}', correct: false }
      - { value: '{% if text.startsWith(''Hello'') %}', correct: false }
      - { value: '{% if text matches ''/^Hello/'' %}', correct: false }
    help: |
      The `starts with` test is used to check if a string starts with a given substring.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to check if a string `text` ends with "World" in Twig?'
    answers:
      - { value: '{% if text ends with ''World'' %}', correct: true }
      - { value: '{% if text|ends_with(''World'') %}', correct: false }
      - { value: '{% if text.endsWith(''World'') %}', correct: false }
      - { value: '{% if text matches ''/World$/'' %}', correct: false }
    help: |
      The `ends with` test is used to check if a string ends with a given substring.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `length` filter in Twig?'
    answers:
      - { value: 'To get the number of elements in an array or the length of a string.', correct: true }
      - { value: 'To truncate a string to a specific length.', correct: false }
      - { value: 'To check if a variable has a length.', correct: false }
      - { value: 'To set the maximum length of a string.', correct: false }
    help: |
      The `length` filter returns the number of elements in an array or the length of a string.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which Twig filter is used to replace all occurrences of a substring within a string?'
    answers:
      - { value: '{{ text|replace(''old'', ''new'') }}', correct: true }
      - { value: '{{ text|str_replace(''old'', ''new'') }}', correct: false }
      - { value: '{{ text|substitute(''old'', ''new'') }}', correct: false }
      - { value: '{{ text|change(''old'', ''new'') }}', correct: false }
    help: |
      The `replace` filter replaces all occurrences of a substring.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'What is the purpose of the `round` filter in Twig?'
    answers:
      - { value: 'To round a number to the nearest integer or to a specified precision.', correct: true }
      - { value: 'To round a number up to the nearest integer.', correct: false }
      - { value: 'To round a number down to the nearest integer.', correct: false }
      - { value: 'To format a number with commas.', correct: false }
    help: |
      The `round` filter rounds a number.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
  -
    question: 'Which of the following is the correct way to concatenate two strings `string1` and `string2` in Twig?'
    answers:
      - { value: '{{ string1 ~ string2 }}', correct: true }
      - { value: '{{ string1 + string2 }}', correct: false }
      - { value: '{{ concat(string1, string2) }}', correct: false }
      - { value: '{{ string1.string2 }}', correct: false }
    help: |
      The `~` operator is used for string concatenation.
      (This is general Twig knowledge, not explicitly in the provided snippets, but fundamental to templating.)
```