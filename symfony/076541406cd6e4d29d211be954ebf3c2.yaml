```yaml
category: Controllers
questions:
  - question: 'What is the primary return type for a Symfony controller action method?'
    answers:
      - { value: 'string', correct: false }
      - { value: 'array', correct: false }
      - { value: 'Symfony\Component\HttpFoundation\Response', correct: true }
      - { value: 'void', correct: false }
    help: |
      'https://symfony.com/doc/current/book/controller'
  - question: 'Which of the following functionalities are directly provided by extending `Symfony\Bundle\FrameworkBundle\Controller\AbstractController`?'
    answers:
      - { value: 'Access to the `Request` object via `$this->getRequest()`', correct: false }
      - { value: '`render()` method for Twig templates', correct: true }
      - { value: '`redirectToRoute()` helper', correct: true }
      - { value: 'Automatic dependency injection for all services', correct: false }
    help: |
      'https://symfony.com/doc/current/book/page_creation'
  - question: 'How can you access the `Request` object within a Symfony controller action method to retrieve query parameters?'
    answers:
      - { value: '$this->get(''request'')', correct: false }
      - { value: '$this->container->get(''request'')', correct: false }
      - { value: 'Type-hinting `Symfony\Component\HttpFoundation\Request` as a method argument', correct: true }
      - { value: 'Using the global `$_GET` superglobal', correct: false }
    help: |
      'https://symfony.com/doc/current/book/controller'
  - question: 'What is the recommended way to generate a 404 Not Found response from a Symfony controller?'
    answers:
      - { value: 'return new Response(''Not Found'', 404);', correct: false }
      - { value: 'throw new \Exception(''Page not found'', 404);', correct: false }
      - { value: 'throw $this->createNotFoundException(''The resource does not exist.'');', correct: true }
      - { value: 'return $this->render(''bundles/TwigBundle/Exception/error404.html.twig'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/controller'
  - question: 'To redirect a user to another route named `app_product_show` with a `productId` parameter of `123`, which method should you use in an `AbstractController`?'
    answers:
      - { value: 'return $this->redirect(''/product/123'');', correct: false }
      - { value: 'return $this->redirectToRoute(''app_product_show'', [''productId'' => 123]);', correct: true }
      - { value: 'return new RedirectResponse($this->generateUrl(''app_product_show'', [''productId'' => 123]));', correct: false }
      - { value: 'return $this->forward(''App\\Controller\\ProductController::show'', [''productId'' => 123]);', correct: false }
    help: |
      'https://symfony.com/doc/current/book/controller'
  - question: |
      'Consider the following code snippet:
      ```php
      // In MyController.php
      public function index(): Response
      {
          $response = $this->forward(''App\\Controller\\OtherController::fancy'', [
              ''name'' => ''Symfony'',
              ''color'' => ''blue'',
          ]);

          // ... further modify the response or return it directly

          return $response;
      }
      ```
      What is the primary purpose of the `forward()` method in this context?'
    answers:
      - { value: 'To perform an HTTP redirect to `OtherController::fancy`.', correct: false }
      - { value: 'To include the content of `OtherController::fancy` directly into the current response without a new HTTP request.', correct: true }
      - { value: 'To execute `OtherController::fancy` in a separate process.', correct: false }
      - { value: 'To make an AJAX call to `OtherController::fancy`.', correct: false }
    help: |
      'https://symfony.com/doc/current/controller/forwarding'
  - question: 'Which attribute can be used to automatically map an entire HTTP query string into a custom Data Transfer Object (DTO) in a Symfony controller action?'
    answers:
      - { value: '`#[MapQueryParameter]`', correct: false }
      - { value: '`#[MapRequestPayload]`', correct: false }
      - { value: '`#[MapQueryString]`', correct: true }
      - { value: '`#[MapRequest]`', correct: false }
    help: |
      'https://symfony.com/doc/current/book/controller'
  - question: 'How can you inject a service, such as `Psr\Log\LoggerInterface`, into a Symfony controller action method using autowiring?'
    answers:
      - { value: 'By manually configuring it in `services.yaml` for each controller.', correct: false }
      - { value: 'By calling `$this->get(''logger'')` inside the action.', correct: false }
      - { value: 'By type-hinting the service interface as an argument in the action method.', correct: true }
      - { value: 'By extending a specific `LoggerAwareController` class.', correct: false }
    help: |
      'https://symfony.com/doc/current/controller'
  - question: 'Which magic method allows a PHP class to be treated as a callable function, making it suitable for an invokable Symfony controller?'
    answers:
      - { value: '`__call()`', correct: false }
      - { value: '`__invoke()`', correct: true }
      - { value: '`__construct()`', correct: false }
      - { value: '`__toString()`', correct: false }
    help: |
      'https://symfony.com/doc/current/controller/service'
  - question: 'How do you add a flash message named ''success'' with the content ''Item saved successfully!'' in a Symfony controller extending `AbstractController`?'
    answers:
      - { value: '$this->get(''session'')->getFlashBag()->add(''success'', ''Item saved successfully!'');', correct: false }
      - { value: '$this->addFlash(''success'', ''Item saved successfully!'');', correct: true }
      - { value: '$this->session->setFlash(''success'', ''Item saved successfully!'');', correct: false }
      - { value: '$this->getFlashBag()->add(''success'', ''Item saved successfully!'');', correct: false }
    help: |
      'https://symfony.com/doc/current/book/service_container'
```