```yaml
category: Automated Tests
questions:
  - question: 'Which command is used to install the Symfony Test Pack?'
    answers:
      - { value: 'composer install symfony/test-pack', correct: false }
      - { value: 'composer require --dev symfony/test-pack', correct: true }
      - { value: 'php bin/console symfony:test:install', correct: false }
      - { value: 'symfony require test-pack', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the primary purpose of `WebTestCase::createClient()` in Symfony functional tests?'
    answers:
      - { value: 'To create a real browser instance for end-to-end testing.', correct: false }
      - { value: 'To simulate a browser and make requests to the application.', correct: true }
      - { value: 'To connect to an external API for integration testing.', correct: false }
      - { value: 'To generate test data for the database.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you run all PHPUnit tests in a Symfony application?'
    answers:
      - { value: 'php bin/phpunit', correct: true }
      - { value: 'phpunit --all', correct: false }
      - { value: 'php bin/console tests:run', correct: false }
      - { value: 'composer test', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which method is used on the `Client` object to make a GET request in a functional test?'
    answers:
      - { value: '$client->get(\'/\');', correct: false }
      - { value: '$client->sendRequest(\'GET\', \'/\');', correct: false }
      - { value: '$client->request(\'GET\', \'/\');', correct: true }
      - { value: '$client->browse(\'/\');', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What does the `Crawler` object provide access to after a client request?'
    answers:
      - { value: 'The raw HTTP response headers.', correct: false }
      - { value: 'The application''s service container.', correct: false }
      - { value: 'The DOM of the response content.', correct: true }
      - { value: 'The database connection.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How can you assert that the response is successful in a functional test?'
    answers:
      - { value: '$this->assertEquals(200, $client->getResponse()->getStatusCode());', correct: true }
      - { value: '$this->assertResponseIsSuccessful();', correct: true }
      - { value: '$this->assertTrue($client->getResponse()->isOk());', correct: false }
      - { value: '$this->assertStatusCode(200);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which assertion is used to check if an HTML element contains specific text in a functional test?'
    answers:
      - { value: '$this->assertSelectorTextContains(\'h1\', \'Hello World\');', correct: true }
      - { value: '$this->assertHtmlContains(\'h1\', \'Hello World\');', correct: false }
      - { value: '$this->assertElementHasText(\'h1\', \'Hello World\');', correct: false }
      - { value: '$this->assertTextInSelector(\'h1\', \'Hello World\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `KernelTestCase::bootKernel()`?'
    answers:
      - { value: 'To start a web server for functional tests.', correct: false }
      - { value: 'To initialize the Symfony kernel and access services.', correct: true }
      - { value: 'To load database fixtures for testing.', correct: false }
      - { value: 'To compile Twig templates.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you access a service from the container within a `KernelTestCase`?'
    answers:
      - { value: '$this->getContainer()->get(MyService::class);', correct: false }
      - { value: 'static::getContainer()->get(MyService::class);', correct: true }
      - { value: '$this->container->get(MyService::class);', correct: false }
      - { value: 'Kernel::getService(MyService::class);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which environment variable is typically used to configure a dedicated database for tests?'
    answers:
      - { value: 'APP_ENV=test', correct: false }
      - { value: 'DATABASE_URL_TEST', correct: false }
      - { value: 'DATABASE_URL', correct: true }
      - { value: 'TEST_DB_CONNECTION', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `dama/doctrine-test-bundle`?'
    answers:
      - { value: 'To generate Doctrine entities from database schema.', correct: false }
      - { value: 'To automatically reset the database state before each test using transactions.', correct: true }
      - { value: 'To provide a graphical interface for managing test databases.', correct: false }
      - { value: 'To mock Doctrine repositories in unit tests.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How can you enable the Symfony Profiler for specific functional tests?'
    answers:
      - { value: 'The profiler is always enabled in the test environment.', correct: false }
      - { value: 'By setting `framework.profiler.enabled: true` and `collect: false` in `config/packages/test/web_profiler.yaml` and then calling `$client->enableProfiler();`.', correct: true }
      - { value: 'By adding `profiler: true` to the `createClient()` options.', correct: false }
      - { value: 'It requires a separate bundle for testing.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/profiling
  - question: 'Which method is used to simulate an AJAX request with the Symfony test client?'
    answers:
      - { value: '$client->ajaxRequest(\'POST\', \'/\');', correct: false }
      - { value: '$client->xmlHttpRequest(\'POST\', \'/\');', correct: true }
      - { value: '$client->jsonRequest(\'POST\', \'/\');', correct: false }
      - { value: '$client->request(\'POST\', \'/\', [], [], [\'HTTP_X_REQUESTED_WITH\' => \'XMLHttpRequest\']);', correct: true }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you simulate a logged-in user in a Symfony functional test without a full login process?'
    answers:
      - { value: '$client->login(\'username\', \'password\');', correct: false }
      - { value: '$client->loginUser($userObject);', correct: true }
      - { value: 'By setting session variables directly.', correct: false }
      - { value: 'It is not possible to simulate login; a full login flow must be tested.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `Client::insulate()`?'
    answers:
      - { value: 'To prevent the client from making external HTTP requests.', correct: false }
      - { value: 'To run each client''s requests in a dedicated and clean PHP process, preventing global state issues.', correct: true }
      - { value: 'To encrypt communication between the client and the server.', correct: false }
      - { value: 'To limit the number of requests a client can make.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/insulating_clients
  - question: 'How can you send custom HTTP headers with a Symfony test client request?'
    answers:
      - { value: '$client->request(\'GET\', \'/\', [], [], [\'HTTP_CUSTOM_HEADER\' => \'value\']);', correct: true }
      - { value: '$client->setHeader(\'Custom-Header\', \'value\');', correct: false }
      - { value: '$client->withHeaders([\'Custom-Header\' => \'value\'])->request(\'GET\', \'/\');', correct: false }
      - { value: 'Custom headers are not supported in functional tests.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'Which assertion checks if the page title exactly matches a given string?'
    answers:
      - { value: '$this->assertPageTitleContains(\'My Title\');', correct: false }
      - { value: '$this->assertPageTitleSame(\'My Title\');', correct: true }
      - { value: '$this->assertSelectorTextSame(\'title\', \'My Title\');', correct: false }
      - { value: '$this->assertTitleEquals(\'My Title\');', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of elements matching a CSS selector exist in the response?'
    answers:
      - { value: '$this->assertCount(5, $crawler->filter(\'.item\'));', correct: true }
      - { value: '$this->assertSelectorCount(5, \'.item\');', correct: true }
      - { value: '$this->assertEquals(5, $crawler->filter(\'.item\')->count());', correct: true }
      - { value: '$this->assertElementsExist(5, \'.item\');', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the primary benefit of using `PantherTestCaseTrait` with other testing frameworks?'
    answers:
      - { value: 'It allows running JavaScript directly in PHPUnit.', correct: false }
      - { value: 'It enables end-to-end testing capabilities (like browser automation) within existing test setups.', correct: true }
      - { value: 'It provides faster unit test execution.', correct: false }
      - { value: 'It automatically generates test data.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'Which assertion is used to check if an element will eventually exist in the DOM in a Panther test?'
    answers:
      - { value: '$this->assertSelectorExists(\'.popin\');', correct: false }
      - { value: '$this->assertSelectorWillExist(\'.popin\');', correct: true }
      - { value: '$client->waitFor(\'.popin\');', correct: false }
      - { value: '$this->assertElementAppears(\'.popin\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'How do you check if a form''s data is synchronized after submission in a unit test?'
    answers:
      - { value: '$form->isSubmitted() && $form->isValid();', correct: false }
      - { value: '$this->assertTrue($form->isSynchronized());', correct: true }
      - { value: '$form->getData() === $formData;', correct: false }
      - { value: '$form->isBound();', correct: false }
    help: |
      https://symfony.com/doc/current/form/unit_testing
  - question: 'What is the purpose of `assertEmailCount()` in Mailer tests?'
    answers:
      - { value: 'To check the number of emails sent by a specific user.', correct: false }
      - { value: 'To assert the total number of emails sent or queued by the Mailer component.', correct: true }
      - { value: 'To verify the number of email attachments.', correct: false }
      - { value: 'To count the number of email addresses in the recipient list.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How can you assert that the text body of an email contains a specific string?'
    answers:
      - { value: '$this->assertEmailTextBodyContains($email, \'Expected Text\');', correct: true }
      - { value: '$email->assertTextContains(\'Expected Text\');', correct: false }
      - { value: '$this->assertStringContainsString(\'Expected Text\', $email->getTextBody());', correct: true }
      - { value: '$this->assertEmailBody(\'text\', \'Expected Text\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the recommended way to clear the Symfony test cache when debug mode is disabled?'
    answers:
      - { value: 'It is automatically cleared by PHPUnit.', correct: false }
      - { value: 'Manually remove the `var/cache/test` directory using `Symfony\\Component\\Filesystem\\Filesystem`.', correct: true }
      - { value: 'Run `php bin/console cache:clear --env=test`.', correct: false }
      - { value: 'Set `cache_clear: true` in `phpunit.xml.dist`.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which command is used to generate a new application test class in Symfony?'
    answers:
      - { value: 'php bin/console make:test', correct: true }
      - { value: 'php bin/console generate:test', correct: false }
      - { value: 'symfony new:test', correct: false }
      - { value: 'composer create-test', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'When testing host-based routes, which HTTP header must be set in the client request?'
    answers:
      - { value: 'HTTP_ACCEPT', correct: false }
      - { value: 'HTTP_HOST', correct: true }
      - { value: 'HTTP_REFERER', correct: false }
      - { value: 'HTTP_USER_AGENT', correct: false }
    help: |
      https://symfony.com/doc/current/routing
  - question: 'What is the purpose of `assertNotificationSubjectContains()` in Notifier tests?'
    answers:
      - { value: 'To check if the notification content contains a specific string.', correct: false }
      - { value: 'To assert that the subject of a notification contains a given text.', correct: true }
      - { value: 'To verify the recipient of a notification.', correct: false }
      - { value: 'To count the number of notifications with a specific subject.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you load Doctrine fixtures into the test database?'
    answers:
      - { value: 'php bin/console doctrine:schema:update --force --env=test', correct: false }
      - { value: 'php bin/console --env=test doctrine:fixtures:load', correct: true }
      - { value: 'php bin/console doctrine:database:import --env=test', correct: false }
      - { value: 'php bin/console fixtures:load', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which PHPUnit assertion should you use to check if a specific cookie is set by the test client?'
    answers:
      - { value: '$this->assertResponseHasCookie(\'cookie_name\');', correct: false }
      - { value: '$this->assertBrowserHasCookie(\'cookie_name\');', correct: true }
      - { value: '$client->getCookieJar()->has(\'cookie_name\');', correct: false }
      - { value: '$this->assertCookieExists(\'cookie_name\');', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the primary difference between `assertSelectorTextContains()` and `assertSelectorTextSame()`?'
    answers:
      - { value: '`Contains` checks for partial match, `Same` checks for exact match.', correct: true }
      - { value: '`Contains` is for HTML, `Same` is for plain text.', correct: false }
      - { value: '`Contains` works on all matching elements, `Same` only on the first.', correct: false }
      - { value: 'There is no difference; they are aliases.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which assertion is used to check if a notification is currently queued?'
    answers:
      - { value: '$this->assertNotificationIsQueued($event);', correct: true }
      - { value: '$this->assertNotificationSent($event);', correct: false }
      - { value: '$this->assertNotificationExistsInQueue($event);', correct: false }
      - { value: '$event->isQueued();', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How can you configure separate test suites for multiple applications in `phpunit.xml`?'
    answers:
      - { value: 'By defining multiple `<testsuite>` elements with different `<directory>` paths.', correct: true }
      - { value: 'By creating separate `phpunit.xml` files for each application.', correct: false }
      - { value: 'By using the `--testsuite` option with `php bin/phpunit`.', correct: false }
      - { value: 'Symfony automatically detects multiple application test directories.', correct: false }
    help: |
      https://symfony.com/doc/current/configuration/multiple_kernels
  - question: 'What is the purpose of `assertSelectorWillBeVisible()` in Panther tests?'
    answers:
      - { value: 'To assert that an element is currently visible on the page.', correct: false }
      - { value: 'To assert that an element will eventually become visible.', correct: true }
      - { value: 'To check if an element has the CSS property `display: block;`.', correct: false }
      - { value: 'To wait for an element to be rendered in the DOM.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'Which method on the `Client` object allows you to wait for an element to appear in the DOM in a Panther test?'
    answers:
      - { value: '$client->wait(\'.selector\');', correct: false }
      - { value: '$client->waitFor(\'.selector\');', correct: true }
      - { value: '$client->waitUntilExists(\'.selector\');', correct: false }
      - { value: '$client->find(\'.selector\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'What does `assertBrowserCookieValueSame()` do?'
    answers:
      - { value: 'Asserts that a cookie exists with a specific value.', correct: true }
      - { value: 'Asserts that a cookie is set for the current request.', correct: false }
      - { value: 'Asserts that a cookie is not set.', correct: false }
      - { value: 'Asserts that the browser has the same cookies as the server.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'When should you use `KernelTestCase` instead of `WebTestCase`?'
    answers:
      - { value: 'When you need to test HTTP requests and responses.', correct: false }
      - { value: 'When you need to test services and interact with the container directly, without making HTTP requests.', correct: true }
      - { value: 'When performing end-to-end browser tests.', correct: false }
      - { value: 'When testing database interactions only.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertSelectorExists()`?'
    answers:
      - { value: 'To check if an element is visible on the page.', correct: false }
      - { value: 'To assert that at least one element matching the given selector exists in the response.', correct: true }
      - { value: 'To count the number of elements matching a selector.', correct: false }
      - { value: 'To verify the content of an element.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'Which configuration setting in `framework.yaml` enables testing-related services like `test.client`?'
    answers:
      - { value: 'framework.test_mode: true', correct: false }
      - { value: 'framework.testing: true', correct: false }
      - { value: 'framework.test: true', correct: true }
      - { value: 'framework.enable_tests: true', correct: false }
    help: |
      https://symfony.com/doc/current/reference/configuration/framework
  - question: 'How do you run tests for a specific directory using PHPUnit?'
    answers:
      - { value: 'php bin/phpunit --dir tests/Form', correct: false }
      - { value: 'php bin/phpunit tests/Form', correct: true }
      - { value: 'php bin/console test:dir tests/Form', correct: false }
      - { value: 'phpunit tests/Form/', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the main advantage of using `dama/doctrine-test-bundle` for database testing?'
    answers:
      - { value: 'It allows using an in-memory SQLite database for all tests.', correct: false }
      - { value: 'It ensures test isolation by wrapping each test in a database transaction that is rolled back.', correct: true }
      - { value: 'It provides a GUI for managing test data.', correct: false }
      - { value: 'It speeds up database queries during tests.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'Which assertion is used to check if an element''s attribute contains a specific string in a Panther test?'
    answers:
      - { value: '$this->assertSelectorAttributeContains(\'.price\', \'data-old-price\', \'€25\');', correct: true }
      - { value: '$this->assertAttributeContains(\'.price\', \'data-old-price\', \'€25\');', correct: false }
      - { value: '$this->assertElementAttributeContains(\'.price\', \'data-old-price\', \'€25\');', correct: false }
      - { value: '$this->assertSelectorAttributeValue(\'.price\', \'data-old-price\', \'€25\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'What is the purpose of `assertQueuedEmailCount()`?'
    answers:
      - { value: 'To count emails that failed to send.', correct: false }
      - { value: 'To assert the number of emails that were queued (e.g., using Messenger).', correct: true }
      - { value: 'To check the number of emails in the outbox.', correct: false }
      - { value: 'To verify the total number of emails sent and queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that the HTML body of an email does NOT contain a specific string?'
    answers:
      - { value: '$this->assertEmailHtmlBodyNotContains($email, \'Unexpected Text\');', correct: true }
      - { value: '$this->assertStringNotContainsString(\'Unexpected Text\', $email->getHtmlBody());', correct: true }
      - { value: '$email->assertHtmlNotContains(\'Unexpected Text\');', correct: false }
      - { value: '$this->assertNotHtmlBodyContains(\'Unexpected Text\', $email);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the correct way to create the test database and schema in Symfony?'
    answers:
      - { value: 'php bin/console --env=test doctrine:database:create && php bin/console --env=test doctrine:schema:create', correct: true }
      - { value: 'php bin/console doctrine:database:create --test && php bin/console doctrine:schema:update --force --test', correct: false }
      - { value: 'php bin/console make:migration --env=test', correct: false }
      - { value: 'composer run-script create-test-db', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which method on the `Client` object is used to simulate a POST request?'
    answers:
      - { value: '$client->post(\'/\', $data);', correct: false }
      - { value: '$client->submitForm(\'Submit\', $data);', correct: false }
      - { value: '$client->request(\'POST\', \'/\', $parameters, $files, $server, $content);', correct: true }
      - { value: '$client->sendPost(\'/\', $data);', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertAnySelectorTextContains()`?'
    answers:
      - { value: 'To assert that the first element matching the selector contains the text.', correct: false }
      - { value: 'To assert that any element matching the selector contains the text.', correct: true }
      - { value: 'To assert that all elements matching the selector contain the text.', correct: false }
      - { value: 'To assert that no element matching the selector contains the text.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How can you retrieve the response content as a string from the `Client` object?'
    answers:
      - { value: '$client->getResponse()->getContent();', correct: true }
      - { value: '$client->getResponseBody();', correct: false }
      - { value: '$client->getResponseText();', correct: false }
      - { value: '$client->getResponse()->toString();', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the role of `PHPUnitExtension` in `dama/doctrine-test-bundle`?'
    answers:
      - { value: 'It provides custom PHPUnit assertions for Doctrine entities.', correct: false }
      - { value: 'It integrates the bundle''s transaction-based database resetting with PHPUnit.', correct: true }
      - { value: 'It generates test data for Doctrine fixtures.', correct: false }
      - { value: 'It allows running Doctrine migrations during tests.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which assertion is used to check if a form field is valid after submission?'
    answers:
      - { value: '$form->get(\'fieldName\')->isValid();', correct: true }
      - { value: '$this->assertTrue($form->get(\'fieldName\')->isSubmitted() && $form->get(\'fieldName\')->isValid());', correct: true }
      - { value: '$form->get(\'fieldName\')->hasErrors();', correct: false }
      - { value: '$this->assertFormValid($form, \'fieldName\');', correct: false }
    help: |
      https://symfony.com/doc/current/form/unit_testing
  - question: 'What is the purpose of `assertNotificationCount()`?'
    answers:
      - { value: 'To count the number of notifications displayed to the user.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by the Notifier component.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you run tests for a specific file in Symfony using PHPUnit?'
    answers:
      - { value: 'php bin/phpunit tests/Controller/MyControllerTest.php', correct: true }
      - { value: 'php bin/phpunit --file tests/Controller/MyControllerTest.php', correct: false }
      - { value: 'php bin/console test:file tests/Controller/MyControllerTest.php', correct: false }
      - { value: 'phpunit tests/Controller/MyControllerTest.php', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the primary use case for `PantherTestCase`?'
    answers:
      - { value: 'Unit testing individual PHP classes.', correct: false }
      - { value: 'Functional testing of HTTP requests and responses without a real browser.', correct: false }
      - { value: 'End-to-end testing that involves JavaScript execution and browser automation.', correct: true }
      - { value: 'Integration testing of services and the dependency injection container.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'Which method on the `Client` object allows you to click on a link in a functional test?'
    answers:
      - { value: '$client->clickLink(\'Link Text\');', correct: true }
      - { value: '$client->findLink(\'Link Text\')->click();', correct: true }
      - { value: '$client->followRedirects()->request(\'GET\', \'/link/url\');', correct: false }
      - { value: '$client->navigate(\'Link Text\');', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you submit a form in a functional test using the `Client` and `Crawler` objects?'
    answers:
      - { value: '$client->submit($crawler->selectButton(\'Submit\')->form());', correct: true }
      - { value: '$client->submitForm(\'Submit\', [\'field\' => \'value\']);', correct: true }
      - { value: '$crawler->selectButton(\'Submit\')->click();', correct: false }
      - { value: '$client->request(\'POST\', \'/form-url\', $formData);', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertSelectorWillNotContain()` in Panther tests?'
    answers:
      - { value: 'To assert that an element currently does not contain specific text.', correct: false }
      - { value: 'To assert that an element will eventually not contain specific text.', correct: true }
      - { value: 'To check if an element has been removed from the DOM.', correct: false }
      - { value: 'To verify that an element''s text content is empty.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'How can you access the Symfony Profiler data after a client request in a functional test?'
    answers:
      - { value: '$client->getProfile();', correct: true }
      - { value: '$client->getProfilerData();', correct: false }
      - { value: '$client->getResponse()->getProfiler();', correct: false }
      - { value: 'The profiler data is not accessible in tests.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/profiling
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently queued.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'Which assertion is used to check if a specific cookie value is the same as expected?'
    answers:
      - { value: '$this->assertBrowserCookieValueSame(\'cookie_name\', \'expected_value\');', correct: true }
      - { value: '$this->assertCookieValueEquals(\'cookie_name\', \'expected_value\');', correct: false }
      - { value: '$client->getCookieJar()->get(\'cookie_name\')->getValue() === \'expected_value\';', correct: false }
      - { value: '$this->assertCookieEquals(\'cookie_name\', \'expected_value\');', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertSelectorWillBeDisabled()` in Panther tests?'
    answers:
      - { value: 'To assert that an element is currently disabled.', correct: false }
      - { value: 'To assert that an element will eventually become disabled.', correct: true }
      - { value: 'To check if an element has the `disabled` attribute.', correct: false }
      - { value: 'To verify that a form field is not editable.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'How can you configure Composer to autoload test classes in a multi-application setup?'
    answers:
      - { value: 'By adding entries to the `autoload-dev.psr-4` section in `composer.json`.', correct: true }
      - { value: 'By running `composer dump-autoload --optimize --dev`.', correct: false }
      - { value: 'By manually including test files in `phpunit.xml`.', correct: false }
      - { value: 'Symfony automatically detects test directories based on naming conventions.', correct: false }
    help: |
      https://symfony.com/doc/current/configuration/multiple_kernels
  - question: 'What is the purpose of `assertQueuedNotificationCount()`?'
    answers:
      - { value: 'To count the number of notifications that were sent successfully.', correct: false }
      - { value: 'To assert the number of notifications that are currently in the queue.', correct: true }
      - { value: 'To check the total number of notifications processed.', correct: false }
      - { value: 'To verify the number of notifications that failed to send.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which method on the `Client` object allows you to follow redirects automatically?'
    answers:
      - { value: '$client->followRedirects();', correct: true }
      - { value: '$client->setFollowRedirects(true);', correct: false }
      - { value: '$client->request(\'GET\', \'/\', [], [], [], [], true);', correct: false }
      - { value: '$client->enableRedirects();', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that the response status code is a specific value?'
    answers:
      - { value: '$this->assertEquals(404, $client->getResponse()->getStatusCode());', correct: true }
      - { value: '$this->assertResponseStatusCodeSame(404);', correct: true }
      - { value: '$this->assertStatusCode(404);', correct: false }
      - { value: '$client->getResponse()->assertStatusCode(404);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertSelectorWillNotExist()` in Panther tests?'
    answers:
      - { value: 'To assert that an element is currently not present in the DOM.', correct: false }
      - { value: 'To assert that an element will eventually be removed from the DOM.', correct: true }
      - { value: 'To check if an element has been hidden.', correct: false }
      - { value: 'To verify that an element has no children.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'Which method on the `Client` object allows you to make a raw request without a `Crawler` object being returned?'
    answers:
      - { value: '$client->rawRequest(\'GET\', \'/\');', correct: false }
      - { value: '$client->request(\'GET\', \'/\', [], [], [], null, false);', correct: false }
      - { value: '$client->request(\'GET\', \'/\', [], [], [], null, false);', correct: false }
      - { value: 'The `request()` method always returns a `Crawler` object if the response is HTML.', correct: true }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertSelectorWillBeEnabled()` in Panther tests?'
    answers:
      - { value: 'To assert that an element is currently enabled.', correct: false }
      - { value: 'To assert that an element will eventually become enabled.', correct: true }
      - { value: 'To check if an element has the `enabled` attribute.', correct: false }
      - { value: 'To verify that a form field is editable.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'How do you get the last sent email from the Mailer component in a test?'
    answers:
      - { value: '$this->getMailerMessage();', correct: true }
      - { value: '$this->getSentEmails()->last();', correct: false }
      - { value: '$this->getMailer()->getLastMessage();', correct: false }
      - { value: '$client->getProfile()->getCollector(\'mailer\')->getMessages()->last();', correct: true }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertSelectorWillContain()` in Panther tests?'
    answers:
      - { value: 'To assert that an element currently contains specific text.', correct: false }
      - { value: 'To assert that an element will eventually contain specific text.', correct: true }
      - { value: 'To check if an element''s text content is not empty.', correct: false }
      - { value: 'To verify that an element has children with specific text.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'How do you access the `Request` object from the `Client` in a functional test?'
    answers:
      - { value: '$client->getRequest();', correct: true }
      - { value: '$client->getLastRequest();', correct: true }
      - { value: '$client->getResponse()->getRequest();', correct: false }
      - { value: 'The request object is not directly accessible after the request is sent.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertSelectorWillNotBeVisible()` in Panther tests?'
    answers:
      - { value: 'To assert that an element is currently not visible.', correct: false }
      - { value: 'To assert that an element will eventually become hidden.', correct: true }
      - { value: 'To check if an element has the CSS property `display: none;`.', correct: false }
      - { value: 'To verify that an element has been removed from the DOM.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'Which method on the `Client` object allows you to access the `Response` object?'
    answers:
      - { value: '$client->getResponse();', correct: true }
      - { value: '$client->getLastResponse();', correct: true }
      - { value: '$client->getHttpResponse();', correct: false }
      - { value: '$client->response();', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of emails were queued by a particular transport?'
    answers:
      - { value: '$this->assertQueuedEmailCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertEmailCount(5, \'my_transport\', true);', correct: false }
      - { value: '$this->assertTransportQueuedEmailCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getQueuedEmails(\'my_transport\'));', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertSelectorAttributeWillNotContain()` in Panther tests?'
    answers:
      - { value: 'To assert that an element''s attribute currently does not contain specific text.', correct: false }
      - { value: 'To assert that an element''s attribute will eventually not contain specific text.', correct: true }
      - { value: 'To check if an element''s attribute has been removed.', correct: false }
      - { value: 'To verify that an element''s attribute value is empty.', correct: false }
    help: |
      https://symfony.com/doc/current/testing/end_to_end
  - question: 'How can you check if a form submission resulted in a redirect?'
    answers:
      - { value: '$client->getResponse()->isRedirect();', correct: true }
      - { value: '$this->assertResponseRedirects();', correct: true }
      - { value: '$client->getResponse()->getStatusCode() === 302;', correct: true }
      - { value: '$client->isRedirected();', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertAnySelectorTextSame()`?'
    answers:
      - { value: 'To assert that the first element matching the selector has the exact text.', correct: false }
      - { value: 'To assert that any element matching the selector has the exact text.', correct: true }
      - { value: 'To assert that all elements matching the selector have the exact text.', correct: false }
      - { value: 'To assert that no element matching the selector has the exact text.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific notification was sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(1, \'my_transport\');', correct: true }
      - { value: '$this->getNotifierMessages(\'my_transport\')->count() === 1;', correct: false }
      - { value: '$this->assertNotificationSentToTransport($notification, \'my_transport\');', correct: false }
      - { value: '$this->assertNotificationIsSent($notification, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertSelectorNotExists()`?'
    answers:
      - { value: 'To check if an element is hidden on the page.', correct: false }
      - { value: 'To assert that no element matching the given selector exists in the response.', correct: true }
      - { value: 'To verify that an element has been removed from the DOM.', correct: false }
      - { value: 'To assert that an element has no content.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How can you get the URL of the last redirect in a functional test?'
    answers:
      - { value: '$client->getHistory()->current()->getUri();', correct: false }
      - { value: '$client->getResponse()->headers->get(\'Location\');', correct: true }
      - { value: '$client->getRedirectUrl();', correct: false }
      - { value: '$client->getLastRedirect()->getUri();', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertEmailTextBodyNotContains()`?'
    answers:
      - { value: 'To assert that the text body of an email contains a specific string.', correct: false }
      - { value: 'To assert that the text body of an email does NOT contain a specific string.', correct: true }
      - { value: 'To check if the email body is empty.', correct: false }
      - { value: 'To verify that the email has no text body.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that the response content contains a specific string?'
    answers:
      - { value: '$this->assertStringContainsString(\'Expected Content\', $client->getResponse()->getContent());', correct: true }
      - { value: '$this->assertResponseContains(\'Expected Content\');', correct: false }
      - { value: '$this->assertContains(\'Expected Content\', $client->getResponse()->getContent());', correct: true }
      - { value: '$client->getResponse()->assertContains(\'Expected Content\');', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertPageTitleContains()`?'
    answers:
      - { value: 'To assert that the page title exactly matches a string.', correct: false }
      - { value: 'To assert that the `<title>` element contains the given title.', correct: true }
      - { value: 'To check if the page has a title.', correct: false }
      - { value: 'To verify the title attribute of the `<body>` tag.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How can you inspect the headers of the response in a functional test?'
    answers:
      - { value: '$client->getResponse()->headers->get(\'Content-Type\');', correct: true }
      - { value: '$client->getResponseHeaders();', correct: false }
      - { value: '$client->getHeaders();', correct: false }
      - { value: '$client->getResponse()->getHeaders();', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertEmailHtmlBodyContains()`?'
    answers:
      - { value: 'To assert that the HTML body of an email contains a specific string.', correct: true }
      - { value: 'To check if the email has an HTML body.', correct: false }
      - { value: 'To verify the plain text content of an email.', correct: false }
      - { value: 'To assert that the email subject contains a string.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a form field has a specific value after submission?'
    answers:
      - { value: '$this->assertEquals(\'expected_value\', $form->get(\'fieldName\')->getData());', correct: true }
      - { value: '$this->assertFormValueSame(\'fieldName\', \'expected_value\');', correct: false }
      - { value: '$form->get(\'fieldName\')->getValue() === \'expected_value\';', correct: false }
      - { value: '$this->assertInputValueSame(\'fieldName\', \'expected_value\');', correct: false }
    help: |
      https://symfony.com/doc/current/form/unit_testing
  - question: 'What is the purpose of `assertEmailHtmlBodyNotContains()`?'
    answers:
      - { value: 'To assert that the HTML body of an email contains a specific string.', correct: false }
      - { value: 'To assert that the HTML body of an email does NOT contain a specific string.', correct: true }
      - { value: 'To check if the email body is empty.', correct: false }
      - { value: 'To verify that the email has no HTML body.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How can you get all sent emails from the Mailer component in a test?'
    answers:
      - { value: '$this->getSentEmails();', correct: true }
      - { value: '$this->getMailer()->getAllMessages();', correct: false }
      - { value: '$client->getProfile()->getCollector(\'mailer\')->getMessages();', correct: true }
      - { value: '$this->getMessages();', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a form has no validation errors?'
    answers:
      - { value: '$this->assertTrue($form->isValid());', correct: true }
      - { value: '$this->assertFalse($form->isSubmitted() && !$form->isValid());', correct: false }
      - { value: '$this->assertCount(0, $form->getErrors(true));', correct: true }
      - { value: '$form->getErrors()->count() === 0;', correct: false }
    help: |
      https://symfony.com/doc/current/form/unit_testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How can you get the last queued notification from the Notifier component in a test?'
    answers:
      - { value: '$this->getNotifierMessage();', correct: false }
      - { value: '$this->getQueuedNotifications()->last();', correct: true }
      - { value: '$this->getNotifier()->getLastQueuedMessage();', correct: false }
      - { value: '$client->getProfile()->getCollector(\'notifier\')->getMessages()->last();', correct: true }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'Which assertion is used to check if a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by a particular transport?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertNotificationCount(5, \'my_transport\', true);', correct: false }
      - { value: '$this->assertTransportQueuedNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getQueuedNotifications(\'my_transport\'));', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How can you get all queued notifications from the Notifier component in a test?'
    answers:
      - { value: '$this->getQueuedNotifications();', correct: true }
      - { value: '$this->getNotifier()->getAllQueuedMessages();', correct: false }
      - { value: '$client->getProfile()->getCollector(\'notifier\')->getQueuedMessages();', correct: true }
      - { value: '$this->getMessagesInQueue();', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertEmailCount()` with a transport name?'
    answers:
      - { value: 'To count all emails regardless of transport.', correct: false }
      - { value: 'To assert the total number of emails sent or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of email attachments.', correct: false }
      - { value: 'To count the number of email addresses in the recipient list for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that the response content does NOT contain a specific string?'
    answers:
      - { value: '$this->assertStringNotContainsString(\'Unexpected Content\', $client->getResponse()->getContent());', correct: true }
      - { value: '$this->assertResponseNotContains(\'Unexpected Content\');', correct: false }
      - { value: '$this->assertNotContains(\'Unexpected Content\', $client->getResponse()->getContent());', correct: true }
      - { value: '$client->getResponse()->assertNotContains(\'Unexpected Content\');', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertQueuedEmailCount()` with a transport name?'
    answers:
      - { value: 'To count emails that failed to send for a specific transport.', correct: false }
      - { value: 'To assert the number of emails that were queued by a specific transport.', correct: true }
      - { value: 'To check the number of emails in the outbox for a specific transport.', correct: false }
      - { value: 'To verify the total number of emails sent and queued for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific email was sent by a particular transport?'
    answers:
      - { value: '$this->assertEmailCount(1, \'my_transport\');', correct: true }
      - { value: '$this->getSentEmails(\'my_transport\')->count() === 1;', correct: false }
      - { value: '$this->assertEmailSentToTransport($email, \'my_transport\');', correct: false }
      - { value: '$this->assertEmailIsSent($email, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertSelectorTextNotContains()`?'
    answers:
      - { value: 'To assert that the first element matching the selector contains the text.', correct: false }
      - { value: 'To assert that the first element matching the selector does NOT contain the text.', correct: true }
      - { value: 'To assert that all elements matching the selector do not contain the text.', correct: false }
      - { value: 'To assert that no element matching the selector contains the text.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How can you assert that a specific number of emails were sent by a particular transport?'
    answers:
      - { value: '$this->assertEmailCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentEmailCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentEmails(\'my_transport\'));', correct: false }
      - { value: '$this->assertEmailSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertAnySelectorTextNotContains()`?'
    answers:
      - { value: 'To assert that any element matching the selector contains the text.', correct: false }
      - { value: 'To assert that any element matching the selector does NOT contain the text.', correct: true }
      - { value: 'To assert that all elements matching the selector do not contain the text.', correct: false }
      - { value: 'To assert that no element matching the selector contains the text.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that the response is a redirect to a specific URL?'
    answers:
      - { value: '$this->assertResponseRedirects(\'/target-url\');', correct: true }
      - { value: '$client->getResponse()->isRedirect(\'/target-url\');', correct: false }
      - { value: '$this->assertRedirectTo(\'/target-url\');', correct: false }
      - { value: '$this->assertEquals(\'/target-url\', $client->getResponse()->headers->get(\'Location\'));', correct: true }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertSelectorTextSame()`?'
    answers:
      - { value: 'To assert that the first element matching the selector contains the text.', correct: false }
      - { value: 'To assert that the first element matching the selector has the exact text.', correct: true }
      - { value: 'To assert that all elements matching the selector have the exact text.', correct: false }
      - { value: 'To assert that no element matching the selector has the exact text.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How can you access the `Request` object from the `Client` after a request has been made?'
    answers:
      - { value: '$client->getRequest();', correct: true }
      - { value: '$client->getLastRequest();', correct: true }
      - { value: '$client->getResponse()->getRequest();', correct: false }
      - { value: 'The request object is not directly accessible after the request is sent.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertSelectorCount()`?'
    answers:
      - { value: 'To assert that at least one element matching the selector exists.', correct: false }
      - { value: 'To assert that the expected number of elements matching the selector are in the response.', correct: true }
      - { value: 'To check if an element is visible on the page.', correct: false }
      - { value: 'To verify the content of an element.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that the response is a JSON response?'
    answers:
      - { value: '$client->getResponse()->headers->contains(\'Content-Type\', \'application/json\');', correct: true }
      - { value: '$this->assertResponseHeaderSame(\'Content-Type\', \'application/json\');', correct: true }
      - { value: '$this->assertJson($client->getResponse()->getContent());', correct: true }
      - { value: '$client->getResponse()->isJson();', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertPageTitleSame()`?'
    answers:
      - { value: 'To assert that the page title contains a string.', correct: false }
      - { value: 'To assert that the `<title>` element is exactly equal to the given title.', correct: true }
      - { value: 'To check if the page has a title.', correct: false }
      - { value: 'To verify the title attribute of the `<body>` tag.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How can you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertSelectorTextContains()`?'
    answers:
      - { value: 'To assert that the first element matching the selector contains the text.', correct: true }
      - { value: 'To assert that the first element matching the selector has the exact text.', correct: false }
      - { value: 'To assert that all elements matching the selector contain the text.', correct: false }
      - { value: 'To assert that no element matching the selector contains the text.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific notification was sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(1, \'my_transport\');', correct: true }
      - { value: '$this->getNotifierMessages(\'my_transport\')->count() === 1;', correct: false }
      - { value: '$this->assertNotificationSentToTransport($notification, \'my_transport\');', correct: false }
      - { value: '$this->assertNotificationIsSent($notification, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertEmailTextBodyContains()`?'
    answers:
      - { value: 'To assert that the text body of an email contains a specific string.', correct: true }
      - { value: 'To check if the email body is empty.', correct: false }
      - { value: 'To verify the HTML content of an email.', correct: false }
      - { value: 'To assert that the email subject contains a string.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that the response content is valid JSON?'
    answers:
      - { value: '$this->assertJson($client->getResponse()->getContent());', correct: true }
      - { value: '$client->getResponse()->isJsonValid();', correct: false }
      - { value: '$this->assertIsJson($client->getResponse()->getContent());', correct: false }
      - { value: 'json_decode($client->getResponse()->getContent()) !== null;', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertBrowserNotHasCookie()`?'
    answers:
      - { value: 'Asserts that the test Client does not have the given cookie set.', correct: true }
      - { value: 'Asserts that the test Client has the given cookie set.', correct: false }
      - { value: 'Asserts that the cookie value is not empty.', correct: false }
      - { value: 'Asserts that the cookie has expired.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of emails were sent by the Mailer component?'
    answers:
      - { value: '$this->assertEmailCount(5);', correct: true }
      - { value: '$this->getSentEmails()->count() === 5;', correct: false }
      - { value: '$this->assertSentEmailCount(5);', correct: false }
      - { value: '$this->assertEmailSentCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertBrowserHasCookie()`?'
    answers:
      - { value: 'Asserts that the test Client does have the given cookie set.', correct: true }
      - { value: 'Asserts that the test Client does not have the given cookie set.', correct: false }
      - { value: 'Asserts that the cookie value is not empty.', correct: false }
      - { value: 'Asserts that the cookie has expired.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of emails were queued by the Mailer component?'
    answers:
      - { value: '$this->assertQueuedEmailCount(5);', correct: true }
      - { value: '$this->getQueuedEmails()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedEmailCount(5);', correct: false }
      - { value: '$this->assertEmailQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'What is the purpose of `assertThatForClient()`?'
    answers:
      - { value: 'To assert a custom constraint on the Client object.', correct: true }
      - { value: 'To assert a custom constraint on the Response object.', correct: false }
      - { value: 'To assert a custom constraint on the Crawler object.', correct: false }
      - { value: 'To assert a custom constraint on the Request object.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: true }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: false }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()`?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: true }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: false }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct: true }
      - { value: '$this->getNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertCreatedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationCreatedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsNotQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent successfully.', correct: false }
      - { value: 'To assert that a specific notification is not currently in the queue.', correct: true }
      - { value: 'To check if a notification has been dismissed.', correct: false }
      - { value: 'To verify that no notifications are queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationCount()` with a transport name?'
    answers:
      - { value: 'To count all notifications regardless of transport.', correct: false }
      - { value: 'To assert the total number of notifications created or queued by a specific transport.', correct: true }
      - { value: 'To verify the number of notification channels used.', correct: false }
      - { value: 'To check the number of unread notifications for a specific transport.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were sent by a particular transport?'
    answers:
      - { value: '$this->assertNotificationCount(5, \'my_transport\');', correct: true }
      - { value: '$this->assertSentNotificationCount(\'my_transport\', 5);', correct: false }
      - { value: '$this->assertCount(5, $this->getSentNotifications(\'my_transport\'));', correct: false }
      - { value: '$this->assertNotificationSentCount(5, \'my_transport\');', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationSubjectNotContains()`?'
    answers:
      - { value: 'To assert that the subject of a notification contains a given text.', correct: false }
      - { value: 'To assert that the subject of a notification does NOT contain a given text.', correct: true }
      - { value: 'To check if the notification subject is empty.', correct: false }
      - { value: 'To verify the recipient of a notification.', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'How do you assert that a specific number of notifications were queued by the Notifier component?'
    answers:
      - { value: '$this->assertQueuedNotificationCount(5);', correct: true }
      - { value: '$this->getQueuedNotifications()->count() === 5;', correct: false }
      - { value: '$this->assertQueuedNotificationCount(5);', correct: false }
      - { value: '$this->assertNotificationQueuedCount(5);', correct: false }
    help: |
      https://symfony.com/doc/current/testing
  - question: 'What is the purpose of `assertNotificationIsQueued()`?'
    answers:
      - { value: 'To assert that a notification has been sent.', correct: false }
      - { value: 'To assert that a notification is currently in the queue.', correct: true }
      - { value: 'To check if a notification has been delivered.', correct: false }
      - { value: 'To verify that a notification is not queued.', correct: false }
    help: |
      https://symfony.com/doc/current/book/testing
  - question: 'How do you assert that a specific number of notifications were created by the Notifier component?'
    answers:
      - { value: '$this->assertNotificationCount(5);', correct