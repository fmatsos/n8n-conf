```yaml
category: Dependency Injection
questions:
  - question: 'Which of the following best describes the purpose of the Symfony Dependency Injection Container?'
    answers:
      - { value: 'To manage and organize PHP classes and their dependencies.', correct: true }
      - { value: 'To handle HTTP requests and responses.', correct: false }
      - { value: 'To define database schemas and relationships.', correct: false }
      - { value: 'To render Twig templates.', correct: false }
    help: |
      https://symfony.com/doc/current/book/service_container.html

  - question: 'What is the primary benefit of using Dependency Injection in Symfony?'
    answers:
      - { value: 'It makes the application run faster.', correct: false }
      - { value: 'It reduces the need for external libraries.', correct: false }
      - { value: 'It improves code testability, maintainability, and flexibility.', correct: true }
      - { value: 'It automatically generates user interfaces.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'How can you inject a service into a class constructor in Symfony using autowiring?'
    answers:
      - { value: 'By manually calling `new Service()` in the constructor.', correct: false }
      - { value: 'By type-hinting the service interface or class in the constructor arguments.', correct: true }
      - { value: 'By using a global `getService()` function.', correct: false }
      - { value: 'By defining the service in a separate XML file only.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html

  - question: 'Consider the following PHP code for a service. How would you configure this service in `config/services.yaml` to inject the `targetDirectory` parameter?'
    answers:
      - { value: '''
services:
    App\\Service\\FileUploader:
        arguments:
            $targetDirectory: '%brochures_directory%'
'''
        , correct: true }
      - { value: '''
services:
    App\\Service\\FileUploader:
        parameters:
            targetDirectory: brochures_directory
'''
        , correct: false }
      - { value: '''
services:
    App\\Service\\FileUploader:
        calls:
            - setTargetDirectory: ['%brochures_directory%']
'''
        , correct: false }
      - { value: '''
services:
    App\\Service\\FileUploader:
        arguments: ['brochures_directory']
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/controller/upload_file.html

  - question: 'Which Symfony attribute is used to explicitly inject a specific named service or parameter value into a controller method?'
    answers:
      - { value: '`#[Inject]`', correct: false }
      - { value: '`#[Service]`', correct: false }
      - { value: '`#[Autowire]`', correct: true }
      - { value: '`#[Parameter]`', correct: false }
    help: |
      https://symfony.com/doc/current/controller.html

  - question: 'What is the purpose of the `#[Required]` attribute in Symfony Dependency Injection?'
    answers:
      - { value: 'It makes a service optional.', correct: false }
      - { value: 'It forces a service to be public.', correct: false }
      - { value: 'It ensures that a setter method or public property is automatically injected by the container.', correct: true }
      - { value: 'It marks a service for lazy loading.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html

  - question: 'How can you define a synthetic service in Symfony using YAML configuration?'
    answers:
      - { value: '''
services:
    app.synthetic_service:
        class: ~
'''
        , correct: false }
      - { value: '''
services:
    app.synthetic_service:
        synthetic: true
'''
        , correct: true }
      - { value: '''
services:
    app.synthetic_service:
        abstract: true
'''
        , correct: false }
      - { value: '''
services:
    app.synthetic_service:
        factory: [App\\Factory\\SyntheticFactory, 'create']
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/synthetic_services.html

  - question: 'When would you use the `#[Target]` attribute in Symfony Dependency Injection?'
    answers:
      - { value: 'To specify the target class for autowiring when multiple services implement the same interface.', correct: true }
      - { value: 'To define the target directory for file uploads.', correct: false }
      - { value: 'To mark a service as a target for decoration.', correct: false }
      - { value: 'To set the target environment for a service.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html

  - question: 'What is the correct way to register a service with a constructor argument using a container parameter in PHP?'
    answers:
      - { value: '''
$container->register('mailer', 'Mailer')
    ->addArgument('sendmail');
'''
        , correct: false }
      - { value: '''
$container->setParameter('mailer.transport', 'sendmail');
$container
    ->register('mailer', 'Mailer')
    ->addArgument('%mailer.transport%');
'''
        , correct: true }
      - { value: '''
$container->register('mailer', 'Mailer')
    ->addArgument(new Parameter('mailer.transport'));
'''
        , correct: false }
      - { value: '''
$container->register('mailer', 'Mailer')
    ->setArguments(['mailer.transport']);
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'Which of the following is a valid way to configure property injection for a service in YAML?'
    answers:
      - { value: '''
services:
    app.newsletter_manager:
        class: App\\Mail\\NewsletterManager
        properties:
            mailer: '@mailer'
'''
        , correct: true }
      - { value: '''
services:
    app.newsletter_manager:
        class: App\\Mail\\NewsletterManager
        arguments:
            mailer: '@mailer'
'''
        , correct: false }
      - { value: '''
services:
    app.newsletter_manager:
        class: App\\Mail\\NewsletterManager
        calls:
            - setMailer: ['@mailer']
'''
        , correct: false }
      - { value: '''
services:
    app.newsletter_manager:
        class: App\\Mail\\NewsletterManager
        fields:
            mailer: '@mailer'
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/injection_types.html

  - question: 'What is the purpose of `!service_closure` or `@>` in Symfony service configuration?'
    answers:
      - { value: 'To define a service as a closure for lazy loading.', correct: true }
      - { value: 'To mark a service as private.', correct: false }
      - { value: 'To specify a service factory method.', correct: false }
      - { value: 'To create an alias for a service.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_closures.html

  - question: 'How can you load service definitions from a YAML file into a `ContainerBuilder` in PHP?'
    answers:
      - { value: '''
use Symfony\\Component\\Config\\FileLocator;
use Symfony\\Component\\DependencyInjection\\ContainerBuilder;
use Symfony\\Component\\DependencyInjection\\Loader\\XmlFileLoader;

$container = new ContainerBuilder();
$loader = new XmlFileLoader($container, new FileLocator(__DIR__));
$loader->load('services.xml');
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\Config\\FileLocator;
use Symfony\\Component\\DependencyInjection\\ContainerBuilder;
use Symfony\\Component\\DependencyInjection\\Loader\\YamlFileLoader;

$container = new ContainerBuilder();
$loader = new YamlFileLoader($container, new FileLocator(__DIR__));
$loader->load('services.yaml');
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\Config\\FileLocator;
use Symfony\\Component\\DependencyInjection\\ContainerBuilder;
use Symfony\\Component\\DependencyInjection\\Loader\\PhpFileLoader;

$container = new ContainerBuilder();
$loader = new PhpFileLoader($container, new FileLocator(__DIR__));
$loader->load('services.php');
'''
        , correct: false }
      - { value: 'By using `ContainerBuilder::import()` method.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'Which command can you use to debug and inspect registered services in the Symfony Dependency Injection container?'
    answers:
      - { value: '`php bin/console cache:clear`', correct: false }
      - { value: '`php bin/console debug:container`', correct: true }
      - { value: '`php bin/console make:service`', correct: false }
      - { value: '`php bin/console list:services`', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html

  - question: 'What is the purpose of `ContainerBuilder::compile()`?'
    answers:
      - { value: 'To generate a new `services.yaml` file.', correct: false }
      - { value: 'To clear the Symfony cache.', correct: false }
      - { value: 'To trigger compiler passes, validate service definitions, and optimize the container.', correct: true }
      - { value: 'To install new Symfony components.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection/compilation.html

  - question: 'How do you configure a service to use an immutable setter for dependency injection in YAML?'
    answers:
      - { value: '''
services:
    app.newsletter_manager:
        class: App\\Mail\\NewsletterManager
        calls:
            - setMailer: ['@mailer']
'''
        , correct: false }
      - { value: '''
services:
    app.newsletter_manager:
        class: App\\Mail\\NewsletterManager
        calls:
            - withMailer: !returns_clone ['@mailer']
'''
        , correct: true }
      - { value: '''
services:
    app.newsletter_manager:
        class: App\\Mail\\NewsletterManager
        properties:
            mailer: '@mailer'
'''
        , correct: false }
      - { value: '''
services:
    app.newsletter_manager:
        class: App\\Mail\\NewsletterManager
        arguments:
            $mailer: '@mailer'
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/injection_types.html

  - question: 'Which of the following `ContainerInterface` constants will throw an exception at runtime when trying to access a missing service?'
    answers:
      - { value: '`ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE`', correct: false }
      - { value: '`ContainerInterface::NULL_ON_INVALID_REFERENCE`', correct: false }
      - { value: '`ContainerInterface::RUNTIME_EXCEPTION_ON_INVALID_REFERENCE`', correct: true }
      - { value: '`ContainerInterface::IGNORE_ON_INVALID_REFERENCE`', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'You have a service `App\\Service\\MyService` that needs an optional dependency `mailer`. How would you configure this in YAML using a service closure?'
    answers:
      - { value: '''
services:
    App\\Service\\MyService:
        arguments: ['@mailer']
'''
        , correct: false }
      - { value: '''
services:
    App\\Service\\MyService:
        arguments: [!service_closure '@mailer']
'''
        , correct: false }
      - { value: '''
services:
    App\\Service\\MyService:
        arguments: [!service_closure '@?mailer']
'''
        , correct: true }
      - { value: '''
services:
    App\\Service\\MyService:
        arguments: ['@>mailer']
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_closures.html

  - question: 'What is the primary purpose of a "compiler pass" in Symfony Dependency Injection?'
    answers:
      - { value: 'To compile PHP code into bytecode.', correct: false }
      - { value: 'To modify or add definitions to the service container before it is compiled.', correct: true }
      - { value: 'To generate new service classes automatically.', correct: false }
      - { value: 'To optimize database queries.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection/compilation.html

  - question: 'How can you inject a collection of services tagged with `logger.tag` into a service using the `#[AutowireIterator]` attribute?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AutowireIterator;

public static function getSubscribedServices(): array
{
    return [
        'loggers' => 'iterable', attributes: new AutowireIterator('logger.tag'),
    ];
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AutowireLocator;

public static function getSubscribedServices(): array
{
    return [
        'loggers' => 'iterable', attributes: new AutowireLocator('logger.tag'),
    ];
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

public static function getSubscribedServices(): array
{
    return [
        'loggers' => 'iterable', attributes: new Autowire(tag: 'logger.tag'),
    ];
}
'''
        , correct: false }
      - { value: '''
public static function getSubscribedServices(): array
{
    return [
        'loggers' => 'iterable', tag: 'logger.tag',
    ];
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html

  - question: 'Which built-in Symfony service is responsible for handling HTTP requests and responses?'
    answers:
      - { value: '`router`', correct: false }
      - { value: '`event_dispatcher`', correct: false }
      - { value: '`http_kernel`', correct: true }
      - { value: '`doctrine.orm.entity_manager`', correct: false }
    help: |
      https://symfony.com/doc/current/create_framework/dependency_injection.html

  - question: 'You want to inject a specific logger service named `monolog.logger.request` into a controller method. How would you achieve this using the `#[Autowire]` attribute?'
    answers:
      - { value: '''
public function number(
    #[Autowire(service: 'monolog.logger.request')]
    LoggerInterface $logger,
): Response
{
    // ...
}
'''
        , correct: true }
      - { value: '''
public function number(
    #[Autowire(id: 'monolog.logger.request')]
    LoggerInterface $logger,
): Response
{
    // ...
}
'''
        , correct: false }
      - { value: '''
public function number(
    #[Autowire('monolog.logger.request')]
    LoggerInterface $logger,
): Response
{
    // ...
}
'''
        , correct: false }
      - { value: '''
public function number(
    LoggerInterface $logger = '@monolog.logger.request',
): Response
{
    // ...
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/controller.html

  - question: 'What is the correct way to define a service in `config/services.yaml` that uses constructor injection for `App\\Mail\\NewsletterManager` with a `mailer` dependency?'
    answers:
      - { value: '''
services:
    App\\Mail\\NewsletterManager:
        arguments: ['@mailer']
'''
        , correct: true }
      - { value: '''
services:
    App\\Mail\\NewsletterManager:
        calls:
            - setMailer: ['@mailer']
'''
        , correct: false }
      - { value: '''
services:
    App\\Mail\\NewsletterManager:
        properties:
            mailer: '@mailer'
'''
        , correct: false }
      - { value: '''
services:
    App\\Mail\\NewsletterManager:
        constructor: ['@mailer']
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/injection_types.html

  - question: 'How can you inject a `callable` as a service argument in Symfony?'
    answers:
      - { value: 'By directly passing a PHP closure in the YAML configuration.', correct: false }
      - { value: 'By defining an invokable class and injecting it as a service.', correct: true }
      - { value: 'By using the `#[Callable]` attribute.', correct: false }
      - { value: 'Callable injection is not supported in Symfony.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html

  - question: 'What is the purpose of the `#[AutowireCallable]` attribute?'
    answers:
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To inject a specific method of a service as a functional interface.', correct: true }
      - { value: 'To mark a service as callable from the container.', correct: false }
      - { value: 'To define a service that returns a callable.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html

  - question: 'You have a custom data fixtures directory `fixtures`. How would you configure Symfony to enable dependency injection for fixtures in this directory using YAML?'
    answers:
      - { value: '''
# config/services.yaml
services:
    DataFixtures\\:
        resource: '../fixtures'
'''
        , correct: true }
      - { value: '''
# config/services.yaml
services:
    _defaults:
        autowire: true
        autoconfigure: true
    App\\DataFixtures\\:
        resource: '../fixtures'
'''
        , correct: false }
      - { value: '''
# config/services.yaml
parameters:
    fixtures_directory: '%kernel.project_dir%/fixtures'
'''
        , correct: false }
      - { value: '''
# config/services.yaml
services:
    DataFixtures\\:
        path: '../fixtures'
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html

  - question: 'Which of the following is a valid way to define a parameter in `config/services.yaml`?'
    answers:
      - { value: '''
parameters:
    app.mailer.transport: sendmail
'''
        , correct: true }
      - { value: '''
config:
    mailer.transport: sendmail
'''
        , correct: false }
      - { value: '''
vars:
    mailer.transport: sendmail
'''
        , correct: false }
      - { value: '''
arguments:
    mailer.transport: sendmail
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireDecorated]` attribute?'
    answers:
      - { value: 'To mark a service as a decorator for another service.', correct: false }
      - { value: 'To inject the decorated service into the decorator.', correct: true }
      - { value: 'To automatically apply decoration to all services of a certain type.', correct: false }
      - { value: 'To define a service that decorates a specific method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_decoration.html

  - question: 'How can you retrieve a service from the container in a Symfony application (e.g., in a controller or command)?'
    answers:
      - { value: 'By calling `new ServiceClass()` directly.', correct: false }
      - { value: 'By using `Container::get(\'service_id\')`.', correct: true }
      - { value: 'By accessing a global `$_SERVICES` array.', correct: false }
      - { value: 'By using `ServiceClass::getInstance()`.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is a "service locator" in Symfony Dependency Injection?'
    answers:
      - { value: 'A service that helps locate files on the filesystem.', correct: false }
      - { value: 'A service that provides access to a subset of other services, typically for optional dependencies or when a service needs to resolve dependencies dynamically.', correct: true }
      - { value: 'A tool for debugging service definitions.', correct: false }
      - { value: 'A service that manages application routes.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html

  - question: 'Which attribute is used to define a service as an alias for another service?'
    answers:
      - { value: '`#[Alias]`', correct: false }
      - { value: '`#[AsAlias]`', correct: true }
      - { value: '`#[Link]`', correct: false }
      - { value: '`#[Reference]`', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#asalias

  - question: 'What is the purpose of "tags" in Symfony Dependency Injection?'
    answers:
      - { value: 'To categorize services for documentation purposes only.', correct: false }
      - { value: 'To group services that share a common functionality or interface, allowing them to be collected and injected as a group.', correct: true }
      - { value: 'To mark services as deprecated.', correct: false }
      - { value: 'To define the order in which services are loaded.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/tags.html

  - question: 'How can you inject all services tagged with `my_tag` into a constructor as an iterable using PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\TaggedIterator;

class MyService
{
    public function __construct(
        #[TaggedIterator('my_tag')]
        private iterable $taggedServices
    ) {
    }
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AutowireIterator;

class MyService
{
    public function __construct(
        #[AutowireIterator('my_tag')]
        private iterable $taggedServices
    ) {
    }
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

class MyService
{
    public function __construct(
        #[Autowire(tag: 'my_tag')]
        private iterable $taggedServices
    ) {
    }
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public function __construct(
        private array $taggedServices = ['@my_tag']
    ) {
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/tags.html#tags_reference-tagged-services
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#service-locator_autowire-iterator

  - question: 'What is "semantic configuration" in Symfony Dependency Injection?'
    answers:
      - { value: 'A way to define configuration using semantic HTML tags.', correct: false }
      - { value: 'A structured and validated way to define bundle-specific configuration, often processed by a Dependency Injection Extension.', correct: true }
      - { value: 'A method for automatically generating configuration files.', correct: false }
      - { value: 'A type of configuration that is only used for logging.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection/compilation.html

  - question: 'How do you access raw configuration values within the `load()` method of a Symfony Dependency Injection Extension?'
    answers:
      - { value: 'By calling `$container->getParameter(\'my_bundle.foo\')`.', correct: false }
      - { value: 'The raw configuration is passed as the first argument (`$configs`) to the `load()` method.', correct: true }
      - { value: 'By using `$_ENV` variables.', correct: false }
      - { value: 'By reading directly from `config.yaml`.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection/compilation.html

  - question: 'What is a "factory" in the context of Symfony Dependency Injection?'
    answers:
      - { value: 'A design pattern for creating objects without specifying the exact class.', correct: true }
      - { value: 'A service that generates random numbers.', correct: false }
      - { value: 'A built-in Symfony service for managing database connections.', correct: false }
      - { value: 'A configuration file format.', correct: false }
    help: |
      https://symfony.com/doc/current/components/uid.html (example of UlidFactory)

  - question: 'How can you define a service using a factory method in YAML?'
    answers:
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        factory: [App\\Factory\\MyFactory, 'create']
'''
        , correct: true }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        method: create
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        constructor: App\\Factory\\MyFactory::create
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        builder: App\\Factory\\MyFactory::create
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/factories.html

  - question: 'What is the main advantage of "autowiring" in Symfony?'
    answers:
      - { value: 'It eliminates the need for any service configuration.', correct: false }
      - { value: 'It automatically injects dependencies based on type-hints, reducing the need for explicit configuration.', correct: true }
      - { value: 'It automatically generates new classes for missing services.', correct: false }
      - { value: 'It converts YAML configuration to PHP.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html

  - question: 'When would you typically use a "service locator" instead of direct dependency injection?'
    answers:
      - { value: 'When a service has many optional dependencies that are not always needed.', correct: true }
      - { value: 'When you want to make all services globally accessible.', correct: false }
      - { value: 'When a service needs to create new instances of other services frequently.', correct: false }
      - { value: 'When you want to completely avoid the Dependency Injection Container.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html

  - question: 'Which attribute is used to define a service as a decorator for another service?'
    answers:
      - { value: '`#[Decorate]`', correct: false }
      - { value: '`#[AsDecorator]`', correct: true }
      - { value: '`#[Wrap]`', correct: false }
      - { value: '`#[Extend]`', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#asdecorator

  - question: 'How can you inject a specific workflow named `blog_publishing` into a service using the `#[Target]` attribute?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Target;
use Symfony\\Component\\Workflow\\WorkflowInterface;

class MyClass
{
    public function __construct(
        #[Target('blog_publishing')]
        private WorkflowInterface $workflow
    ) {
    }
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;
use Symfony\\Component\\Workflow\\WorkflowInterface;

class MyClass
{
    public function __construct(
        #[Autowire(service: 'blog_publishing_workflow')]
        private WorkflowInterface $workflow
    ) {
    }
}
'''
        , correct: false }
      - { value: '''
class MyClass
{
    public function __construct(
        private WorkflowInterface $blog_publishing_workflow
    ) {
    }
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\TaggedIterator;
use Symfony\\Component\\Workflow\\WorkflowInterface;

class MyClass
{
    public function __construct(
        #[TaggedIterator('workflow.blog_publishing')]
        private WorkflowInterface $workflow
    ) {
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/workflow.html

  - question: 'What is the purpose of the `#[Autoconfigure]` attribute?'
    answers:
      - { value: 'To automatically configure all services in a bundle.', correct: false }
      - { value: 'To enable autowiring for a specific service.', correct: false }
      - { value: 'To apply default configuration (like autowiring and autoconfigure) to a service defined via attributes.', correct: true }
      - { value: 'To disable autoconfiguration for a service.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#autoconfigure

  - question: 'Which of the following is a built-in service in Symfony that provides logging capabilities?'
    answers:
      - { value: '`mailer`', correct: false }
      - { value: '`logger` (or `Psr\\Log\\LoggerInterface`)', correct: true }
      - { value: '`router`', correct: false }
      - { value: '`cache`', correct: false }
    help: |
      https://symfony.com/doc/current/book/service_container.html

  - question: 'How can you define a service with a method call in YAML?'
    answers:
      - { value: '''
services:
    newsletter_manager:
        class: NewsletterManager
        calls:
            - [setMailer, ['@mailer']]
'''
        , correct: true }
      - { value: '''
services:
    newsletter_manager:
        class: NewsletterManager
        methods:
            setMailer: ['@mailer']
'''
        , correct: false }
      - { value: '''
services:
    newsletter_manager:
        class: NewsletterManager
        arguments:
            setMailer: '@mailer'
'''
        , correct: false }
      - { value: '''
services:
    newsletter_manager:
        class: NewsletterManager
        call: setMailer('@mailer')
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the significance of the `public` keyword for a service in Symfony configuration?'
    answers:
      - { value: 'It means the service can be accessed directly from the container using `get()`.', correct: true }
      - { value: 'It means the service is automatically autowired.', correct: false }
      - { value: 'It means the service is always lazy-loaded.', correct: false }
      - { value: 'It means the service is shared across all requests.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/public_private_services.html

  - question: 'Which of the following is NOT a valid type of dependency injection in Symfony?'
    answers:
      - { value: 'Constructor Injection', correct: false }
      - { value: 'Setter Injection', correct: false }
      - { value: 'Property Injection', correct: false }
      - { value: 'Static Method Injection', correct: true }
    help: |
      https://symfony.com/doc/current/service_container/injection_types.html

  - question: 'What is the purpose of the `#[When]` and `#[WhenNot]` attributes?'
    answers:
      - { value: 'To define conditional service loading based on the current environment.', correct: true }
      - { value: 'To specify when a service should be compiled.', correct: false }
      - { value: 'To control when a service is decorated.', correct: false }
      - { value: 'To define a service that runs only at specific times.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#when

  - question: 'How can you prevent a service from being autowired in Symfony?'
    answers:
      - { value: 'By setting `autowire: false` for the service definition in YAML.', correct: true }
      - { value: 'By making the service class `final`.', correct: false }
      - { value: 'By removing all type-hints from its constructor.', correct: false }
      - { value: 'By marking the service as `private`.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#disabling-autowiring-for-a-specific-service

  - question: 'What is the role of `ContainerConfigurator` when defining services in PHP configuration files?'
    answers:
      - { value: 'It is a class that builds the entire container from scratch.', correct: false }
      - { value: 'It provides a fluent interface for defining services, parameters, and other container elements.', correct: true }
      - { value: 'It is used to compile the container.', correct: false }
      - { value: 'It is a service locator for PHP files.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'You have a service `App\\Service\\MyService` that needs to access a specific method of another service, `MessageUtils::format`, as a callable. How would you achieve this using the `#[AutowireCallable]` attribute?'
    answers:
      - { value: '''
use App\\Service\\MessageFormatterInterface;
use App\\Service\\MessageUtils;
use Symfony\\Component\\DependencyInjection\\Attribute\\AutowireCallable;

class Mailer
{
    public function __construct(
        #[AutowireCallable(service: MessageUtils::class, method: 'format')]
        private MessageFormatterInterface $formatter
    ) {
    }
}
'''
        , correct: true }
      - { value: '''
use App\\Service\\MessageFormatterInterface;
use App\\Service\\MessageUtils;
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

class Mailer
{
    public function __construct(
        #[Autowire(callable: 'App\\Service\\MessageUtils::format')]
        private MessageFormatterInterface $formatter
    ) {
    }
}
'''
        , correct: false }
      - { value: '''
class Mailer
{
    public function __construct(
        private MessageFormatterInterface $formatter = [MessageUtils::class, 'format']
    ) {
    }
}
'''
        , correct: false }
      - { value: '''
use App\\Service\\MessageFormatterInterface;
use App\\Service\\MessageUtils;

class Mailer
{
    public function __construct(
        private MessageFormatterInterface $formatter = new MessageUtils()->format(...)
    ) {
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html

  - question: 'What is the default behavior when a service reference is invalid in Symfony (i.e., the constant `EXCEPTION_ON_INVALID_REFERENCE`)?'
    answers:
      - { value: 'It returns `null`.', correct: false }
      - { value: 'It throws an exception at compile time.', correct: true }
      - { value: 'It ignores the reference.', correct: false }
      - { value: 'It throws an exception at runtime.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'How can you access a parameter defined in the Dependency Injection container in a PHP class?'
    answers:
      - { value: 'By using `$_ENV['PARAMETER_NAME']`.', correct: false }
      - { value: 'By injecting the `ContainerInterface` and calling `getParameter(\'parameter.name\')`.', correct: true }
      - { value: 'By directly referencing `AppKernel::getParameter(\'parameter.name\')`.', correct: false }
      - { value: 'Parameters are only accessible in configuration files.', correct: false }
    help: |
      https://symfony.com/doc/current/create_framework/dependency_injection.html

  - question: 'What is the purpose of `#[TaggedLocator]` attribute?'
    answers:
      - { value: 'To inject a service locator containing services tagged with a specific tag.', correct: true }
      - { value: 'To define a service that locates all tagged services.', correct: false }
      - { value: 'To automatically tag services based on their class name.', correct: false }
      - { value: 'To create a new service for each tag found.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#service-subscribers-locators_defining-service-locator

  - question: 'Which of the following describes a "private" service in Symfony?'
    answers:
      - { value: 'A service that cannot be autowired.', correct: false }
      - { value: 'A service that can only be accessed by other services within the same bundle.', correct: false }
      - { value: 'A service that cannot be retrieved directly from the container using `get()`, but can be injected as a dependency.', correct: true }
      - { value: 'A service that is only available in the `dev` environment.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/public_private_services.html

  - question: 'How can you define a service as "lazy" in YAML configuration?'
    answers:
      - { value: '''
services:
    app.my_lazy_service:
        class: App\\Service\\MyLazyService
        lazy: true
'''
        , correct: true }
      - { value: '''
services:
    app.my_lazy_service:
        class: App\\Service\\MyLazyService
        defer: true
'''
        , correct: false }
      - { value: '''
services:
    app.my_lazy_service:
        class: App\\Service\\MyLazyService
        on_demand: true
'''
        , correct: false }
      - { value: '''
services:
    app.my_lazy_service:
        class: App\\Service\\MyLazyService
        scope: lazy
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html

  - question: 'What is the purpose of the `#[Exclude]` attribute in Symfony Dependency Injection?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'When defining a custom Dependency Injection Extension, what is the purpose of the `configure()` method?'
    answers:
      - { value: 'To load service definitions from configuration files.', correct: false }
      - { value: 'To process and validate the bundle''s semantic configuration.', correct: true }
      - { value: 'To register new compiler passes.', correct: false }
      - { value: 'To define parameters for the container.', correct: false }
    help: |
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  - question: 'How can you register a service in PHP without any constructor arguments?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\ContainerBuilder;

$container = new ContainerBuilder();
$container->register('mailer', 'Mailer');
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\ContainerBuilder;

$container = new ContainerBuilder();
$container->set('mailer', new Mailer());
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\ContainerBuilder;

$container = new ContainerBuilder();
$container->addService('mailer', 'Mailer');
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\ContainerBuilder;

$container = new ContainerBuilder();
$container->load('mailer', 'Mailer');
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of the `#[AutoconfigureTag]` attribute?'
    answers:
      - { value: 'To automatically add a tag to a service based on its class name.', correct: false }
      - { value: 'To automatically apply a tag to services that implement a specific interface or extend a certain class.', correct: true }
      - { value: 'To configure the default tags for all services.', correct: false }
      - { value: 'To remove a tag from a service during autoconfiguration.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#autoconfiguretag

  - question: 'You need to inject `HttpClientInterface` into your `MyApiLayer` service. What is the recommended way to do this in PHP?'
    answers:
      - { value: '''
use Symfony\\Contracts\\HttpClient\\HttpClientInterface;

class MyApiLayer
{
    public function __construct(
        private HttpClientInterface $client,
    ) {
    }
}
'''
        , correct: true }
      - { value: '''
class MyApiLayer
{
    public function __construct()
    {
        $this->client = new HttpClient();
    }
}
'''
        , correct: false }
      - { value: '''
class MyApiLayer
{
    public function setClient(HttpClientInterface $client): void
    {
        $this->client = $client;
    }
}
'''
        , correct: false }
      - { value: '''
class MyApiLayer
{
    public HttpClientInterface $client;
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/http_client.html

  - question: 'What is the role of `Psr\\Container\\ContainerInterface` in Symfony?'
    answers:
      - { value: 'It is the concrete implementation of the Dependency Injection Container.', correct: false }
      - { value: 'It defines a standard interface for a service container, allowing for interoperability between different frameworks and libraries.', correct: true }
      - { value: 'It is used for managing environment variables.', correct: false }
      - { value: 'It provides methods for compiling the container.', correct: false }
    help: |
      https://www.php-fig.org/psr/psr-11/

  - question: 'How can you inject a service into a Symfony console command?'
    answers:
      - { value: 'By using a static `getContainer()` method in the command.', correct: false }
      - { value: 'By type-hinting the service in the command''s constructor.', correct: true }
      - { value: 'By manually instantiating the service within the `execute` method.', correct: false }
      - { value: 'By using a global service locator function.', correct: false }
    help: |
      https://symfony.com/doc/current/console.html

  - question: 'What is the purpose of `#[AutowireIterator]`?'
    answers:
      - { value: 'To inject a single service that implements `IteratorAggregate`.', correct: false }
      - { value: 'To inject an `iterable` of services that are tagged with a specific tag.', correct: true }
      - { value: 'To automatically iterate over all services in the container.', correct: false }
      - { value: 'To create a new iterator for a service.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#service-locator_autowire-iterator

  - question: 'Which of the following is a valid way to define a service in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('mailer', 'Mailer')
        ->args(['%mailer.transport%'])
    ;
};
'''
        , correct: true }
      - { value: '''
$container->register('mailer', 'Mailer')
    ->addArgument('%mailer.transport%');
'''
        , correct: false }
      - { value: '''
$services = new ServicesConfigurator();
$services->set('mailer', 'Mailer');
'''
        , correct: false }
      - { value: '''
return [
    'mailer' => [
        'class' => 'Mailer',
        'arguments' => ['%mailer.transport%'],
    ],
];
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the main difference between `#[Autowire]` and `#[Target]`?'
    answers:
      - { value: '`#[Autowire]` is for parameters, `#[Target]` is for services.', correct: false }
      - { value: '`#[Autowire]` injects a specific service or parameter by ID/value, while `#[Target]` helps resolve which service to inject when multiple services implement the same type.', correct: true }
      - { value: '`#[Autowire]` is for constructor injection, `#[Target]` is for setter injection.', correct: false }
      - { value: 'They are interchangeable and serve the same purpose.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html

  - question: 'When would you use a "synthetic service" in Symfony?'
    answers:
      - { value: 'When the service needs to be created dynamically at runtime and cannot be defined statically in configuration.', correct: true }
      - { value: 'When the service is a simple value like a string or integer.', correct: false }
      - { value: 'When the service is part of a third-party bundle.', correct: false }
      - { value: 'When the service should always be lazy-loaded.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/synthetic_services.html

  - question: 'How do you programmatically inject an already instantiated object into the Symfony container as a synthetic service?'
    answers:
      - { value: '''
$theService = ...;
$container->set('app.synthetic_service', $theService);
'''
        , correct: true }
      - { value: '''
$theService = ...;
$container->register('app.synthetic_service', $theService);
'''
        , correct: false }
      - { value: '''
$theService = ...;
$container->add('app.synthetic_service', $theService);
'''
        , correct: false }
      - { value: '''
$theService = ...;
$container->load('app.synthetic_service', $theService);
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/synthetic_services.html

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#autowireserviceclosure

  - question: 'Which of the following is a correct way to define a parameter in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $container->parameters()
        ->set('mailer.transport', 'sendmail')
    ;
};
'''
        , correct: true }
      - { value: '''
$container->setParameter('mailer.transport', 'sendmail');
'''
        , correct: false }
      - { value: '''
return [
    'parameters' => [
        'mailer.transport' => 'sendmail',
    ],
];
'''
        , correct: false }
      - { value: '''
$container->addParameter('mailer.transport', 'sendmail');
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#lazy

  - question: 'How can you register a custom event listener as a service and attach it to the event dispatcher in PHP?'
    answers:
      - { value: '''
$container->register('listener.string_response', StringResponseListener::class);
$container->getDefinition('dispatcher')
    ->addMethodCall('addSubscriber', [new Reference('listener.string_response')])
;
'''
        , correct: true }
      - { value: '''
$container->get('dispatcher')->addSubscriber(new StringResponseListener());
'''
        , correct: false }
      - { value: '''
$container->register('listener.string_response', StringResponseListener::class)
    ->addTag('kernel.event_subscriber');
'''
        , correct: false }
      - { value: '''
$container->register('listener.string_response', StringResponseListener::class)
    ->addMethodCall('subscribeTo', ['dispatcher']);
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/create_framework/dependency_injection.html

  - question: 'Which of the following is a correct way to configure setter injection for `App\\Mail\\NewsletterManager` with a `mailer` dependency in PHP using `ContainerConfigurator`?'
    answers:
      - { value: '''
return function(ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set(NewsletterManager::class)
        ->call('setMailer', [service('mailer')]);
};
'''
        , correct: true }
      - { value: '''
return function(ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set(NewsletterManager::class)
        ->args([service('mailer')]);
};
'''
        , correct: false }
      - { value: '''
return function(ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set(NewsletterManager::class)
        ->property('mailer', service('mailer'));
};
'''
        , correct: false }
      - { value: '''
return function(ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set(NewsletterManager::class)
        ->setter('setMailer', service('mailer'));
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/injection_types.html

  - question: 'What is the purpose of the `#[AutowireMethodOf]` attribute?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#autowiremethodof

  - question: 'How can you define a service that is only available in a specific environment (e.g., `dev`) using YAML?'
    answers:
      - { value: '''
services:
    my_dev_service:
        class: App\\Service\\DevService
        environment: dev
'''
        , correct: false }
      - { value: '''
services:
    my_dev_service:
        class: App\\Service\\DevService
        when: 'dev'
'''
        , correct: true }
      - { value: '''
services:
    my_dev_service:
        class: App\\Service\\DevService
        tags: ['kernel.environment:dev']
'''
        , correct: false }
      - { value: '''
services:
    my_dev_service:
        class: App\\Service\\DevService
        if: '%kernel.environment% == "dev"'
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the role of `FileLocator` when loading configuration files in Symfony Dependency Injection?'
    answers:
      - { value: 'It locates PHP classes on the filesystem.', correct: false }
      - { value: 'It helps locate configuration files within specified directories.', correct: true }
      - { value: 'It is used for file uploads.', correct: false }
      - { value: 'It manages file permissions.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'Which of the following is a valid way to define a service using PHP attributes for autowiring?'
    answers:
      - { value: '''
namespace App\\Service;

use Symfony\\Component\\DependencyInjection\\Attribute\\Autoconfigure;

#[Autoconfigure]
class MyService
{
    public function __construct(LoggerInterface $logger)
    {
    }
}
'''
        , correct: true }
      - { value: '''
namespace App\\Service;

class MyService
{
    public function __construct(#[Autowire] LoggerInterface $logger)
    {
    }
}
'''
        , correct: true }
      - { value: '''
namespace App\\Service;

class MyService
{
    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }
}
'''
        , correct: false }
      - { value: '''
namespace App\\Service;

#[Service]
class MyService
{
    public function __construct(LoggerInterface $logger)
    {
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html

  - question: 'What is the purpose of the `#[TaggedIterator]` attribute?'
    answers:
      - { value: 'To inject an iterator of services that have a specific tag.', correct: true }
      - { value: 'To define a service that iterates over all tags.', correct: false }
      - { value: 'To automatically add tags to an iterator.', correct: false }
      - { value: 'To create a new iterator from a tagged service.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#taggediterator

  - question: 'How can you inject a service locator into a service using the `#[AutowireLocator]` attribute?'
    answers:
      - { value: '''
use Psr\\Container\\ContainerInterface;
use Symfony\\Component\\DependencyInjection\\Attribute\\AutowireLocator;

class MyService
{
    public function __construct(
        #[AutowireLocator('handler.tag')]
        private ContainerInterface $handlers
    ) {
    }
}
'''
        , correct: true }
      - { value: '''
use Psr\\Container\\ContainerInterface;
use Symfony\\Component\\DependencyInjection\\Attribute\\TaggedLocator;

class MyService
{
    public function __construct(
        #[TaggedLocator('handler.tag')]
        private ContainerInterface $handlers
    ) {
    }
}
'''
        , correct: true }
      - { value: '''
use Psr\\Container\\ContainerInterface;
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

class MyService
{
    public function __construct(
        #[Autowire(locator: 'handler.tag')]
        private ContainerInterface $handlers
    ) {
    }
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public function __construct(
        private ContainerInterface $handlers = ['@handler.tag']
    ) {
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#service-locator_autowire-locator
      https://symfony.com/doc/current/reference/attributes.html#taggedlocator

  - question: 'What is the purpose of "service decoration" in Symfony?'
    answers:
      - { value: 'To add visual styling to services.', correct: false }
      - { value: 'To wrap an existing service with another service to add or modify its behavior without changing the original service.', correct: true }
      - { value: 'To mark a service as a singleton.', correct: false }
      - { value: 'To remove unused services from the container.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_decoration.html

  - question: 'How can you decorate a service named `app.original_service` with `App\\Decorator\\MyDecorator` in YAML?'
    answers:
      - { value: '''
services:
    App\\Decorator\\MyDecorator:
        decorates: app.original_service
'''
        , correct: true }
      - { value: '''
services:
    app.original_service:
        decorator: App\\Decorator\\MyDecorator
'''
        , correct: false }
      - { value: '''
services:
    App\\Decorator\\MyDecorator:
        arguments: ['@app.original_service.inner']
'''
        , correct: true }
      - { value: '''
services:
    App\\Decorator\\MyDecorator:
        parent: app.original_service
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_decoration.html

  - question: 'What is the purpose of the `inner` service ID when decorating a service?'
    answers:
      - { value: 'It refers to the decorator service itself.', correct: false }
      - { value: 'It refers to the original, undecorated service instance.', correct: true }
      - { value: 'It refers to a private service within the decorator.', correct: false }
      - { value: 'It is a reserved keyword for internal Symfony services.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_decoration.html

  - question: 'Which of the following is a valid way to define a service with a factory method in PHP configuration?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->factory([service('App\\Factory\\MyFactory'), 'create'])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->factory('App\\Factory\\MyFactory::create')
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->call('create', [service('App\\Factory\\MyFactory')])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->args([factory('App\\Factory\\MyFactory', 'create')])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/factories.html

  - question: 'What is the purpose of `#[TaggedItem]` attribute?'
    answers:
      - { value: 'To automatically tag a service with a specific tag.', correct: true }
      - { value: 'To define a service that is an item in a tagged collection.', correct: false }
      - { value: 'To mark a service as an iterable item.', correct: false }
      - { value: 'To exclude a service from being tagged.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'How can you define a service as an alias for another service named `app.original_service` with the alias `app.alias_service` in YAML?'
    answers:
      - { value: '''
services:
    app.alias_service: '@app.original_service'
'''
        , correct: true }
      - { value: '''
services:
    app.alias_service:
        alias: app.original_service
'''
        , correct: false }
      - { value: '''
services:
    app.alias_service:
        parent: app.original_service
'''
        , correct: false }
      - { value: '''
services:
    app.alias_service:
        extends: app.original_service
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/alias_private.html#services-alias

  - question: 'What is the purpose of `#[AutowireLocator]`?'
    answers:
      - { value: 'To inject a service locator that can retrieve services based on their IDs.', correct: true }
      - { value: 'To automatically locate all services in the container.', correct: false }
      - { value: 'To define a service that provides a locator for other services.', correct: false }
      - { value: 'To inject a single service from a service locator.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#service-locator_autowire-locator

  - question: 'How can you define a service with a specific tag named `my_tag` with a value `my_value` in YAML?'
    answers:
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        tags:
            - { name: my_tag, value: my_value }
'''
        , correct: true }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        tag: my_tag: my_value
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        attributes:
            my_tag: my_value
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        tagged:
            my_tag: my_value
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/tags.html

  - question: 'What is the purpose of `#[AutowireIterator]` when used with a service locator?'
    answers:
      - { value: 'To inject an iterator of services from a service locator based on a tag.', correct: true }
      - { value: 'To iterate over all services in the container.', correct: false }
      - { value: 'To automatically create an iterator for a service.', correct: false }
      - { value: 'To inject a single service from an iterator.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#service-locator_autowire-iterator

  - question: 'How can you define a service as abstract in YAML?'
    answers:
      - { value: '''
services:
    app.abstract_service:
        abstract: true
'''
        , correct: true }
      - { value: '''
services:
    app.abstract_service:
        class: ~
'''
        , correct: false }
      - { value: '''
services:
    app.abstract_service:
        synthetic: true
'''
        , correct: false }
      - { value: '''
services:
    app.abstract_service:
        factory: null
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/parent_services.html

  - question: 'What is the purpose of "parent services" in Symfony Dependency Injection?'
    answers:
      - { value: 'To define a service that inherits configuration from another service.', correct: true }
      - { value: 'To create a hierarchy of services for better organization.', correct: false }
      - { value: 'To mark a service as a dependency of another service.', correct: false }
      - { value: 'To define a service that is a parent class of another service.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/parent_services.html

  - question: 'How can you define a service that extends a parent service named `app.parent_service` in YAML?'
    answers:
      - { value: '''
services:
    app.child_service:
        parent: app.parent_service
'''
        , correct: true }
      - { value: '''
services:
    app.child_service:
        extends: app.parent_service
'''
        , correct: false }
      - { value: '''
services:
    app.child_service:
        inherits: app.parent_service
'''
        , correct: false }
      - { value: '''
services:
    app.child_service:
        alias: app.parent_service
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/parent_services.html

  - question: 'What is the purpose of the `ContainerBuilder::addCompilerPass()` method?'
    answers:
      - { value: 'To add a new service to the container.', correct: false }
      - { value: 'To register a custom compiler pass that modifies the container before compilation.', correct: true }
      - { value: 'To compile a specific service.', correct: false }
      - { value: 'To add a new parameter to the container.', correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection/compilation.html

  - question: 'Which of the following is a built-in Symfony service that provides access to the current request?'
    answers:
      - { value: '`request`', correct: false }
      - { value: '`request_stack`', correct: true }
      - { value: '`http_request`', correct: false }
      - { value: '`session`', correct: false }
    help: |
      https://symfony.com/doc/current/create_framework/dependency_injection.html

  - question: 'How can you define a service with a factory class and a static factory method in YAML?'
    answers:
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        factory: ['App\\Factory\\MyFactory', 'createStatic']
'''
        , correct: true }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        factory: App\\Factory\\MyFactory::createStatic
'''
        , correct: true }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        method: createStatic
        from_class: App\\Factory\\MyFactory
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        builder: App\\Factory\\MyFactory::createStatic
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/factories.html

  - question: 'What is the purpose of the `#[Autoconfigure]` attribute when applied to a class?'
    answers:
      - { value: 'It automatically registers the class as a service and applies default autowiring/autoconfiguration rules.', correct: true }
      - { value: 'It automatically generates a configuration file for the class.', correct: false }
      - { value: 'It makes the class a global service.', correct: false }
      - { value: 'It prevents the class from being autowired.', correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#autoconfigure

  - question: 'How can you inject a parameter into a service constructor using PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

class MyService
{
    public function __construct(
        #[Autowire('%kernel.project_dir%')]
        string $projectDir
    ) {
    }
}
'''
        , correct: true }
      - { value: '''
class MyService
{
    public function __construct(
        string $projectDir = '%kernel.project_dir%'
    ) {
    }
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Parameter;

class MyService
{
    public function __construct(
        #[Parameter('kernel.project_dir')]
        string $projectDir
    ) {
    }
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public function __construct(
        #[Autowire(parameter: 'kernel.project_dir')]
        string $projectDir
    ) {
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/controller.html

  - question: 'What is the purpose of `#[AutowireIterator]` when used without a tag?'
    answers:
      - { value: 'It injects an iterator of all services in the container.', correct: false }
      - { value: 'It injects an iterator of services that implement the type-hinted interface/class.', correct: true }
      - { value: 'It is not a valid usage of `#[AutowireIterator]`.', correct: false }
      - { value: 'It injects an iterator of all public services.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#service-locator_autowire-iterator

  - question: 'Which of the following is a valid way to define a service with a tag in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['value' => 'my_value'])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', 'my_value')
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', 'my_value')
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => 'my_value'])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireLocator]` when used without a tag?'
    answers:
      - { value: 'It injects a service locator containing all services in the container.', correct: false }
      - { value: 'It injects a service locator that can retrieve services based on their type-hinted interface/class.', correct: true }
      - { value: 'It is not a valid usage of `#[AutowireLocator]`.', correct: false }
      - { value: 'It injects a service locator of all public services.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#service-locator_autowire-locator

  - question: 'How can you define a service with a factory service and a factory method in YAML?'
    answers:
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        factory: ['@app.my_factory', 'create']
'''
        , correct: true }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        factory: app.my_factory::create
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        calls:
            - create: ['@app.my_factory']
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        builder: ['@app.my_factory', 'create']
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/factories.html

  - question: 'What is the purpose of `#[AutoconfigureTag]`?'
    answers:
      - { value: 'To automatically add a tag to a service based on its class name.', correct: false }
      - { value: 'To automatically apply a tag to services that implement a specific interface or extend a certain class.', correct: true }
      - { value: 'To configure the default tags for all services.', correct: false }
      - { value: 'To remove a tag from a service during autoconfiguration.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/tags.html#di-instanceof

  - question: 'Which of the following is a valid way to define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['value' => 'my_value'])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', value: 'my_value')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', value: 'my_value')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['value' => 'my_value']];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service as "private" in YAML?'
    answers:
      - { value: '''
services:
    app.my_private_service:
        public: false
'''
        , correct: true }
      - { value: '''
services:
    app.my_private_service:
        private: true
'''
        , correct: false }
      - { value: '''
services:
    app.my_private_service:
        scope: private
'''
        , correct: false }
      - { value: '''
services:
    app.my_private_service:
        access: private
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/public_private_services.html

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you inject a service into a public typed property using the `#[Required]` attribute?'
    answers:
      - { value: '''
use Symfony\\Contracts\\Service\\Attribute\\Required;

class Rot13Transformer
{
    #[Required]
    public LoggerInterface $logger;

    public function transform($value): void
    {
        $this->logger->info('Transforming '.$value);
    }
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Contracts\\Service\\Attribute\\Required;

class Rot13Transformer
{
    public LoggerInterface $logger;

    public function __construct(#[Required] LoggerInterface $logger)
    {
        $this->logger = $logger;
    }
}
'''
        , correct: false }
      - { value: '''
class Rot13Transformer
{
    public LoggerInterface $logger;

    public function setLogger(#[Required] LoggerInterface $logger): void
    {
        $this->logger = $logger;
    }
}
'''
        , correct: false }
      - { value: '''
class Rot13Transformer
{
    #[Inject]
    public LoggerInterface $logger;
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service that is only available when a specific environment variable is set?'
    answers:
      - { value: 'By using the `#[When]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[WhenNot]` attribute?'
    answers:
      - { value: 'To define conditional service loading based on the current environment, when the environment is NOT a specific value.', correct: true }
      - { value: 'To specify when a service should NOT be compiled.', correct: false }
      - { value: 'To control when a service is NOT decorated.', correct: false }
      - { value: 'To define a service that runs only when certain conditions are NOT met.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'How can you define a service with a factory class and a non-static factory method in YAML?'
    answers:
      - { value: '''
services:
    app.my_factory:
        class: App\\Factory\\MyFactory
    app.my_service:
        class: App\\Service\\MyService
        factory: ['@app.my_factory', 'create']
'''
        , correct: true }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        factory: App\\Factory\\MyFactory->create
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        method: create
        service: app.my_factory
'''
        , correct: false }
      - { value: '''
services:
    app.my_service:
        class: App\\Service\\MyService
        builder: ['@app.my_factory', 'create']
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/service_container/factories.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag')
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag')
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', true)
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag'])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct: false }
      - { value: 'To define a service that returns a method.', correct: false }
      - { value: 'To inject a service that is a method.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag')]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag'];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[AutowireServiceClosure]`?'
    answers:
      - { value: 'To inject a service as a closure, allowing for lazy instantiation of the service.', correct: true }
      - { value: 'To define a service that is a PHP closure.', correct: false }
      - { value: 'To automatically create a service from a closure.', correct: false }
      - { value: 'To inject a service that returns a closure.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring_closures

  - question: 'How can you define a service with a specific tag and attributes in PHP attributes?'
    answers:
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;

#[AsTaggedItem('my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: true }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Tag;

#[Tag('my_tag', priority: 10)]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
use Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;

#[Autowire(tag: 'my_tag', attributes: ['priority' => 10])]
class MyService
{
    // ...
}
'''
        , correct: false }
      - { value: '''
class MyService
{
    public static function getTags(): array
    {
        return ['my_tag' => ['priority' => 10]];
    }
}
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/reference/attributes.html#as-tagged-item

  - question: 'What is the purpose of `#[Lazy]` attribute?'
    answers:
      - { value: 'To mark a service for lazy loading, meaning it is only instantiated when first accessed.', correct: true }
      - { value: 'To define a service that is always loaded in the background.', correct: false }
      - { value: 'To make a service available only after a certain delay.', correct: false }
      - { value: 'To mark a service as optional.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container/lazy_services.html#lazy-services_configuration

  - question: 'How can you define a service that is only available when a specific environment variable is NOT set?'
    answers:
      - { value: 'By using the `#[WhenNot]` attribute with an environment variable check.', correct: true }
      - { value: 'By using a conditional statement in the service definition.', correct: false }
      - { value: 'By injecting the environment variable into the service.', correct: false }
      - { value: 'This is not directly supported by Symfony DI.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-container_limiting-to-env

  - question: 'What is the purpose of `#[Exclude]` attribute?'
    answers:
      - { value: 'To exclude a service from being compiled.', correct: false }
      - { value: 'To exclude a class or directory from autoconfiguration and autowiring.', correct: true }
      - { value: 'To exclude a service from being decorated.', correct: false }
      - { value: 'To exclude a service from being dumped to the cache.', correct: false }
    help: |
      https://symfony.com/doc/current/service_container.html#service-psr4-loader

  - question: 'How can you define a service with a specific tag and attributes in PHP configuration using `ContainerConfigurator`?'
    answers:
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: true }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->addTag('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->attribute('my_tag', ['priority' => 10])
    ;
};
'''
        , correct: false }
      - { value: '''
return static function (ContainerConfigurator $container): void {
    $services = $container->services();
    $services->set('app.my_service', App\\Service\\MyService::class)
        ->tags(['my_tag' => ['priority' => 10]])
    ;
};
'''
        , correct: false }
    help: |
      https://symfony.com/doc/current/components/dependency_injection.html

  - question: 'What is the purpose of `#[AutowireMethodOf]`?'
    answers:
      - { value: 'To inject a specific method of a service as a callable.', correct: true }
      - { value: 'To automatically call a method on a service after it has been instantiated.', correct