category: Miscellaneous
questions:
  -
    question: 'Which Symfony component allows you to manage environment variables from a `.env` file?'
    answers:
      - { value: 'DotEnv Component', correct: true }
      - { value: 'Config Component', correct: false }
      - { value: 'Yaml Component', correct: false }
      - { value: 'EnvLoader Component', correct: false }
    help: |
      The DotEnv component loads environment variables from .env files.
      https://symfony.com/doc/current/components/dotenv.html
  -
    question: 'In Symfony, how can you access an environment variable defined in your `.env` file within a service configuration (e.g., `services.yaml`)?'
    answers:
      - { value: '%env(APP_ENV)%', correct: true }
      - { value: 'env.APP_ENV', correct: false }
      - { value: '$_ENV[\'APP_ENV\']', correct: false }
      - { value: 'getenv(\'APP_ENV\')', correct: false }
    help: |
      Symfony's configuration allows using the %env()% syntax to reference environment variables.
      https://symfony.com/doc/current/configuration.html#environment-variables-in-service-configuration
  -
    question: 'Which of the following is a valid use case for Symfony\'s ExpressionLanguage component?'
    answers:
      - { value: 'Defining complex authorization rules in security configuration.', correct: true }
      - { value: 'Performing database queries with dynamic conditions.', correct: false }
      - { value: 'Generating HTML templates with conditional logic.', correct: false }
      - { value: 'Parsing YAML configuration files.', correct: false }
    help: |
      The ExpressionLanguage component is often used for evaluating expressions in various Symfony components, including security.
      https://symfony.com/doc/current/components/expression_language.html
  -
    question: 'Consider the following ExpressionLanguage expression: `service(\'App\\Service\\MyService\').myMethod(param)` What does `service()` do?'
    answers:
      - { value: 'It retrieves a service from the service container.', correct: true }
      - { value: 'It defines a new service.', correct: false }
      - { value: 'It calls a static method on a class.', correct: false }
      - { value: 'It injects a dependency into the expression.', correct: false }
    help: |
      The `service()` function in ExpressionLanguage allows accessing services from the container.
      https://symfony.com/doc/current/components/expression_language.html#accessing-services
  -
    question: 'When should you typically use `APP_ENV=prod` and `APP_DEBUG=0` in a Symfony application?'
    answers:
      - { value: 'In a production environment for optimal performance and security.', correct: true }
      - { value: 'During local development for detailed error reporting.', correct: false }
      - { value: 'When running unit tests.', correct: false }
      - { value: 'To enable the Web Debug Toolbar.', correct: false }
    help: |
      These settings are crucial for production deployments to disable debugging and optimize performance.
      https://symfony.com/doc/current/configuration/environments.html
  -
    question: 'How does Symfony handle uncaught exceptions in a production environment by default?'
    answers:
      - { value: 'It displays a generic error page (e.g., 500 Internal Server Error).', correct: true }
      - { value: 'It displays a detailed stack trace to the user.', correct: false }
      - { value: 'It automatically redirects to the homepage.', correct: false }
      - { value: 'It logs the error and terminates the script without a response.', correct: false }
    help: |
      In production, Symfony's default error handling shows a user-friendly error page to prevent exposing sensitive information.
      https://symfony.com/doc/current/controller/error_pages.html
  -
    question: 'Which of the following is the recommended way to log errors in a Symfony application?'
    answers:
      - { value: 'Using the `LoggerInterface` service injected into your classes.', correct: true }
      - { value: 'Using `error_log()` directly in your code.', correct: false }
      - { value: 'Writing directly to a file using `file_put_contents()`.', correct: false }
      - { value: 'Relying solely on web server error logs.', correct: false }
    help: |
      Symfony integrates with Monolog, and the `LoggerInterface` is the standard way to log messages, including errors.
      https://symfony.com/doc/current/logging.html
  -
    question: 'What is the primary purpose of the `config/packages/prod/monolog.yaml` file in a Symfony application?'
    answers:
      - { value: 'To configure Monolog handlers and processors specifically for the production environment.', correct: true }
      - { value: 'To define all Monolog configurations for every environment.', correct: false }
      - { value: 'To disable logging completely in production.', correct: false }
      - { value: 'To configure database logging.', correct: false }
    help: |
      Symfony allows environment-specific configuration files, including for Monolog.
      https://symfony.com/doc/current/logging.html#configuration
  -
    question: 'When debugging a Symfony application, which command is useful for inspecting the service container?'
    answers:
      - { value: '`php bin/console debug:container`', correct: true }
      - { value: '`php bin/console cache:clear`', correct: false }
      - { value: '`php bin/console doctrine:schema:update`', correct: false }
      - { value: '`php bin/console router:debug`', correct: false }
    help: |
      The `debug:container` command provides detailed information about registered services.
      https://symfony.com/doc/current/console/commands_overview.html#debug-commands
  -
    question: 'What is the purpose of the Symfony Web Profiler?'
    answers:
      - { value: 'To collect and display detailed information about requests, responses, and internal Symfony processes during development.', correct: true }
      - { value: 'To optimize database queries in a production environment.', correct: false }
      - { value: 'To manage user authentication and authorization.', correct: false }
      - { value: 'To deploy the application to a production server.', correct: false }
    help: |
      The Web Profiler is an invaluable debugging and performance analysis tool for development.
      https://symfony.com/doc/current/profiler.html
  -
    question: 'Which of the following tools is commonly used for step-by-step debugging PHP code in a Symfony application?'
    answers:
      - { value: 'Xdebug', correct: true }
      - { value: 'PHPUnit', correct: false }
      - { value: 'Composer', correct: false }
      - { value: 'Webpack Encore', correct: false }
    help: |
      Xdebug is the de facto standard for debugging PHP applications.
      https://symfony.com/doc/current/setup/symfony_server.html#xdebug
  -
    question: 'What is the recommended way to clear the Symfony cache in a production deployment?'
    answers:
      - { value: '`php bin/console cache:clear --env=prod`', correct: true }
      - { value: 'Manually deleting the `var/cache/prod` directory.', correct: false }
      - { value: 'Running `composer install` again.', correct: false }
      - { value: 'Restarting the web server without clearing the cache.', correct: false }
    help: |
      The `cache:clear` command ensures that the cache is properly invalidated.
      https://symfony.com/doc/current/console/commands_overview.html#cache-commands
  -
    question: 'When deploying a Symfony application, why is it important to run `composer install --no-dev --optimize-autoloader`?'
    answers:
      - { value: 'To install only production dependencies and optimize the autoloader for performance.', correct: true }
      - { value: 'To install all dependencies, including development ones.', correct: false }
      - { value: 'To remove all Composer dependencies.', correct: false }
      - { value: 'To update Composer itself.', correct: false }
    help: |
      These flags are crucial for a lean and performant production deployment.
      https://symfony.com/doc/current/deployment.html#install-your-dependencies
  -
    question: 'Which of the following is a best practice for managing sensitive configuration data (e.g., database credentials) in a Symfony production environment?'
    answers:
      - { value: 'Using environment variables (e.g., via `.env.local.prod` or server-level environment variables).', correct: true }
      - { value: 'Hardcoding them directly in `config/services.yaml`.', correct: false }
      - { value: 'Committing them to version control in `config/packages/prod/parameters.yaml`.', correct: false }
      - { value: 'Storing them in a public JSON file.', correct: false }
    help: |
      Environment variables are the most secure way to handle sensitive data in production.
      https://symfony.com/doc/current/configuration/secrets.html
  -
    question: 'What is the purpose of the `symfony/cache` component?'
    answers:
      - { value: 'It provides a PSR-6 and PSR-16 compliant caching layer for storing data.', correct: true }
      - { value: 'It manages HTTP cache headers for responses.', correct: false }
      - { value: 'It stores session data.', correct: false }
      - { value: 'It optimizes database queries.', correct: false }
    help: |
      The Cache component offers a unified API for various caching backends.
      https://symfony.com/doc/current/components/cache.html
  -
    question: 'Which cache adapter would you typically use for storing cache items in a Redis server?'
    answers:
      - { value: 'RedisAdapter', correct: true }
      - { value: 'FilesystemAdapter', correct: false }
      - { value: 'ApcuAdapter', correct: false }
      - { value: 'DoctrineDbalAdapter', correct: false }
    help: |
      Symfony's Cache component provides specific adapters for different caching systems.
      https://symfony.com/doc/current/components/cache/adapters/redis_adapter.html
  -
    question: 'What is the primary function of the `symfony/process` component?'
    answers:
      - { value: 'To execute shell commands and manage external processes.', correct: true }
      - { value: 'To handle HTTP requests and responses.', correct: false }
      - { value: 'To manage background jobs in a queue.', correct: false }
      - { value: 'To serialize and deserialize PHP objects.', correct: false }
    help: |
      The Process component provides an object-oriented API for running external commands.
      https://symfony.com/doc/current/components/process.html
  -
    question: 'How can you execute a simple shell command and get its output using the Process component?'
    answers:
      - { value: '`$process = new Process([\'ls\', \'-l\']); $process->run(); echo $process->getOutput();`', correct: true }
      - { value: '`exec(\'ls -l\');`', correct: false }
      - { value: '`shell_exec(\'ls -l\');`', correct: false }
      - { value: '`$process = Process::run(\'ls -l\'); echo $process->output;`', correct: false }
    help: |
      The `Process` class provides methods to run commands and retrieve their output.
      https://symfony.com/doc/current/components/process.html#running-the-process
  -
    question: 'What is the main purpose of the `symfony/serializer` component?'
    answers:
      - { value: 'To convert PHP objects into various formats (e.g., JSON, XML) and vice versa.', correct: true }
      - { value: 'To encrypt and decrypt data.', correct: false }
      - { value: 'To validate data against a set of rules.', correct: false }
      - { value: 'To send HTTP requests.', correct: false }
    help: |
      The Serializer component is essential for API development and data exchange.
      https://symfony.com/doc/current/components/serializer.html
  -
    question: 'Which of the following is a key concept in the Symfony Serializer component for controlling which properties are serialized?'
    answers:
      - { value: 'Serialization Groups', correct: true }
      - { value: 'Serialization Filters', correct: false }
      - { value: 'Serialization Layers', correct: false }
      - { value: 'Serialization Mappers', correct: false }
    help: |
      Serialization groups allow fine-grained control over the serialization process.
      https://symfony.com/doc/current/components/serializer.html#using-serialization-groups
  -
    question: 'What problem does the `symfony/messenger` component primarily solve?'
    answers:
      - { value: 'Handling asynchronous messages and background tasks.', correct: true }
      - { value: 'Sending emails to users.', correct: false }
      - { value: 'Managing user sessions.', correct: false }
      - { value: 'Building command-line applications.', correct: false }
    help: |
      The Messenger component provides a robust solution for message queuing and asynchronous processing.
      https://symfony.com/doc/current/components/messenger.html
  -
    question: 'In Symfony Messenger, what is a "message handler" responsible for?'
    answers:
      - { value: 'Processing a specific type of message.', correct: true }
      - { value: 'Sending messages to a transport.', correct: false }
      - { value: 'Defining the message structure.', correct: false }
      - { value: 'Logging message activity.', correct: false }
    help: |
      Message handlers contain the business logic for dealing with messages.
      https://symfony.com/doc/current/messenger.html#creating-a-message-handler
  -
    question: 'Which command is used to consume messages from a Symfony Messenger transport?'
    answers:
      - { value: '`php bin/console messenger:consume <transport_name>`', correct: true }
      - { value: '`php bin/console messenger:send`', correct: false }
      - { value: '`php bin/console messenger:debug`', correct: false }
      - { value: '`php bin/console messenger:setup`', correct: false }
    help: |
      The `messenger:consume` command starts a worker that processes messages from a specified transport.
      https://symfony.com/doc/current/messenger.html#running-the-worker
  -
    question: 'What is the primary role of the `symfony/mime` component?'
    answers:
      - { value: 'To create and manipulate MIME messages, often used for emails.', correct: true }
      - { value: 'To detect file MIME types.', correct: false }
      - { value: 'To handle HTTP content types.', correct: false }
      - { value: 'To validate email addresses.', correct: false }
    help: |
      The Mime component provides tools for building complex MIME messages.
      https://symfony.com/doc/current/components/mime.html
  -
    question: 'Which Symfony component is responsible for sending emails?'
    answers:
      - { value: 'Mailer Component', correct: true }
      - { value: 'Mime Component', correct: false }
      - { value: 'SwiftMailer Bundle (deprecated in Symfony 5.x+)', correct: false }
      - { value: 'Emailer Component', correct: false }
    help: |
      The Mailer component is the modern way to send emails in Symfony. SwiftMailer is deprecated.
      https://symfony.com/doc/current/mailer.html
  -
    question: 'How do you send a simple email using the Symfony Mailer component?'
    answers:
      - { value: 'Inject `MailerInterface`, create `Email` object, set from/to/subject/text, then call `$mailer->send($email)`.', correct: true }
      - { value: 'Use `mail()` PHP function directly.', correct: false }
      - { value: 'Call `Email::send()` static method.', correct: false }
      - { value: 'Configure `swiftmailer.yaml` and use `Swift_Mailer`.', correct: false }
    help: |
      The Mailer component provides a clear API for sending emails.
      https://symfony.com/doc/current/mailer.html#sending-emails
  -
    question: 'What is the purpose of the `symfony/filesystem` component?'
    answers:
      - { value: 'To provide utility functions for common filesystem operations (e.g., copy, mkdir, remove).', correct: true }
      - { value: 'To manage database files.', correct: false }
      - { value: 'To handle file uploads in web forms.', correct: false }
      - { value: 'To stream large files over HTTP.', correct: false }
    help: |
      The Filesystem component simplifies common file and directory operations.
      https://symfony.com/doc/current/components/filesystem.html
  -
    question: 'Which method of the `Filesystem` component would you use to create a directory if it doesn\'t already exist?'
    answers:
      - { value: '`mkdir()`', correct: true }
      - { value: '`createDirectory()`', correct: false }
      - { value: '`makeDir()`', correct: false }
      - { value: '`ensureDir()`', correct: false }
    help: |
      The `mkdir()` method creates directories recursively if needed.
      https://symfony.com/doc/current/components/filesystem.html#mkdir
  -
    question: 'What is the primary function of the `symfony/finder` component?'
    answers:
      - { value: 'To find files and directories based on various criteria (e.g., name, size, type).', correct: true }
      - { value: 'To search for text within files.', correct: false }
      - { value: 'To locate specific lines of code in a project.', correct: false }
      - { value: 'To discover available services in the container.', correct: false }
    help: |
      The Finder component provides a fluent interface for searching the filesystem.
      https://symfony.com/doc/current/components/finder.html
  -
    question: 'How can you find all PHP files in a directory and its subdirectories using the Finder component?'
    answers:
      - { value: '`$finder = new Finder(); $finder->files()->in(\'./src\')->name(\'*.php\');`', correct: true }
      - { value: '`$finder = Finder::find(\'*.php\')->in(\'./src\');`', correct: false }
      - { value: '`$finder = new Finder(\'./src\'); $finder->type(\'file\')->extension(\'php\');`', correct: false }
      - { value: '`glob(\'./src/**/*.php\');`', correct: false }
    help: |
      The Finder component offers a chainable API for building complex search queries.
      https://symfony.com/doc/current/components/finder.html#usage
  -
    question: 'What problem does the `symfony/lock` component address?'
    answers:
      - { value: 'Preventing race conditions when accessing shared resources in a distributed environment.', correct: true }
      - { value: 'Locking user accounts after too many failed login attempts.', correct: false }
      - { value: 'Securing files from unauthorized access.', correct: false }
      - { value: 'Preventing concurrent execution of console commands.', correct: true }
    help: |
      The Lock component provides a way to acquire and release locks to protect critical sections of code. It's useful for both distributed systems and local command execution.
      https://symfony.com/doc/current/components/lock.html
  -
    question: 'Which of the following is a valid store for the Symfony Lock component?'
    answers:
      - { value: 'RedisStore', correct: true }
      - { value: 'DatabaseStore', correct: false }
      - { value: 'FileStore', correct: true }
      - { value: 'MemcachedStore', correct: true }
    help: |
      The Lock component supports various stores, including Redis, Filesystem, and Memcached.
      https://symfony.com/doc/current/components/lock.html#stores
  -
    question: 'Which of the following is NOT a feature provided by the Symfony Web Debug Toolbar?'
    answers:
      - { value: 'Real-time code editing and deployment.', correct: true }
      - { value: 'Information about the current request and response.', correct: true }
      - { value: 'Details about executed database queries.', correct: true }
      - { value: 'Performance metrics (e.g., memory usage, execution time).', correct: true }
    help: |
      The Web Debug Toolbar is for profiling and debugging, not for live code editing or deployment.
      https://symfony.com/doc/current/profiler.html#the-web-debug-toolbar
  -
    question: 'Which data collector in the Web Profiler provides information about the services loaded in the container?'
    answers:
      - { value: 'Container Data Collector', correct: true }
      - { value: 'Service Data Collector', correct: false }
      - { value: 'DependencyInjection Data Collector', correct: false }
      - { value: 'Profiler Data Collector', correct: false }
    help: |
      The Container Data Collector gives insights into the service container.
      https://symfony.com/doc/current/profiler/data_collectors.html#container-data-collector
  -
    question: 'What is the primary purpose of Internationalization (i18n) in Symfony?'
    answers:
      - { value: 'To adapt the application to different languages and regions without requiring code changes.', correct: true }
      - { value: 'To translate database content.', correct: false }
      - { value: 'To secure the application from international threats.', correct: false }
      - { value: 'To optimize network performance for global users.', correct: false }
    help: |
      Internationalization is about making your application adaptable to different locales.
      https://symfony.com/doc/current/translation.html
  -
    question: 'Which command is used to extract translation messages from your Symfony application?'
    answers:
      - { value: '`php bin/console translation:extract <locale>`', correct: true }
      - { value: '`php bin/console translation:update`', correct: false }
      - { value: '`php bin/console i18n:scan`', correct: false }
      - { value: '`php bin/console assets:install`', correct: false }
    help: |
      The `translation:extract` command helps in generating translation files.
      https://symfony.com/doc/current/translation.html#extracting-translation-messages
  -
    question: 'In Symfony, where are translation messages typically stored?'
    answers:
      - { value: 'In `messages.<locale>.<format>` files (e.g., `messages.fr.yaml`, `messages.en.xlf`).', correct: true }
      - { value: 'In the database.', correct: false }
      - { value: 'Directly in Twig templates.', correct: false }
      - { value: 'In a single `translations.yaml` file.', correct: false }
    help: |
      Symfony uses a standard file-based approach for translations.
      https://symfony.com/doc/current/translation.html#translation-resources
  -
    question: 'What is the purpose of the `symfony/intl` component?'
    answers:
      - { value: 'It provides a PHP replacement for the C `intl` extension, offering locale-aware data formatting.', correct: true }
      - { value: 'It handles international payment gateways.', correct: false }
      - { value: 'It manages internationalization of routes.', correct: false }
      - { value: 'It provides tools for international SEO.', correct: false }
    help: |
      The Intl component offers robust internationalization capabilities, even if the `intl` PHP extension is not available.
      https://symfony.com/doc/current/components/intl.html
  -
    question: 'Which class from the `symfony/intl` component would you use to format a number according to a specific locale?'
    answers:
      - { value: '`NumberFormatter`', correct: true }
      - { value: '`IntlFormatter`', correct: false }
      - { value: '`LocaleFormatter`', correct: false }
      - { value: '`CurrencyFormatter`', correct: false }
    help: |
      `NumberFormatter` is part of the `Intl` component for locale-aware number formatting.
      https://symfony.com/doc/current/components/intl.html#number-formatter
  -
    question: 'What is the main benefit of using the `symfony/runtime` component?'
    answers:
      - { value: 'It provides a flexible way to boot Symfony applications in different environments (e.g., web, console, serverless).', correct: true }
      - { value: 'It allows for dynamic code execution at runtime.', correct: false }
      - { value: 'It manages application dependencies at runtime.', correct: false }
      - { value: 'It optimizes PHP runtime performance.', correct: false }
    help: |
      The Runtime component decouples the application from the global state, making it more adaptable.
      https://symfony.com/doc/current/components/runtime.html
  -
    question: 'Which file typically contains the entry point for a Symfony web application when using the Runtime component?'
    answers:
      - { value: '`public/index.php`', correct: true }
      - { value: '`bin/console`', correct: false }
      - { value: '`src/Kernel.php`', correct: false }
      - { value: '`config/bootstrap.php`', correct: false }
    help: |
      `public/index.php` is the standard entry point for web requests.
      https://symfony.com/doc/current/components/runtime.html#using-it-in-a-symfony-application
  -
    question: 'What is the purpose of the `symfony/clock` component?'
    answers:
      - { value: 'To provide an abstraction layer for time-related operations, making code testable and predictable.', correct: true }
      - { value: 'To synchronize server time with external NTP servers.', correct: false }
      - { value: 'To measure the execution time of application code.', correct: false }
      - { value: 'To schedule cron jobs.', correct: false }
    help: |
      The Clock component allows you to control the "current time" for testing purposes.
      https://symfony.com/doc/current/components/clock.html
  -
    question: 'Which interface should you type-hint in your services if you want to use the `symfony/clock` component to get the current time in a testable way?'
    answers:
      - { value: '`Symfony\\Component\\Clock\\ClockInterface`', correct: true }
      - { value: '`DateTimeInterface`', correct: false }
      - { value: '`TimeProviderInterface`', correct: false }
      - { value: '`CurrentTimeInterface`', correct: false }
    help: |
      `ClockInterface` is the main interface for interacting with the Clock component.
      https://symfony.com/doc/current/components/clock.html#usage
  -
    question: 'When configuring a custom error page for a 404 Not Found error in Symfony, which template file would you typically create or modify?'
    answers:
      - { value: '`templates/bundles/TwigBundle/Exception/error404.html.twig`', correct: true }
      - { value: '`templates/error/404.html.twig`', correct: false }
      - { value: '`templates/exception/not_found.html.twig`', correct: false }
      - { value: '`templates/errors/404.html.twig`', correct: false }
    help: |
      Symfony's error handling allows overriding specific error templates by convention.
      https://symfony.com/doc/current/controller/error_pages.html#customizing-error-pages
  -
    question: 'Which Symfony environment is typically used for running automated tests (e.g., PHPUnit tests)?'
    answers:
      - { value: '`test`', correct: true }
      - { value: '`dev`', correct: false }
      - { value: '`prod`', correct: false }
      - { value: '`staging`', correct: false }
    help: |
      The `test` environment is specifically designed for testing, often with a separate database and disabled caching.
      https://symfony.com/doc/current/configuration/environments.html#the-test-environment
  -
    question: 'What is the purpose of the `var/log/dev.log` file in a Symfony application?'
    answers:
      - { value: 'It stores application logs specifically for the development environment.', correct: true }
      - { value: 'It stores all application logs, regardless of the environment.', correct: false }
      - { value: 'It contains database query logs.', correct: false }
      - { value: 'It is a temporary file that can be safely deleted.', correct: false }
    help: |
      Monolog, by default, logs to environment-specific files.
      https://symfony.com/doc/current/logging.html#configuration
  -
    question: 'Which command can you use to check for potential configuration issues in your Symfony application?'
    answers:
      - { value: '`php bin/console lint:container`', correct: true }
      - { value: '`php bin/console config:debug`', correct: false }
      - { value: '`php bin/console check:config`', correct: false }
      - { value: '`php bin/console debug:config`', correct: true }
    help: |
      Both `lint:container` and `debug:config` are useful for inspecting and validating configuration.
      https://symfony.com/doc/current/console/commands_overview.html#debug-commands
      https://symfony.com/doc/current/console/commands_overview.html#lint-commands
  -
    question: 'When deploying a Symfony application, why is it important to ensure that the `var/` directory is writable by the web server user?'
    answers:
      - { value: 'To allow Symfony to write cache, logs, and session files.', correct: true }
      - { value: 'To allow users to upload files directly to this directory.', correct: false }
      - { value: 'To store application source code.', correct: false }
      - { value: 'To execute console commands from the web browser.', correct: false }
    help: |
      The `var/` directory is where Symfony stores its runtime data.
      https://symfony.com/doc/current/setup/file_permissions.html
  -
    question: 'Which of the following is a common strategy for zero-downtime deployment of a Symfony application?'
    answers:
      - { value: 'Using symlinks to switch between new and old releases.', correct: true }
      - { value: 'Manually copying files over the existing installation.', correct: false }
      - { value: 'Taking the server offline during deployment.', correct: false }
      - { value: 'Deleting the entire application and redeploying from scratch.', correct: false }
    help: |
      Symlinking is a widely adopted technique for achieving zero-downtime deployments.
      https://symfony.com/doc/current/deployment.html#zero-downtime-deployment
  -
    question: 'What is the primary role of the `symfony/http-client` component in the context of external API calls?'
    answers:
      - { value: 'To make HTTP requests to external services.', correct: true }
      - { value: 'To handle incoming HTTP requests from users.', correct: false }
      - { value: 'To manage HTTP cache for responses.', correct: false }
      - { value: 'To validate HTTP headers.', correct: false }
    help: |
      The HttpClient component provides a powerful and flexible way to consume external APIs.
      https://symfony.com/doc/current/components/http_client.html
  -
    question: 'Which method of `HttpClientInterface` would you use to send a GET request?'
    answers:
      - { value: '`request(\'GET\', $url)`', correct: true }
      - { value: '`get($url)`', correct: false }
      - { value: '`sendGet($url)`', correct: false }
      - { value: '`makeGetRequest($url)`', correct: false }
    help: |
      The `request()` method is the main entry point for sending HTTP requests with the HttpClient.
      https://symfony.com/doc/current/components/http_client.html#making-requests
  -
    question: 'When using the Serializer component, what is the purpose of a "Normalizer"?'
    answers:
      - { value: 'To convert complex data (e.g., objects) into simple arrays or scalar values.', correct: true }
      - { value: 'To convert data from one format to another (e.g., JSON to XML).', correct: false }
      - { value: 'To validate the data before serialization.', correct: false }
      - { value: 'To encrypt the serialized data.', correct: false }
    help: |
      Normalizers are responsible for transforming objects into a normalized array structure.
      https://symfony.com/doc/current/components/serializer.html#normalizers
  -
    question: 'Which of the following is a benefit of using the Symfony Messenger component for sending emails (e.g., via an `EmailMessage` message)?'
    answers:
      - { value: 'Emails can be sent asynchronously, improving response time for the user.', correct: true }
      - { value: 'It guarantees immediate email delivery.', correct: false }
      - { value: 'It automatically retries failed email sends indefinitely.', correct: false }
      - { value: 'It bypasses the need for an external mail server.', correct: false }
    help: |
      Sending emails asynchronously via Messenger prevents blocking the user's request while the email is being sent.
      https://symfony.com/doc/current/mailer.html#sending-emails-asynchronously
  -
    question: 'What is the primary use case for the `symfony/notifier` component?'
    answers:
      - { value: 'Sending notifications to various channels (e.g., email, SMS, chat platforms).', correct: true }
      - { value: 'Notifying users about system updates.', correct: false }
      - { value: 'Sending internal system alerts to developers.', correct: false }
      - { value: 'Notifying the application about changes in configuration.', correct: false }
    help: |
      The Notifier component provides a unified API for sending notifications through different services.
      https://symfony.com/doc/current/notifier.html
  -
    question: 'Which of the following is a common transport for the Notifier component?'
    answers:
      - { value: 'Twilio (for SMS)', correct: true }
      - { value: 'RabbitMQ', correct: false }
      - { value: 'MySQL', correct: false }
      - { value: 'FTP', correct: false }
    help: |
      Notifier supports various third-party services as transports.
      https://symfony.com/doc/current/notifier.html#transports
  -
    question: 'When debugging a Symfony console command, which option can you use to get more verbose output?'
    answers:
      - { value: '`-v` or `--verbose`', correct: true }
      - { value: '`-d` or `--debug`', correct: false }
      - { value: '`-x` or `--extra`', correct: false }
      - { value: '`-l` or `--log`', correct: false }
    help: |
      The verbose option is a standard way to increase output detail in console commands.
      https://symfony.com/doc/current/console.html#verbosity-levels
  -
    question: 'What is the purpose of the `symfony/asset` component in a Symfony application?'
    answers:
      - { value: 'To manage and version static assets (e.g., CSS, JavaScript, images).', correct: true }
      - { value: 'To store user-uploaded files.', correct: false }
      - { value: 'To serve assets from a CDN.', correct: true }
      - { value: 'To compile frontend assets (e.g., with Webpack Encore).', correct: false }
    help: |
      The Asset component helps with asset versioning, package management, and CDN integration. While it works *with* compilers like Webpack Encore, it doesn't compile itself.
      https://symfony.com/doc/current/components/asset.html
  -
    question: 'Which Twig function is used to generate a URL for an asset managed by the Asset component?'
    answers:
      - { value: '`asset(\'path/to/asset.css\')`', correct: true }
      - { value: '`url(\'path/to/asset.css\')`', correct: false }
      - { value: '`path(\'path/to/asset.css\')`', correct: false }
      - { value: '`resource(\'path/to/asset.css\')`', correct: false }
    help: |
      The `asset()` Twig function is specifically designed for this purpose.
      https://symfony.com/doc/current/components/asset.html#usage-in-twig
  -
    question: 'What is the primary role of the `symfony/uid` component?'
    answers:
      - { value: 'To generate universally unique identifiers (UUIDs) and ULIDs.', correct: true }
      - { value: 'To manage user IDs in a database.', correct: false }
      - { value: 'To identify unique requests in the application.', correct: false }
      - { value: 'To generate unique temporary file names.', correct: false }
    help: |
      The UID component provides robust and standard-compliant unique ID generation.
      https://symfony.com/doc/current/components/uid.html
  -
    question: 'Which type of UUID is time-based and can be sorted chronologically?'
    answers:
      - { value: 'UUIDv1', correct: true }
      - { value: 'UUIDv4', correct: false }
      - { value: 'UUIDv5', correct: false }
      - { value: 'UUIDv6', correct: true }
    help: |
      UUIDv1 and UUIDv6 are time-based UUIDs, with UUIDv6 being a reordered UUIDv1 for better database indexing.
      https://symfony.com/doc/current/components/uid.html#uuid-types
  -
    question: 'What is the purpose of the `symfony/rate-limiter` component?'
    answers:
      - { value: 'To control the rate at which certain actions can be performed (e.g., API calls, login attempts).', correct: true }
      - { value: 'To limit the number of concurrent users on the application.', correct: false }
      - { value: 'To restrict bandwidth usage for specific routes.', correct: false }
      - { value: 'To limit the size of uploaded files.', correct: false }
    help: |
      The RateLimiter component helps prevent abuse and ensure fair resource usage.
      https://symfony.com/doc/current/components/rate_limiter.html
  -
    question: 'Which of the following is a common strategy for implementing rate limiting?'
    answers:
      - { value: 'Token Bucket Algorithm', correct: true }
      - { value: 'Leaky Bucket Algorithm', correct: true }
      - { value: 'Sliding Window Algorithm', correct: true }
      - { value: 'Round Robin Algorithm', correct: false }
    help: |
      The RateLimiter component supports various algorithms for rate limiting.
      https://symfony.com/doc/current/components/rate_limiter.html#rate-limiter-algorithms
  -
    question: 'What is the purpose of the `symfony/notifier` component in the context of security alerts?'
    answers:
      - { value: 'To send notifications to administrators or security teams about suspicious activities (e.g., failed login attempts).', correct: true }
      - { value: 'To block malicious IP addresses.', correct: false }
      - { value: 'To encrypt sensitive data in the database.', correct: false }
      - { value: 'To perform vulnerability scanning.', correct: false }
    help: |
      Notifier can be integrated with security events to send alerts.
      https://symfony.com/doc/current/notifier.html
  -
    question: 'When deploying a Symfony application, what is the role of a "build step"?'
    answers:
      - { value: 'To compile assets, clear cache, and install production dependencies.', correct: true }
      - { value: 'To start the web server.', correct: false }
      - { value: 'To configure the database connection.', correct: false }
      - { value: 'To create a new Symfony project.', correct: false }
    help: |
      A build step prepares the application for deployment.
      https://symfony.com/doc/current/deployment.html#build-step
  -
    question: 'What is the purpose of the `symfony/error-handler` component?'
    answers:
      - { value: 'To convert PHP errors and exceptions into `ErrorException` and `FatalErrorException` objects, allowing them to be caught and handled.', correct: true }
      - { value: 'To display custom error pages to the user.', correct: false }
      - { value: 'To log errors to a file.', correct: false }
      - { value: 'To send error reports to a monitoring service.', correct: false }
    help: |
      The ErrorHandler component normalizes PHP errors into catchable exceptions.
      https://symfony.com/doc/current/components/error_handler.html
  -
    question: 'Which of the following is a benefit of using the `symfony/config` component for defining application configuration?'
    answers:
      - { value: 'It provides a structured way to define and validate configuration parameters.', correct: true }
      - { value: 'It automatically generates configuration files.', correct: false }
      - { value: 'It encrypts sensitive configuration data.', correct: false }
      - { value: 'It allows configuration to be changed at runtime without restarting the application.', correct: false }
    help: |
      The Config component offers a powerful way to define and process configuration trees.
      https://symfony.com/doc/current/components/config.html
  -
    question: 'What is the purpose of the `symfony/debug-bundle`?'
    answers:
      - { value: 'It integrates the Web Profiler and other debugging tools into a Symfony application.', correct: true }
      - { value: 'It provides a standalone debugger for PHP applications.', correct: false }
      - { value: 'It helps optimize application performance in production.', correct: false }
      - { value: 'It manages error logging for the entire system.', correct: false }
    help: |
      The DebugBundle provides the development-time debugging experience.
      https://symfony.com/doc/current/bundles/DebugBundle/index.html
  -
    question: 'Which of the following is a common practice for internationalizing routes in Symfony?'
    answers:
      - { value: 'Using the `_locale` parameter in route definitions.', correct: true }
      - { value: 'Creating separate controllers for each language.', correct: false }
      - { value: 'Storing translated route paths in the database.', correct: false }
      - { value: 'Using subdomains for different languages.', correct: true }
    help: |
      Symfony supports both `_locale` parameter and domain-based localization for routes.
      https://symfony.com/doc/current/routing/localized_routes.html
  -
    question: 'What is the purpose of the `symfony/web-link` component?'
    answers:
      - { value: 'To manage HTTP Link headers for preloading, prefetching, and other resource hints.', correct: true }
      - { value: 'To create hyperlinks within Twig templates.', correct: false }
      - { value: 'To manage external CSS and JavaScript files.', correct: false }
      - { value: 'To handle deep linking for mobile applications.', correct: false }
    help: |
      The WebLink component helps optimize frontend performance by leveraging HTTP Link headers.
      https://symfony.com/doc/current/components/web_link.html
  -
    question: 'Which of the following is a valid use case for the `symfony/property-access` component?'
    answers:
      - { value: 'Reading and writing properties of objects or arrays using a string path (e.g., `user.address.street`).', correct: true }
      - { value: 'Accessing private properties of a class directly.', correct: false }
      - { value: 'Validating property values.', correct: false }
      - { value: 'Generating getter and setter methods for properties.', correct: false }
    help: |
      The PropertyAccess component provides a flexible way to access nested data.
      https://symfony.com/doc/current/components/property_access.html
  -
    question: 'What is the purpose of the `symfony/property-info` component?'
    answers:
      - { value: 'To extract information about class properties (e.g., types, mutability, accessors).', correct: true }
      - { value: 'To define new properties for a class at runtime.', correct: false }
      - { value: 'To validate property types during deserialization.', correct: false }
      - { value: 'To automatically generate documentation for class properties.', correct: false }
    help: |
      The PropertyInfo component is used by other components like Serializer and Form to understand object properties.
      https://symfony.com/doc/current/components/property_info.html
  -
    question: 'When using the Messenger component, what is a "transport" responsible for?'
    answers:
      - { value: 'Sending and receiving messages to/from a message queue (e.g., RabbitMQ, Redis).', correct: true }
      - { value: 'Processing messages in a handler.', correct: false }
      - { value: 'Defining the message class structure.', correct: false }
      - { value: 'Logging message failures.', correct: false }
    help: |
      Transports are the bridge between your application and the message broker.
      https://symfony.com/doc/current/messenger.html#transports
  -
    question: 'What is the primary purpose of the `symfony/stopwatch` component?'
    answers:
      - { value: 'To measure the execution time of specific code blocks or events.', correct: true }
      - { value: 'To pause the execution of a script for a given duration.', correct: false }
      - { value: 'To schedule tasks to run at specific times.', correct: false }
      - { value: 'To record video of application execution.', correct: false }
    help: |
      The Stopwatch component is used for profiling and performance analysis.
      https://symfony.com/doc/current/components/stopwatch.html
  -
    question: 'Which of the following is a common use case for the `symfony/options-resolver` component?'
    answers:
      - { value: 'Defining and validating options for classes or methods (e.g., default values, required options, allowed types).', correct: true }
      - { value: 'Resolving service dependencies in the container.', correct: false }
      - { value: 'Resolving configuration parameters from YAML files.', correct: false }
      - { value: 'Resolving URL parameters in routes.', correct: false }
    help: |
      The OptionsResolver component provides a robust way to handle configurable options.
      https://symfony.com/doc/current/components/options_resolver.html
  -
    question: 'What is the purpose of the `symfony/string` component?'
    answers:
      - { value: 'To provide a powerful, object-oriented API for manipulating strings, including Unicode support.', correct: true }
      - { value: 'To validate string formats (e.g., email, URL).', correct: false }
      - { value: 'To encrypt and decrypt strings.', correct: false }
      - { value: 'To convert strings to different character encodings.', correct: false }
    help: |
      The String component offers a modern alternative to traditional PHP string functions.
      https://symfony.com/doc/current/components/string.html
  -
    question: 'Which `String` component method would you use to convert a string to snake_case?'
    answers:
      - { value: '`snake()`', correct: true }
      - { value: '`toSnakeCase()`', correct: false }
      - { value: '`underscore()`', correct: false }
      - { value: '`camelToSnake()`', correct: false }
    help: |
      The `snake()` method is part of the `AbstractString` class.
      https://symfony.com/doc/current/components/string.html#case-conversion
  -
    question: 'What is the purpose of the `symfony/notifier` component in the context of user feedback?'
    answers:
      - { value: 'To send confirmation emails or SMS messages to users after an action.', correct: true }
      - { value: 'To collect user reviews and ratings.', correct: false }
      - { value: 'To provide a chat interface for user support.', correct: false }
      - { value: 'To track user behavior on the website.', correct: false }
    help: |
      Notifier can be used for various user-facing notifications.
      https://symfony.com/doc/current/notifier.html
  -
    question: 'Which of the following is a best practice for managing secrets (e.g., API keys, database passwords) in a Symfony application?'
    answers:
      - { value: 'Using Symfony\'s built-in `secrets` management system.', correct: true }
      - { value: 'Storing them directly in `parameters.yaml` and committing to Git.', correct: false }
      - { value: 'Hardcoding them in PHP files.', correct: false }
      - { value: 'Storing them in a publicly accessible `.env` file.', correct: false }
    help: |
      Symfony provides a secure way to manage secrets, especially for production.
      https://symfony.com/doc/current/configuration/secrets.html
  -
    question: 'What is the primary purpose of the `symfony/flex` component?'
    answers:
      - { value: 'To provide a Composer plugin that simplifies Symfony application setup and package management.', correct: true }
      - { value: 'To add a flexible templating engine to Symfony.', correct: false }
      - { value: 'To enable flexible routing configurations.', correct: false }
      - { value: 'To allow flexible dependency injection.', correct: false }
    help: |
      Flex automates common tasks and provides recipes for Symfony packages.
      https://symfony.com/doc/current/setup/flex.html
  -
    question: 'When debugging a Symfony application, what does the `php bin/console debug:router` command show?'
    answers:
      - { value: 'A list of all registered routes in the application, including their names, methods, and paths.', correct: true }
      - { value: 'The current route being matched by the request.', correct: false }
      - { value: 'Errors related to routing configuration.', correct: false }
      - { value: 'Performance metrics for route matching.', correct: false }
    help: |
      The `debug:router` command is essential for understanding your application's routing.
      https://symfony.com/doc/current/console/commands_overview.html#debug-commands
  -
    question: 'What is the purpose of the `symfony/mime` component when handling file uploads?'
    answers:
      - { value: 'To determine the MIME type of an uploaded file.', correct: true }
      - { value: 'To compress uploaded files.', correct: false }
      - { value: 'To store uploaded files securely.', correct: false }
      - { value: 'To validate file extensions.', correct: false }
    help: |
      The Mime component can help identify the content type of files.
      https://symfony.com/doc/current/components/mime.html#guessing-the-mime-type
  -
    question: 'Which of the following is a best practice for handling user-uploaded files in a Symfony application?'
    answers:
      - { value: 'Storing them in a dedicated, publicly accessible directory (e.g., `public/uploads`) and serving them via the web server.', correct: true }
      - { value: 'Storing them directly in the `src/` directory.', correct: false }
      - { value: 'Storing them in the database as BLOBs.', correct: false }
      - { value: 'Allowing users to upload files to any directory on the server.', correct: false }
    help: |
      Uploaded files should be stored in a controlled, accessible location.
      https://symfony.com/doc/current/controller/upload_file.html
  -
    question: 'What is the purpose of the `symfony/serializer` component when dealing with API responses?'
    answers:
      - { value: 'To convert PHP objects (e.g., Doctrine entities) into a format suitable for API clients (e.g., JSON, XML).', correct: true }
      - { value: 'To validate incoming API requests.', correct: false }
      - { value: 'To authenticate API clients.', correct: false }
      - { value: 'To route API requests to the correct controller.', correct: false }
    help: |
      The Serializer is fundamental for building RESTful APIs in Symfony.
      https://symfony.com/doc/current/components/serializer.html
  -
    question: 'Which of the following is a benefit of using the `symfony/messenger` component for long-running tasks?'
    answers:
      - { value: 'It allows the web request to complete quickly, deferring the long-running task to a background process.', correct: true }
      - { value: 'It guarantees that the task will never fail.', correct: false }
      - { value: 'It makes long-running tasks execute faster.', correct: false }
      - { value: 'It eliminates the need for separate server processes for background tasks.', correct: false }
    help: |
      Messenger helps improve user experience by offloading heavy computations.
      https://symfony.com/doc/current/messenger.html
  -
    question: 'What is the purpose of the `symfony/console` component?'
    answers:
      - { value: 'To build powerful command-line applications and commands.', correct: true }
      - { value: 'To interact with the web browser console.', correct: false }
      - { value: 'To manage server-side console logs.', correct: false }
      - { value: 'To provide a graphical user interface for Symfony applications.', correct: false }
    help: |
      The Console component is the foundation for Symfony's command-line interface.
      https://symfony.com/doc/current/components/console.html
  -
    question: 'How do you define a new console command in Symfony?'
    answers:
      - { value: 'By creating a class that extends `Symfony\\Component\\Console\\Command\\Command` and configuring it as a service.', correct: true }
      - { value: 'By creating a function in `bin/console`.', correct: false }
      - { value: 'By adding an entry to `config/commands.yaml`.', correct: false }
      - { value: 'By implementing `CommandInterface` directly.', correct: false }
    help: |
      Symfony commands are typically defined as services.
      https://symfony.com/doc/current/console/commands.html
  -
    question: 'What is the purpose of the `symfony/translation` component?'
    answers:
      - { value: 'To provide tools for translating strings and managing translation files in an application.', correct: true }
      - { value: 'To automatically translate content using external APIs.', correct: false }
      - { value: 'To detect the language of user input.', correct: false }
      - { value: 'To translate database schema names.', correct: false }
    help: |
      The Translation component is the core of Symfony's internationalization features.
      https://symfony.com/doc/current/translation.html